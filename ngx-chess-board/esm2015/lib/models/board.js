import { cloneDeep } from 'lodash';
import { Bishop } from './pieces/bishop';
import { Color } from './pieces/color';
import { King } from './pieces/king';
import { Knight } from './pieces/knight';
import { Pawn } from './pieces/pawn';
import { Point } from './pieces/point';
import { Queen } from './pieces/queen';
import { Rook } from './pieces/rook';
export class Board {
    constructor() {
        this.board = [];
        this.pieces = [];
        this.enPassantPoint = null;
        this.enPassantPiece = null;
        this.lastMoveSrc = null;
        this.lastMoveDest = null;
        this.possibleCaptures = [];
        this.possibleMoves = [];
        this.currentWhitePlayer = true;
        this.reverted = false;
        this.fullMoveCount = 1;
        for (let i = 0; i < 8; ++i) {
            this.board[i] = [];
            for (let j = 0; j < 8; ++j) {
                this.board[i][j] = 0;
            }
        }
    }
    isXYInPossibleMoves(row, col) {
        return this.possibleMoves.some((move) => move.row === row && move.col === col);
    }
    isXYInPossibleCaptures(row, col) {
        return this.possibleCaptures.some((capture) => capture.row === row && capture.col === col);
    }
    isXYInSourceMove(i, j) {
        return this.lastMoveSrc && this.lastMoveSrc.row === i && this.lastMoveSrc.col === j;
    }
    isXYInDestMove(i, j) {
        return this.lastMoveDest && this.lastMoveDest.row === i && this.lastMoveDest.col === j;
    }
    isXYInActiveMove(i, j) {
        return this.activePiece && this.activePiece.point.row === i && this.activePiece.point.col === j;
    }
    isPointInPossibleMoves(point) {
        return this.possibleMoves.some((move) => move.row === point.row && move.col === point.col);
    }
    isPointInPossibleCaptures(point) {
        return this.possibleCaptures.some((capture) => capture.row === point.row && capture.col === point.col);
    }
    reset() {
        this.lastMoveDest = null;
        this.lastMoveSrc = null;
        this.whiteKingChecked = false;
        this.blackKingChecked = false;
        this.possibleCaptures = [];
        this.possibleMoves = [];
        this.activePiece = null;
        this.reverted = false;
        this.currentWhitePlayer = true;
        this.enPassantPoint = null;
        this.enPassantPiece = null;
        this.fullMoveCount = 1;
        this.calculateFEN();
    }
    reverse() {
        this.reverted = !this.reverted;
        this.activePiece = null;
        this.possibleMoves = [];
        this.possibleCaptures = [];
        this.pieces.forEach((piece) => this.reversePoint(piece.point));
        this.reversePoint(this.lastMoveSrc);
        this.reversePoint(this.lastMoveDest);
        if (this.enPassantPoint && this.enPassantPiece) {
            this.reversePoint(this.enPassantPoint);
        }
    }
    clone() {
        return cloneDeep(this);
    }
    isFieldTakenByEnemy(row, col, enemyColor) {
        if (row > 7 || row < 0 || col > 7 || col < 0) {
            return false;
        }
        return this.pieces.some((piece) => piece.point.col === col && piece.point.row === row && piece.color === enemyColor);
    }
    isFieldEmpty(row, col) {
        if (row > 7 || row < 0 || col > 7 || col < 0) {
            return false;
        }
        return !this.pieces.some((piece) => piece.point.col === col && piece.point.row === row);
    }
    isFieldUnderAttack(row, col, color) {
        return this.pieces
            .filter((piece) => piece.color === color)
            .some((piece) => piece.getCoveredFields().some((field) => field.col === col && field.row === row));
    }
    getPieceByField(row, col) {
        if (this.isFieldEmpty(row, col)) {
            //   throw new Error('Piece not found');
            return undefined;
        }
        return this.pieces.find((piece) => piece.point.col === col && piece.point.row === row);
    }
    isKingInCheck(color, pieces) {
        const king = pieces.find((piece) => piece.color === color && piece instanceof King);
        if (king) {
            return pieces.some((piece) => piece
                .getPossibleCaptures()
                .some((point) => point.col === king.point.col && point.row === king.point.row) &&
                piece.color !== color);
        }
        return false;
    }
    getKingByColor(color) {
        return this.pieces.find((piece) => piece instanceof King && piece.color === color);
    }
    getCastleFENString(color) {
        const king = this.getKingByColor(color);
        if (!king || king.isMovedAlready) {
            return '';
        }
        let fen = '';
        const leftRook = this.getPieceByField(king.point.row, 0);
        const rightRook = this.getPieceByField(king.point.row, 7);
        if (rightRook instanceof Rook && rightRook.color === color) {
            if (!rightRook.isMovedAlready) {
                fen += this.reverted ? 'q' : 'k';
            }
        }
        if (leftRook instanceof Rook && leftRook.color === color) {
            if (!leftRook.isMovedAlready) {
                fen += this.reverted ? 'k' : 'q';
            }
        }
        fen = fen.split('').sort().join('');
        return color === Color.BLACK ? fen : fen.toUpperCase();
    }
    getEnPassantFENString() {
        if (this.enPassantPoint) {
            if (this.reverted) {
                return String.fromCharCode(104 - this.enPassantPoint.col) + (this.enPassantPoint.row + 1);
            }
            else {
                return String.fromCharCode(97 + this.enPassantPoint.col) + (Math.abs(this.enPassantPoint.row - 7) + 1);
            }
        }
        else {
            return '-';
        }
    }
    calculateFEN() {
        let fen = '';
        for (let i = 0; i < 8; ++i) {
            let emptyFields = 0;
            for (let j = 0; j < 8; ++j) {
                const foundPiece = this.pieces.find((piece) => piece.point.col === j && piece.point.row === i);
                if (foundPiece) {
                    if (emptyFields > 0) {
                        fen += emptyFields;
                        emptyFields = 0;
                    }
                    if (foundPiece instanceof Rook) {
                        fen += foundPiece.color === Color.BLACK ? 'r' : 'R';
                    }
                    else {
                        if (foundPiece instanceof Knight) {
                            fen += foundPiece.color === Color.BLACK ? 'n' : 'N';
                        }
                        else {
                            if (foundPiece instanceof Bishop) {
                                fen += foundPiece.color === Color.BLACK ? 'b' : 'B';
                            }
                            else {
                                if (foundPiece instanceof Queen) {
                                    fen += foundPiece.color === Color.BLACK ? 'q' : 'Q';
                                }
                                else {
                                    if (foundPiece instanceof King) {
                                        fen += foundPiece.color === Color.BLACK ? 'k' : 'K';
                                    }
                                    else {
                                        if (foundPiece instanceof Pawn) {
                                            fen += foundPiece.color === Color.BLACK ? 'p' : 'P';
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    ++emptyFields;
                }
            }
            if (emptyFields > 0) {
                fen += emptyFields;
            }
            fen += '/';
        }
        fen = fen.substr(0, fen.length - 1);
        if (this.reverted) {
            fen = fen.split('').reverse().join('');
        }
        fen += ' ' + (this.currentWhitePlayer ? 'w' : 'b');
        const whiteEnPassant = this.getCastleFENString(Color.WHITE);
        const blackEnPassant = this.getCastleFENString(Color.BLACK);
        let concatedEnPassant = whiteEnPassant + blackEnPassant;
        if (!concatedEnPassant) {
            concatedEnPassant = '-';
        }
        fen += ' ' + concatedEnPassant;
        fen += ' ' + this.getEnPassantFENString();
        fen += ' ' + 0;
        fen += ' ' + this.fullMoveCount;
        this.fen = fen;
    }
    isXYInPointSelection(i, j) {
        return false;
    }
    reversePoint(point) {
        if (point) {
            point.row = Math.abs(point.row - 7);
            point.col = Math.abs(point.col - 7);
        }
    }
    getPieceByPoint(row, col) {
        row = Math.floor(row);
        col = Math.floor(col);
        return this.pieces.find((piece) => piece.point.col === col && piece.point.row === row);
    }
    checkIfPawnTakesEnPassant(newPoint) {
        if (newPoint.isEqual(this.enPassantPoint)) {
            console.log('usuwam');
            this.pieces = this.pieces.filter((piece) => piece !== this.enPassantPiece);
            this.enPassantPoint = null;
            this.enPassantPiece = null;
        }
    }
    checkIfPawnEnpassanted(piece, newPoint) {
        if (Math.abs(piece.point.row - newPoint.row) > 1) {
            this.enPassantPiece = piece;
            this.enPassantPoint = new Point((piece.point.row + newPoint.row) / 2, piece.point.col);
        }
        else {
            this.enPassantPoint = null;
            this.enPassantPiece = null;
        }
    }
    isKingChecked(piece) {
        if (piece instanceof King) {
            return piece.color === Color.WHITE
                ? this.whiteKingChecked
                : this.blackKingChecked;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9hcmQuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvS29tcHV0ZXIvRGVza3RvcC9Ob3d5IGZvbGRlci9jaGVzcy1ib2FyZC9wcm9qZWN0cy9uZ3gtY2hlc3MtYm9hcmQvc3JjLyIsInNvdXJjZXMiOlsibGliL21vZGVscy9ib2FyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ25DLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdkMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVyQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdkMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckMsTUFBTSxPQUFPLEtBQUs7SUFvQmQ7UUFuQkEsVUFBSyxHQUFlLEVBQUUsQ0FBQztRQUN2QixXQUFNLEdBQVksRUFBRSxDQUFDO1FBRXJCLG1CQUFjLEdBQVUsSUFBSSxDQUFDO1FBQzdCLG1CQUFjLEdBQVUsSUFBSSxDQUFDO1FBQzdCLGdCQUFXLEdBQVUsSUFBSSxDQUFDO1FBQzFCLGlCQUFZLEdBQVUsSUFBSSxDQUFDO1FBSTNCLHFCQUFnQixHQUFVLEVBQUUsQ0FBQztRQUM3QixrQkFBYSxHQUFZLEVBQUUsQ0FBQztRQUc1Qix1QkFBa0IsR0FBRyxJQUFJLENBQUM7UUFDMUIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQixrQkFBYSxHQUFHLENBQUMsQ0FBQztRQUlkLEtBQUssSUFBSSxD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R0FBRyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQzlDLElBQUksQ0FBQyxjQUFjLEdBQUcsS0FBSyxDQUFDO1lBQzVCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxLQUFLLENBQzNCLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFDcEMsS0FBSyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQ2xCLENBQUM7U0FDTDthQUFNO1lBQ0gsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7WUFDM0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7U0FDOUI7SUFDTCxDQUFDO0lBRUQsYUFBYSxDQUFDLEtBQVk7UUFDdEIsSUFBSSxLQUFLLFlBQVksSUFBSSxFQUFFO1lBQ3ZCLE9BQU8sS0FBSyxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsS0FBSztnQkFDOUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxnQkFBZ0I7Z0JBQ3ZCLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUM7U0FDL0I7SUFDTCxDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjbG9uZURlZXAgfSBmcm9tICdsb2Rhc2gnO1xuaW1wb3J0IHsgQmlzaG9wIH0gZnJvbSAnLi9waWVjZXMvYmlzaG9wJztcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi9waWVjZXMvY29sb3InO1xuaW1wb3J0IHsgS2luZyB9IGZyb20gJy4vcGllY2VzL2tpbmcnO1xuaW1wb3J0IHsgS25pZ2h0IH0gZnJvbSAnLi9waWVjZXMva25pZ2h0JztcbmltcG9ydCB7IFBhd24gfSBmcm9tICcuL3BpZWNlcy9wYXduJztcbmltcG9ydCB7IFBpZWNlIH0gZnJvbSAnLi9waWVjZXMvcGllY2UnO1xuaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuL3BpZWNlcy9wb2ludCc7XG5pbXBvcnQgeyBRdWVlbiB9IGZyb20gJy4vcGllY2VzL3F1ZWVuJztcbmltcG9ydCB7IFJvb2sgfSBmcm9tICcuL3BpZWNlcy9yb29rJztcblxuZXhwb3J0IGNsYXNzIEJvYXJkIHtcbiAgICBib2FyZDogbnVtYmVyW11bXSA9IFtdO1xuICAgIHBpZWNlczogUGllY2VbXSA9IFtdO1xuXG4gICAgZW5QYXNzYW50UG9pbnQ6IFBvaW50ID0gbnVsbDtcbiAgICBlblBhc3NhbnRQaWVjZTogUGllY2UgPSBudWxsO1xuICAgIGxhc3RNb3ZlU3JjOiBQb2ludCA9IG51bGw7XG4gICAgbGFzdE1vdmVEZXN0OiBQb2ludCA9IG51bGw7XG4gICAgYWN0aXZlUGllY2U6IFBpZWNlO1xuXG4gICAgYmxhY2tLaW5nQ2hlY2tlZDogYm9vbGVhbjtcbiAgICBwb3NzaWJsZUNhcHR1cmVzOiBhbnlbXSA9IFtdO1xuICAgIHBvc3NpYmxlTW92ZXM6IFBvaW50W10gPSBbXTtcbiAgICB3aGl0ZUtpbmdDaGVja2VkOiBib29sZWFuO1xuXG4gICAgY3VycmVudFdoaXRlUGxheWVyID0gdHJ1ZTtcbiAgICByZXZlcnRlZCA9IGZhbHNlO1xuICAgIGZ1bGxNb3ZlQ291bnQgPSAxO1xuICAgIGZlbjogc3RyaW5nO1xuXG4gICAgY29uc3RydWN0b3IoKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgODsgKytpKSB7XG4gICAgICAgICAgICB0aGlzLmJvYXJkW2ldID0gW107XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDg7ICsraikge1xuICAgICAgICAgICAgICAgIHRoaXMuYm9hcmRbaV1bal0gPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgaXNYWUluUG9zc2libGVNb3Zlcyhyb3c6IG51bWJlciwgY29sOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zc2libGVNb3Zlcy5zb21lKChtb3ZlKSA9PiBtb3ZlLnJvdyA9PT0gcm93ICYmIG1vdmUuY29sID09PSBjb2wpO1xuICAgIH1cblxuICAgIGlzWFlJblBvc3NpYmxlQ2FwdHVyZXMocm93OiBudW1iZXIsIGNvbDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvc3NpYmxlQ2FwdHVyZXMuc29tZSgoY2FwdHVyZSkgPT4gY2FwdHVyZS5yb3cgPT09IHJvdyAmJiBjYXB0dXJlLmNvbCA9PT0gY29sKTtcbiAgICB9XG5cbiAgICBpc1hZSW5Tb3VyY2VNb3ZlKGk6IG51bWJlciwgajogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxhc3RNb3ZlU3JjICYmIHRoaXMubGFzdE1vdmVTcmMucm93ID09PSBpICYmIHRoaXMubGFzdE1vdmVTcmMuY29sID09PSBqO1xuICAgIH1cblxuICAgIGlzWFlJbkRlc3RNb3ZlKGk6IG51bWJlciwgajogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxhc3RNb3ZlRGVzdCAmJiB0aGlzLmxhc3RNb3ZlRGVzdC5yb3cgPT09IGkgJiYgdGhpcy5sYXN0TW92ZURlc3QuY29sID09PSBqO1xuICAgIH1cblxuICAgIGlzWFlJbkFjdGl2ZU1vdmUoaTogbnVtYmVyLCBqOiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWN0aXZlUGllY2UgJiYgdGhpcy5hY3RpdmVQaWVjZS5wb2ludC5yb3cgPT09IGkgJiYgdGhpcy5hY3RpdmVQaWVjZS5wb2ludC5jb2wgPT09IGo7XG4gICAgfVxuXG4gICAgaXNQb2ludEluUG9zc2libGVNb3Zlcyhwb2ludDogUG9pbnQpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucG9zc2libGVNb3Zlcy5zb21lKChtb3ZlKSA9PiBtb3ZlLnJvdyA9PT0gcG9pbnQucm93ICYmIG1vdmUuY29sID09PSBwb2ludC5jb2wpO1xuICAgIH1cblxuICAgIGlzUG9pbnRJblBvc3NpYmxlQ2FwdHVyZXMocG9pbnQ6IFBvaW50KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvc3NpYmxlQ2FwdHVyZXMuc29tZSgoY2FwdHVyZSkgPT4gY2FwdHVyZS5yb3cgPT09IHBvaW50LnJvdyAmJiBjYXB0dXJlLmNvbCA9PT0gcG9pbnQuY29sKTtcbiAgICB9XG5cbiAgICByZXNldCgpIHtcbiAgICAgICAgdGhpcy5sYXN0TW92ZURlc3QgPSBudWxsO1xuICAgICAgICB0aGlzLmxhc3RNb3ZlU3JjID0gbnVsbDtcbiAgICAgICAgdGhpcy53aGl0ZUtpbmdDaGVja2VkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYmxhY2tLaW5nQ2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLnBvc3NpYmxlQ2FwdHVyZXMgPSBbXTtcbiAgICAgICAgdGhpcy5wb3NzaWJsZU1vdmVzID0gW107XG4gICAgICAgIHRoaXMuYWN0aXZlUGllY2UgPSBudWxsO1xuICAgICAgICB0aGlzLnJldmVydGVkID0gZmFsc2U7XG4gICAgICAgIHRoaXMuY3VycmVudFdoaXRlUGxheWVyID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5lblBhc3NhbnRQb2ludCA9IG51bGw7XG4gICAgICAgIHRoaXMuZW5QYXNzYW50UGllY2UgPSBudWxsO1xuICAgICAgICB0aGlzLmZ1bGxNb3ZlQ291bnQgPSAxO1xuICAgICAgICB0aGlzLmNhbGN1bGF0ZUZFTigpO1xuICAgIH1cblxuICAgICAgICByZXZlcnNlKCkge1xuICAgICAgICB0aGlzLnJldmVydGVkID0gIXRoaXMucmV2ZXJ0ZWQ7XG4gICAgICAgIHRoaXMuYWN0aXZlUGllY2UgPSBudWxsO1xuICAgICAgICB0aGlzLnBvc3NpYmxlTW92ZXMgPSBbXTtcbiAgICAgICAgdGhpcy5wb3NzaWJsZUNhcHR1cmVzID0gW107XG5cbiAgICAgICAgdGhpcy5waWVjZXMuZm9yRWFjaCgocGllY2U6IFBpZWNlKSA9PiB0aGlzLnJldmVyc2VQb2ludChwaWVjZS5wb2ludCkpO1xuXG4gICAgICAgIHRoaXMucmV2ZXJzZVBvaW50KHRoaXMubGFzdE1vdmVTcmMpO1xuICAgICAgICB0aGlzLnJldmVyc2VQb2ludCh0aGlzLmxhc3RNb3ZlRGVzdCk7XG5cbiAgICAgICAgaWYgKHRoaXMuZW5QYXNzYW50UG9pbnQgJiYgdGhpcy5lblBhc3NhbnRQaWVjZSkge1xuICAgICAgICAgICAgdGhpcy5yZXZlcnNlUG9pbnQodGhpcy5lblBhc3NhbnRQb2ludCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjbG9uZSgpOiBCb2FyZCB7XG4gICAgICAgIHJldHVybiBjbG9uZURlZXAodGhpcyk7XG4gICAgfVxuXG4gICAgaXNGaWVsZFRha2VuQnlFbmVteShyb3c6IG51bWJlciwgY29sOiBudW1iZXIsIGVuZW15Q29sb3I6IENvbG9yKTogYm9vbGVhbiB7XG4gICAgICAgIGlmIChyb3cgPiA3IHx8IHJvdyA8IDAgfHwgY29sID4gNyB8fCBjb2wgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucGllY2VzLnNvbWUoXG4gICAgICAgICAgICAocGllY2UpID0+IHBpZWNlLnBvaW50LmNvbCA9PT0gY29sICYmIHBpZWNlLnBvaW50LnJvdyA9PT0gcm93ICYmIHBpZWNlLmNvbG9yID09PSBlbmVteUNvbG9yXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgaXNGaWVsZEVtcHR5KHJvdzogbnVtYmVyLCBjb2w6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgICBpZiAocm93ID4gNyB8fCByb3cgPCAwIHx8IGNvbCA+IDcgfHwgY29sIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAhdGhpcy5waWVjZXMuc29tZSgocGllY2UpID0+IHBpZWNlLnBvaW50LmNvbCA9PT0gY29sICYmIHBpZWNlLnBvaW50LnJvdyA9PT0gcm93KTtcbiAgICB9XG5cbiAgICBpc0ZpZWxkVW5kZXJBdHRhY2socm93OiBudW1iZXIsIGNvbDogbnVtYmVyLCBjb2xvcjogQ29sb3IpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGllY2VzXG4gICAgICAgICAgICAuZmlsdGVyKChwaWVjZSkgPT4gcGllY2UuY29sb3IgPT09IGNvbG9yKVxuICAgICAgICAgICAgLnNvbWUoKHBpZWNlKSA9PiBwaWVjZS5nZXRDb3ZlcmVkRmllbGRzKCkuc29tZSgoZmllbGQpID0+IGZpZWxkLmNvbCA9PT0gY29sICYmIGZpZWxkLnJvdyA9PT0gcm93KSk7XG4gICAgfVxuXG4gICAgZ2V0UGllY2VCeUZpZWxkKHJvdzogbnVtYmVyLCBjb2w6IG51bWJlcik6IFBpZWNlIHtcbiAgICAgICAgaWYgKHRoaXMuaXNGaWVsZEVtcHR5KHJvdywgY29sKSkge1xuICAgICAgICAgICAgLy8gICB0aHJvdyBuZXcgRXJyb3IoJ1BpZWNlIG5vdCBmb3VuZCcpO1xuICAgICAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLnBpZWNlcy5maW5kKChwaWVjZSkgPT4gcGllY2UucG9pbnQuY29sID09PSBjb2wgJiYgcGllY2UucG9pbnQucm93ID09PSByb3cpO1xuICAgIH1cblxuICAgIGlzS2luZ0luQ2hlY2soY29sb3I6IENvbG9yLCBwaWVjZXM6IFBpZWNlW10pOiBib29sZWFuIHtcbiAgICAgICAgY29uc3Qga2luZyA9IHBpZWNlcy5maW5kKChwaWVjZSkgPT4gcGllY2UuY29sb3IgPT09IGNvbG9yICYmIHBpZWNlIGluc3RhbmNlb2YgS2luZyk7XG5cbiAgICAgICAgaWYgKGtpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBwaWVjZXMuc29tZShcbiAgICAgICAgICAgICAgICAocGllY2UpID0+XG4gICAgICAgICAgICAgICAgICAgIHBpZWNlXG4gICAgICAgICAgICAgICAgICAgICAgICAuZ2V0UG9zc2libGVDYXB0dXJlcygpXG4gICAgICAgICAgICAgICAgICAgICAgICAuc29tZSgocG9pbnQpID0+IHBvaW50LmNvbCA9PT0ga2luZy5wb2ludC5jb2wgJiYgcG9pbnQucm93ID09PSBraW5nLnBvaW50LnJvdykgJiZcbiAgICAgICAgICAgICAgICAgICAgcGllY2UuY29sb3IgIT09IGNvbG9yXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBnZXRLaW5nQnlDb2xvcihjb2xvcjogQ29sb3IpOiBLaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucGllY2VzLmZpbmQoKHBpZWNlKSA9PiBwaWVjZSBpbnN0YW5jZW9mIEtpbmcgJiYgcGllY2UuY29sb3IgPT09IGNvbG9yKSBhcyBLaW5nO1xuICAgIH1cblxuICAgIGdldENhc3RsZUZFTlN0cmluZyhjb2xvcjogQ29sb3IpIHtcbiAgICAgICAgY29uc3Qga2luZyA9IHRoaXMuZ2V0S2luZ0J5Q29sb3IoY29sb3IpO1xuXG4gICAgICAgIGlmICgha2luZyB8fCBraW5nLmlzTW92ZWRBbHJlYWR5KSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgZmVuID0gJyc7XG4gICAgICAgIGNvbnN0IGxlZnRSb29rID0gdGhpcy5nZXRQaWVjZUJ5RmllbGQoa2luZy5wb2ludC5yb3csIDApO1xuICAgICAgICBjb25zdCByaWdodFJvb2sgPSB0aGlzLmdldFBpZWNlQnlGaWVsZChraW5nLnBvaW50LnJvdywgNyk7XG5cbiAgICAgICAgaWYgKHJpZ2h0Um9vayBpbnN0YW5jZW9mIFJvb2sgJiYgcmlnaHRSb29rLmNvbG9yID09PSBjb2xvcikge1xuICAgICAgICAgICAgaWYgKCFyaWdodFJvb2suaXNNb3ZlZEFscmVhZHkpIHtcbiAgICAgICAgICAgICAgICBmZW4gKz0gdGhpcy5yZXZlcnRlZCA/ICdxJyA6ICdrJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChsZWZ0Um9vayBpbnN0YW5jZW9mIFJvb2sgJiYgbGVmdFJvb2suY29sb3IgPT09IGNvbG9yKSB7XG4gICAgICAgICAgICBpZiAoIWxlZnRSb29rLmlzTW92ZWRBbHJlYWR5KSB7XG4gICAgICAgICAgICAgICAgZmVuICs9IHRoaXMucmV2ZXJ0ZWQgPyAnaycgOiAncSc7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBmZW4gPSBmZW4uc3BsaXQoJycpLnNvcnQoKS5qb2luKCcnKTtcbiAgICAgICAgcmV0dXJuIGNvbG9yID09PSBDb2xvci5CTEFDSyA/IGZlbiA6IGZlbi50b1VwcGVyQ2FzZSgpO1xuICAgIH1cblxuICAgIGdldEVuUGFzc2FudEZFTlN0cmluZygpIHtcbiAgICAgICAgaWYgKHRoaXMuZW5QYXNzYW50UG9pbnQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJldmVydGVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoMTA0IC0gdGhpcy5lblBhc3NhbnRQb2ludC5jb2wpICsgKHRoaXMuZW5QYXNzYW50UG9pbnQucm93ICsgMSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKDk3ICsgdGhpcy5lblBhc3NhbnRQb2ludC5jb2wpICsgKE1hdGguYWJzKHRoaXMuZW5QYXNzYW50UG9pbnQucm93IC0gNykgKyAxKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAnLSc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBjYWxjdWxhdGVGRU4oKSB7XG4gICAgICAgIGxldCBmZW4gPSAnJztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCA4OyArK2kpIHtcbiAgICAgICAgICAgIGxldCBlbXB0eUZpZWxkcyA9IDA7XG4gICAgICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IDg7ICsraikge1xuICAgICAgICAgICAgICAgIGNvbnN0IGZvdW5kUGllY2UgPSB0aGlzLnBpZWNlcy5maW5kKChwaWVjZSkgPT4gcGllY2UucG9pbnQuY29sID09PSBqICYmIHBpZWNlLnBvaW50LnJvdyA9PT0gaSk7XG4gICAgICAgICAgICAgICAgaWYgKGZvdW5kUGllY2UpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVtcHR5RmllbGRzID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZmVuICs9IGVtcHR5RmllbGRzO1xuICAgICAgICAgICAgICAgICAgICAgICAgZW1wdHlGaWVsZHMgPSAwO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGZvdW5kUGllY2UgaW5zdGFuY2VvZiBSb29rKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmZW4gKz0gZm91bmRQaWVjZS5jb2xvciA9PT0gQ29sb3IuQkxBQ0sgPyAncicgOiAnUic7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm91bmRQaWVjZSBpbnN0YW5jZW9mIEtuaWdodCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlbiArPSBmb3VuZFBpZWNlLmNvbG9yID09PSBDb2xvci5CTEFDSyA/ICduJyA6ICdOJztcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvdW5kUGllY2UgaW5zdGFuY2VvZiBCaXNob3ApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVuICs9IGZvdW5kUGllY2UuY29sb3IgPT09IENvbG9yLkJMQUNLID8gJ2InIDogJ0InO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3VuZFBpZWNlIGluc3RhbmNlb2YgUXVlZW4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlbiArPSBmb3VuZFBpZWNlLmNvbG9yID09PSBDb2xvci5CTEFDSyA/ICdxJyA6ICdRJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3VuZFBpZWNlIGluc3RhbmNlb2YgS2luZykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlbiArPSBmb3VuZFBpZWNlLmNvbG9yID09PSBDb2xvci5CTEFDSyA/ICdrJyA6ICdLJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvdW5kUGllY2UgaW5zdGFuY2VvZiBQYXduKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZlbiArPSBmb3VuZFBpZWNlLmNvbG9yID09PSBDb2xvci5CTEFDSyA/ICdwJyA6ICdQJztcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICArK2VtcHR5RmllbGRzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGVtcHR5RmllbGRzID4gMCkge1xuICAgICAgICAgICAgICAgIGZlbiArPSBlbXB0eUZpZWxkcztcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZmVuICs9ICcvJztcbiAgICAgICAgfVxuXG4gICAgICAgIGZlbiA9IGZlbi5zdWJzdHIoMCwgZmVuLmxlbmd0aCAtIDEpO1xuXG4gICAgICAgIGlmICh0aGlzLnJldmVydGVkKSB7XG4gICAgICAgICAgICBmZW4gPSBmZW4uc3BsaXQoJycpLnJldmVyc2UoKS5qb2luKCcnKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZlbiArPSAnICcgKyAodGhpcy5jdXJyZW50V2hpdGVQbGF5ZXIgPyAndycgOiAnYicpO1xuICAgICAgICBjb25zdCB3aGl0ZUVuUGFzc2FudCA9IHRoaXMuZ2V0Q2FzdGxlRkVOU3RyaW5nKENvbG9yLldISVRFKTtcbiAgICAgICAgY29uc3QgYmxhY2tFblBhc3NhbnQgPSB0aGlzLmdldENhc3RsZUZFTlN0cmluZyhDb2xvci5CTEFDSyk7XG4gICAgICAgIGxldCBjb25jYXRlZEVuUGFzc2FudCA9IHdoaXRlRW5QYXNzYW50ICsgYmxhY2tFblBhc3NhbnQ7XG4gICAgICAgIGlmICghY29uY2F0ZWRFblBhc3NhbnQpIHtcbiAgICAgICAgICAgIGNvbmNhdGVkRW5QYXNzYW50ID0gJy0nO1xuICAgICAgICB9XG5cbiAgICAgICAgZmVuICs9ICcgJyArIGNvbmNhdGVkRW5QYXNzYW50O1xuICAgICAgICBmZW4gKz0gJyAnICsgdGhpcy5nZXRFblBhc3NhbnRGRU5TdHJpbmcoKTtcbiAgICAgICAgZmVuICs9ICcgJyArIDA7XG4gICAgICAgIGZlbiArPSAnICcgKyB0aGlzLmZ1bGxNb3ZlQ291bnQ7XG4gICAgICAgIHRoaXMuZmVuID0gZmVuO1xuICAgIH1cblxuICAgIGlzWFlJblBvaW50U2VsZWN0aW9uKGk6IG51bWJlciwgajogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJldmVyc2VQb2ludChwb2ludDogUG9pbnQpIHtcbiAgICAgICAgaWYgKHBvaW50KSB7XG4gICAgICAgICAgICBwb2ludC5yb3cgPSBNYXRoLmFicyhwb2ludC5yb3cgLSA3KTtcbiAgICAgICAgICAgIHBvaW50LmNvbCA9IE1hdGguYWJzKHBvaW50LmNvbCAtIDcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldFBpZWNlQnlQb2ludChyb3c6IG51bWJlciwgY29sOiBudW1iZXIpOiBQaWVjZSB7XG4gICAgICAgIHJvdyA9IE1hdGguZmxvb3Iocm93KTtcbiAgICAgICAgY29sID0gTWF0aC5mbG9vcihjb2wpO1xuICAgICAgICByZXR1cm4gdGhpcy5waWVjZXMuZmluZChcbiAgICAgICAgICAgIChwaWVjZSkgPT4gcGllY2UucG9pbnQuY29sID09PSBjb2wgJiYgcGllY2UucG9pbnQucm93ID09PSByb3dcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2hlY2tJZlBhd25UYWtlc0VuUGFzc2FudChuZXdQb2ludDogUG9pbnQpIHtcbiAgICAgICAgaWYgKG5ld1BvaW50LmlzRXF1YWwodGhpcy5lblBhc3NhbnRQb2ludCkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCd1c3V3YW0nKTtcbiAgICAgICAgICAgIHRoaXMucGllY2VzID0gdGhpcy5waWVjZXMuZmlsdGVyKFxuICAgICAgICAgICAgICAgIChwaWVjZSkgPT4gcGllY2UgIT09IHRoaXMuZW5QYXNzYW50UGllY2VcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLmVuUGFzc2FudFBvaW50ID0gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuZW5QYXNzYW50UGllY2UgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGNoZWNrSWZQYXduRW5wYXNzYW50ZWQocGllY2U6IFBhd24sIG5ld1BvaW50OiBQb2ludCkge1xuICAgICAgICBpZiAoTWF0aC5hYnMocGllY2UucG9pbnQucm93IC0gbmV3UG9pbnQucm93KSA+IDEpIHtcbiAgICAgICAgICAgIHRoaXMuZW5QYXNzYW50UGllY2UgPSBwaWVjZTtcbiAgICAgICAgICAgIHRoaXMuZW5QYXNzYW50UG9pbnQgPSBuZXcgUG9pbnQoXG4gICAgICAgICAgICAgICAgKHBpZWNlLnBvaW50LnJvdyArIG5ld1BvaW50LnJvdykgLyAyLFxuICAgICAgICAgICAgICAgIHBpZWNlLnBvaW50LmNvbFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZW5QYXNzYW50UG9pbnQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5lblBhc3NhbnRQaWVjZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBpc0tpbmdDaGVja2VkKHBpZWNlOiBQaWVjZSkge1xuICAgICAgICBpZiAocGllY2UgaW5zdGFuY2VvZiBLaW5nKSB7XG4gICAgICAgICAgICByZXR1cm4gcGllY2UuY29sb3IgPT09IENvbG9yLldISVRFXG4gICAgICAgICAgICAgICAgPyB0aGlzLndoaXRlS2luZ0NoZWNrZWRcbiAgICAgICAgICAgICAgICA6IHRoaXMuYmxhY2tLaW5nQ2hlY2tlZDtcbiAgICAgICAgfVxuICAgIH1cblxufVxuIl19