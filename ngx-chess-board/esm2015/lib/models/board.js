import { cloneDeep } from 'lodash';
import { Bishop } from './pieces/bishop';
import { Color } from './pieces/color';
import { King } from './pieces/king';
import { Knight } from './pieces/knight';
import { Pawn } from './pieces/pawn';
import { Point } from './pieces/point';
import { Queen } from './pieces/queen';
import { Rook } from './pieces/rook';
export class Board {
    constructor() {
        this.board = [];
        this.pieces = [];
        this.enPassantPoint = null;
        this.enPassantPiece = null;
        this.lastMoveSrc = null;
        this.lastMoveDest = null;
        this.possibleCaptures = [];
        this.possibleMoves = [];
        this.currentWhitePlayer = true;
        this.reverted = false;
        this.fullMoveCount = 1;
        for (let i = 0; i < 8; ++i) {
            this.board[i] = [];
            for (let j = 0; j < 8; ++j) {
                this.board[i][j] = 0;
            }
        }
    }
    isXYInPossibleMoves(row, col) {
        return this.possibleMoves.some((move) => move.row === row && move.col === col);
    }
    isXYInPossibleCaptures(row, col) {
        return this.possibleCaptures.some((capture) => capture.row === row && capture.col === col);
    }
    isXYInSourceMove(i, j) {
        return this.lastMoveSrc && this.lastMoveSrc.row === i && this.lastMoveSrc.col === j;
    }
    isXYInDestMove(i, j) {
        return this.lastMoveDest && this.lastMoveDest.row === i && this.lastMoveDest.col === j;
    }
    isXYInActiveMove(i, j) {
        return this.activePiece && this.activePiece.point.row === i && this.activePiece.point.col === j;
    }
    isPointInPossibleMoves(point) {
        return this.possibleMoves.some((move) => move.row === point.row && move.col === point.col);
    }
    isPointInPossibleCaptures(point) {
        return this.possibleCaptures.some((capture) => capture.row === point.row && capture.col === point.col);
    }
    reset() {
        this.lastMoveDest = null;
        this.lastMoveSrc = null;
        this.whiteKingChecked = false;
        this.blackKingChecked = false;
        this.possibleCaptures = [];
        this.possibleMoves = [];
        this.activePiece = null;
        this.reverted = false;
        this.currentWhitePlayer = true;
        this.enPassantPoint = null;
        this.enPassantPiece = null;
        this.fullMoveCount = 1;
        this.calculateFEN();
    }
    reverse() {
        this.reverted = !this.reverted;
        this.activePiece = null;
        this.possibleMoves = [];
        this.possibleCaptures = [];
        this.pieces.forEach((piece) => this.reversePoint(piece.point));
        this.reversePoint(this.lastMoveSrc);
        if (this.enPassantPoint && this.enPassantPiece) {
            this.reversePoint(this.enPassantPoint);
        }
    }
    clone() {
        return cloneDeep(this);
    }
    isFieldTakenByEnemy(row, col, enemyColor) {
        if (row > 7 || row < 0 || col > 7 || col < 0) {
            return false;
        }
        return this.pieces.some((piece) => piece.point.col === col && piece.point.row === row && piece.color === enemyColor);
    }
    isFieldEmpty(row, col) {
        if (row > 7 || row < 0 || col > 7 || col < 0) {
            return false;
        }
        return !this.pieces.some((piece) => piece.point.col === col && piece.point.row === row);
    }
    isFieldUnderAttack(row, col, color) {
        return this.pieces
            .filter((piece) => piece.color === color)
            .some((piece) => piece.getCoveredFields().some((field) => field.col === col && field.row === row));
    }
    getPieceByField(row, col) {
        if (this.isFieldEmpty(row, col)) {
            //   throw new Error('Piece not found');
            return undefined;
        }
        return this.pieces.find((piece) => piece.point.col === col && piece.point.row === row);
    }
    isKingInCheck(color, pieces) {
        const king = pieces.find((piece) => piece.color === color && piece instanceof King);
        if (king) {
            return pieces.some((piece) => piece
                .getPossibleCaptures()
                .some((point) => point.col === king.point.col && point.row === king.point.row) &&
                piece.color !== color);
        }
        return false;
    }
    getKingByColor(color) {
        return this.pieces.find((piece) => piece instanceof King && piece.color === color);
    }
    getCastleFENString(color) {
        const king = this.getKingByColor(color);
        if (!king || king.isMovedAlready) {
            return '';
        }
        let fen = '';
        const leftRook = this.getPieceByField(king.point.row, 0);
        const rightRook = this.getPieceByField(king.point.row, 7);
        if (rightRook instanceof Rook && rightRook.color === color) {
            if (!rightRook.isMovedAlready) {
                fen += this.reverted ? 'q' : 'k';
            }
        }
        if (leftRook instanceof Rook && leftRook.color === color) {
            if (!leftRook.isMovedAlready) {
                fen += this.reverted ? 'k' : 'q';
            }
        }
        fen = fen.split('').sort().join('');
        return color === Color.BLACK ? fen : fen.toUpperCase();
    }
    getEnPassantFENString() {
        if (this.enPassantPoint) {
            if (this.reverted) {
                return String.fromCharCode(104 - this.enPassantPoint.col) + (this.enPassantPoint.row + 1);
            }
            else {
                return String.fromCharCode(97 + this.enPassantPoint.col) + (Math.abs(this.enPassantPoint.row - 7) + 1);
            }
        }
        else {
            return '-';
        }
    }
    calculateFEN() {
        let fen = '';
        for (let i = 0; i < 8; ++i) {
            let emptyFields = 0;
            for (let j = 0; j < 8; ++j) {
                const foundPiece = this.pieces.find((piece) => piece.point.col === j && piece.point.row === i);
                if (foundPiece) {
                    if (emptyFields > 0) {
                        fen += emptyFields;
                        emptyFields = 0;
                    }
                    if (foundPiece instanceof Rook) {
                        fen += foundPiece.color === Color.BLACK ? 'r' : 'R';
                    }
                    else {
                        if (foundPiece instanceof Knight) {
                            fen += foundPiece.color === Color.BLACK ? 'n' : 'N';
                        }
                        else {
                            if (foundPiece instanceof Bishop) {
                                fen += foundPiece.color === Color.BLACK ? 'b' : 'B';
                            }
                            else {
                                if (foundPiece instanceof Queen) {
                                    fen += foundPiece.color === Color.BLACK ? 'q' : 'Q';
                                }
                                else {
                                    if (foundPiece instanceof King) {
                                        fen += foundPiece.color === Color.BLACK ? 'k' : 'K';
                                    }
                                    else {
                                        if (foundPiece instanceof Pawn) {
                                            fen += foundPiece.color === Color.BLACK ? 'p' : 'P';
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
                else {
                    ++emptyFields;
                }
            }
            if (emptyFields > 0) {
                fen += emptyFields;
            }
            fen += '/';
        }
        fen = fen.substr(0, fen.length - 1);
        if (this.reverted) {
            fen = fen.split('').reverse().join('');
        }
        fen += ' ' + (this.currentWhitePlayer ? 'w' : 'b');
        const whiteEnPassant = this.getCastleFENString(Color.WHITE);
        const blackEnPassant = this.getCastleFENString(Color.BLACK);
        let concatedEnPassant = whiteEnPassant + blackEnPassant;
        if (!concatedEnPassant) {
            concatedEnPassant = '-';
        }
        fen += ' ' + concatedEnPassant;
        fen += ' ' + this.getEnPassantFENString();
        fen += ' ' + 0;
        fen += ' ' + this.fullMoveCount;
        this.fen = fen;
    }
    isXYInPointSelection(i, j) {
        return false;
    }
    reversePoint(point) {
        if (point) {
            point.row = Math.abs(point.row - 7);
            point.col = Math.abs(point.col - 7);
        }
    }
    getPieceByPoint(row, col) {
        row = Math.floor(row);
        col = Math.floor(col);
        return this.pieces.find((piece) => piece.point.col === col && piece.point.row === row);
    }
    checkIfPawnTakesEnPassant(newPoint) {
        if (newPoint.isEqual(this.enPassantPoint)) {
            this.pieces = this.pieces.filter((piece) => piece !== this.enPassantPiece);
            this.enPassantPoint = null;
            this.enPassantPiece = null;
        }
    }
    checkIfPawnEnpassanted(piece, newPoint) {
        if (Math.abs(piece.point.row - newPoint.row) > 1) {
            this.enPassantPiece = piece;
            this.enPassantPoint = new Point((piece.point.row + newPoint.row) / 2, piece.point.col);
        }
        else {
            this.enPassantPoint = null;
            this.enPassantPiece = null;
        }
    }
    isKingChecked(piece) {
        if (piece instanceof King) {
            return piece.color === Color.WHITE
                ? this.whiteKingChecked
                : this.blackKingChecked;
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYm9hcmQuanMiLCJzb3VyY2VSb290IjoiQzovVXNlcnMvS29tcHV0ZXIvRGVza3RvcC9Ob3d5IGZvbGRlci9jaGVzcy1ib2FyZC9wcm9qZWN0cy9uZ3gtY2hlc3MtYm9hcmQvc3JjLyIsInNvdXJjZXMiOlsibGliL21vZGVscy9ib2FyZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ25DLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6QyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdkMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNyQyxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDekMsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUVyQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDdkMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFckMsTUFBTSxPQUFPLEtBQUs7SUFvQmQ7UUFuQkEsVUFBSyxHQUFlLEVBQUUsQ0FBQztRQUN2QixXQUFNLEdBQVksRUFBRSxDQUFDO1FBRXJCLG1CQUFjLEdBQVUsSUFBSSxDQUFDO1FBQzdCLG1CQUFjLEdBQVUsSUFBSSxDQUFDO1FBQzdCLGdCQUFXLEdBQVUsSUFBSSxDQUFDO1FBQzFCLGlCQUFZLEdBQVUsSUFBSSxDQUFDO1FBSTNCLHFCQUFnQixHQUFVLEVBQUUsQ0FBQztRQUM3QixrQkFBYSxHQUFZLEVBQUUsQ0FBQztRQUc1Qix1QkFBa0IsR0FBRyxJQUFJLENBQUM7UUFDMUIsYUFBUSxHQUFHLEtBQUssQ0FBQztRQUNqQixrQkFBYSxHQUFHLENBQUMsQ0FBQztRQUlkLEtBQUssSUFBSSxD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Y0FBYyxHQUFHLElBQUksS0FBSyxDQUMzQixDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQ3BDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUNsQixDQUFDO1NBQ0w7YUFBTTtZQUNILElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1lBQzNCLElBQUksQ0FBQyxjQUFjLEdBQUcsSUFBSSxDQUFDO1NBQzlCO0lBQ0wsQ0FBQztJQUVELGFBQWEsQ0FBQyxLQUFZO1FBQ3RCLElBQUksS0FBSyxZQUFZLElBQUksRUFBRTtZQUN2QixPQUFPLEtBQUssQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLEtBQUs7Z0JBQzlCLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCO2dCQUN2QixDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDO1NBQy9CO0lBQ0wsQ0FBQztDQUVKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY2xvbmVEZWVwIH0gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IEJpc2hvcCB9IGZyb20gJy4vcGllY2VzL2Jpc2hvcCc7XG5pbXBvcnQgeyBDb2xvciB9IGZyb20gJy4vcGllY2VzL2NvbG9yJztcbmltcG9ydCB7IEtpbmcgfSBmcm9tICcuL3BpZWNlcy9raW5nJztcbmltcG9ydCB7IEtuaWdodCB9IGZyb20gJy4vcGllY2VzL2tuaWdodCc7XG5pbXBvcnQgeyBQYXduIH0gZnJvbSAnLi9waWVjZXMvcGF3bic7XG5pbXBvcnQgeyBQaWVjZSB9IGZyb20gJy4vcGllY2VzL3BpZWNlJztcbmltcG9ydCB7IFBvaW50IH0gZnJvbSAnLi9waWVjZXMvcG9pbnQnO1xuaW1wb3J0IHsgUXVlZW4gfSBmcm9tICcuL3BpZWNlcy9xdWVlbic7XG5pbXBvcnQgeyBSb29rIH0gZnJvbSAnLi9waWVjZXMvcm9vayc7XG5cbmV4cG9ydCBjbGFzcyBCb2FyZCB7XG4gICAgYm9hcmQ6IG51bWJlcltdW10gPSBbXTtcbiAgICBwaWVjZXM6IFBpZWNlW10gPSBbXTtcblxuICAgIGVuUGFzc2FudFBvaW50OiBQb2ludCA9IG51bGw7XG4gICAgZW5QYXNzYW50UGllY2U6IFBpZWNlID0gbnVsbDtcbiAgICBsYXN0TW92ZVNyYzogUG9pbnQgPSBudWxsO1xuICAgIGxhc3RNb3ZlRGVzdDogUG9pbnQgPSBudWxsO1xuICAgIGFjdGl2ZVBpZWNlOiBQaWVjZTtcblxuICAgIGJsYWNrS2luZ0NoZWNrZWQ6IGJvb2xlYW47XG4gICAgcG9zc2libGVDYXB0dXJlczogYW55W10gPSBbXTtcbiAgICBwb3NzaWJsZU1vdmVzOiBQb2ludFtdID0gW107XG4gICAgd2hpdGVLaW5nQ2hlY2tlZDogYm9vbGVhbjtcblxuICAgIGN1cnJlbnRXaGl0ZVBsYXllciA9IHRydWU7XG4gICAgcmV2ZXJ0ZWQgPSBmYWxzZTtcbiAgICBmdWxsTW92ZUNvdW50ID0gMTtcbiAgICBmZW46IHN0cmluZztcblxuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDg7ICsraSkge1xuICAgICAgICAgICAgdGhpcy5ib2FyZFtpXSA9IFtdO1xuICAgICAgICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCA4OyArK2opIHtcbiAgICAgICAgICAgICAgICB0aGlzLmJvYXJkW2ldW2pdID0gMDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzWFlJblBvc3NpYmxlTW92ZXMocm93OiBudW1iZXIsIGNvbDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvc3NpYmxlTW92ZXMuc29tZSgobW92ZSkgPT4gbW92ZS5yb3cgPT09IHJvdyAmJiBtb3ZlLmNvbCA9PT0gY29sKTtcbiAgICB9XG5cbiAgICBpc1hZSW5Qb3NzaWJsZUNhcHR1cmVzKHJvdzogbnVtYmVyLCBjb2w6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3NzaWJsZUNhcHR1cmVzLnNvbWUoKGNhcHR1cmUpID0+IGNhcHR1cmUucm93ID09PSByb3cgJiYgY2FwdHVyZS5jb2wgPT09IGNvbCk7XG4gICAgfVxuXG4gICAgaXNYWUluU291cmNlTW92ZShpOiBudW1iZXIsIGo6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5sYXN0TW92ZVNyYyAmJiB0aGlzLmxhc3RNb3ZlU3JjLnJvdyA9PT0gaSAmJiB0aGlzLmxhc3RNb3ZlU3JjLmNvbCA9PT0gajtcbiAgICB9XG5cbiAgICBpc1hZSW5EZXN0TW92ZShpOiBudW1iZXIsIGo6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gdGhpcy5sYXN0TW92ZURlc3QgJiYgdGhpcy5sYXN0TW92ZURlc3Qucm93ID09PSBpICYmIHRoaXMubGFzdE1vdmVEZXN0LmNvbCA9PT0gajtcbiAgICB9XG5cbiAgICBpc1hZSW5BY3RpdmVNb3ZlKGk6IG51bWJlciwgajogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmFjdGl2ZVBpZWNlICYmIHRoaXMuYWN0aXZlUGllY2UucG9pbnQucm93ID09PSBpICYmIHRoaXMuYWN0aXZlUGllY2UucG9pbnQuY29sID09PSBqO1xuICAgIH1cblxuICAgIGlzUG9pbnRJblBvc3NpYmxlTW92ZXMocG9pbnQ6IFBvaW50KTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnBvc3NpYmxlTW92ZXMuc29tZSgobW92ZSkgPT4gbW92ZS5yb3cgPT09IHBvaW50LnJvdyAmJiBtb3ZlLmNvbCA9PT0gcG9pbnQuY29sKTtcbiAgICB9XG5cbiAgICBpc1BvaW50SW5Qb3NzaWJsZUNhcHR1cmVzKHBvaW50OiBQb2ludCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5wb3NzaWJsZUNhcHR1cmVzLnNvbWUoKGNhcHR1cmUpID0+IGNhcHR1cmUucm93ID09PSBwb2ludC5yb3cgJiYgY2FwdHVyZS5jb2wgPT09IHBvaW50LmNvbCk7XG4gICAgfVxuXG4gICAgcmVzZXQoKSB7XG4gICAgICAgIHRoaXMubGFzdE1vdmVEZXN0ID0gbnVsbDtcbiAgICAgICAgdGhpcy5sYXN0TW92ZVNyYyA9IG51bGw7XG4gICAgICAgIHRoaXMud2hpdGVLaW5nQ2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmJsYWNrS2luZ0NoZWNrZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5wb3NzaWJsZUNhcHR1cmVzID0gW107XG4gICAgICAgIHRoaXMucG9zc2libGVNb3ZlcyA9IFtdO1xuICAgICAgICB0aGlzLmFjdGl2ZVBpZWNlID0gbnVsbDtcbiAgICAgICAgdGhpcy5yZXZlcnRlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmN1cnJlbnRXaGl0ZVBsYXllciA9IHRydWU7XG4gICAgICAgIHRoaXMuZW5QYXNzYW50UG9pbnQgPSBudWxsO1xuICAgICAgICB0aGlzLmVuUGFzc2FudFBpZWNlID0gbnVsbDtcbiAgICAgICAgdGhpcy5mdWxsTW92ZUNvdW50ID0gMTtcbiAgICAgICAgdGhpcy5jYWxjdWxhdGVGRU4oKTtcbiAgICB9XG5cbiAgICAgICAgcmV2ZXJzZSgpIHtcbiAgICAgICAgdGhpcy5yZXZlcnRlZCA9ICF0aGlzLnJldmVydGVkO1xuICAgICAgICB0aGlzLmFjdGl2ZVBpZWNlID0gbnVsbDtcbiAgICAgICAgdGhpcy5wb3NzaWJsZU1vdmVzID0gW107XG4gICAgICAgIHRoaXMucG9zc2libGVDYXB0dXJlcyA9IFtdO1xuXG4gICAgICAgIHRoaXMucGllY2VzLmZvckVhY2goKHBpZWNlOiBQaWVjZSkgPT4gdGhpcy5yZXZlcnNlUG9pbnQocGllY2UucG9pbnQpKTtcblxuICAgICAgICB0aGlzLnJldmVyc2VQb2ludCh0aGlzLmxhc3RNb3ZlU3JjKTtcblxuICAgICAgICBpZiAodGhpcy5lblBhc3NhbnRQb2ludCAmJiB0aGlzLmVuUGFzc2FudFBpZWNlKSB7XG4gICAgICAgICAgICB0aGlzLnJldmVyc2VQb2ludCh0aGlzLmVuUGFzc2FudFBvaW50KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNsb25lKCk6IEJvYXJkIHtcbiAgICAgICAgcmV0dXJuIGNsb25lRGVlcCh0aGlzKTtcbiAgICB9XG5cbiAgICBpc0ZpZWxkVGFrZW5CeUVuZW15KHJvdzogbnVtYmVyLCBjb2w6IG51bWJlciwgZW5lbXlDb2xvcjogQ29sb3IpOiBib29sZWFuIHtcbiAgICAgICAgaWYgKHJvdyA+IDcgfHwgcm93IDwgMCB8fCBjb2wgPiA3IHx8IGNvbCA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5waWVjZXMuc29tZShcbiAgICAgICAgICAgIChwaWVjZSkgPT4gcGllY2UucG9pbnQuY29sID09PSBjb2wgJiYgcGllY2UucG9pbnQucm93ID09PSByb3cgJiYgcGllY2UuY29sb3IgPT09IGVuZW15Q29sb3JcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBpc0ZpZWxkRW1wdHkocm93OiBudW1iZXIsIGNvbDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICAgIGlmIChyb3cgPiA3IHx8IHJvdyA8IDAgfHwgY29sID4gNyB8fCBjb2wgPCAwKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICF0aGlzLnBpZWNlcy5zb21lKChwaWVjZSkgPT4gcGllY2UucG9pbnQuY29sID09PSBjb2wgJiYgcGllY2UucG9pbnQucm93ID09PSByb3cpO1xuICAgIH1cblxuICAgIGlzRmllbGRVbmRlckF0dGFjayhyb3c6IG51bWJlciwgY29sOiBudW1iZXIsIGNvbG9yOiBDb2xvcikge1xuICAgICAgICByZXR1cm4gdGhpcy5waWVjZXNcbiAgICAgICAgICAgIC5maWx0ZXIoKHBpZWNlKSA9PiBwaWVjZS5jb2xvciA9PT0gY29sb3IpXG4gICAgICAgICAgICAuc29tZSgocGllY2UpID0+IHBpZWNlLmdldENvdmVyZWRGaWVsZHMoKS5zb21lKChmaWVsZCkgPT4gZmllbGQuY29sID09PSBjb2wgJiYgZmllbGQucm93ID09PSByb3cpKTtcbiAgICB9XG5cbiAgICBnZXRQaWVjZUJ5RmllbGQocm93OiBudW1iZXIsIGNvbDogbnVtYmVyKTogUGllY2Uge1xuICAgICAgICBpZiAodGhpcy5pc0ZpZWxkRW1wdHkocm93LCBjb2wpKSB7XG4gICAgICAgICAgICAvLyAgIHRocm93IG5ldyBFcnJvcignUGllY2Ugbm90IGZvdW5kJyk7XG4gICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRoaXMucGllY2VzLmZpbmQoKHBpZWNlKSA9PiBwaWVjZS5wb2ludC5jb2wgPT09IGNvbCAmJiBwaWVjZS5wb2ludC5yb3cgPT09IHJvdyk7XG4gICAgfVxuXG4gICAgaXNLaW5nSW5DaGVjayhjb2xvcjogQ29sb3IsIHBpZWNlczogUGllY2VbXSk6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBraW5nID0gcGllY2VzLmZpbmQoKHBpZWNlKSA9PiBwaWVjZS5jb2xvciA9PT0gY29sb3IgJiYgcGllY2UgaW5zdGFuY2VvZiBLaW5nKTtcblxuICAgICAgICBpZiAoa2luZykge1xuICAgICAgICAgICAgcmV0dXJuIHBpZWNlcy5zb21lKFxuICAgICAgICAgICAgICAgIChwaWVjZSkgPT5cbiAgICAgICAgICAgICAgICAgICAgcGllY2VcbiAgICAgICAgICAgICAgICAgICAgICAgIC5nZXRQb3NzaWJsZUNhcHR1cmVzKClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5zb21lKChwb2ludCkgPT4gcG9pbnQuY29sID09PSBraW5nLnBvaW50LmNvbCAmJiBwb2ludC5yb3cgPT09IGtpbmcucG9pbnQucm93KSAmJlxuICAgICAgICAgICAgICAgICAgICBwaWVjZS5jb2xvciAhPT0gY29sb3JcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIGdldEtpbmdCeUNvbG9yKGNvbG9yOiBDb2xvcik6IEtpbmcge1xuICAgICAgICByZXR1cm4gdGhpcy5waWVjZXMuZmluZCgocGllY2UpID0+IHBpZWNlIGluc3RhbmNlb2YgS2luZyAmJiBwaWVjZS5jb2xvciA9PT0gY29sb3IpIGFzIEtpbmc7XG4gICAgfVxuXG4gICAgZ2V0Q2FzdGxlRkVOU3RyaW5nKGNvbG9yOiBDb2xvcikge1xuICAgICAgICBjb25zdCBraW5nID0gdGhpcy5nZXRLaW5nQnlDb2xvcihjb2xvcik7XG5cbiAgICAgICAgaWYgKCFraW5nIHx8IGtpbmcuaXNNb3ZlZEFscmVhZHkpIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIGxldCBmZW4gPSAnJztcbiAgICAgICAgY29uc3QgbGVmdFJvb2sgPSB0aGlzLmdldFBpZWNlQnlGaWVsZChraW5nLnBvaW50LnJvdywgMCk7XG4gICAgICAgIGNvbnN0IHJpZ2h0Um9vayA9IHRoaXMuZ2V0UGllY2VCeUZpZWxkKGtpbmcucG9pbnQucm93LCA3KTtcblxuICAgICAgICBpZiAocmlnaHRSb29rIGluc3RhbmNlb2YgUm9vayAmJiByaWdodFJvb2suY29sb3IgPT09IGNvbG9yKSB7XG4gICAgICAgICAgICBpZiAoIXJpZ2h0Um9vay5pc01vdmVkQWxyZWFkeSkge1xuICAgICAgICAgICAgICAgIGZlbiArPSB0aGlzLnJldmVydGVkID8gJ3EnIDogJ2snO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGxlZnRSb29rIGluc3RhbmNlb2YgUm9vayAmJiBsZWZ0Um9vay5jb2xvciA9PT0gY29sb3IpIHtcbiAgICAgICAgICAgIGlmICghbGVmdFJvb2suaXNNb3ZlZEFscmVhZHkpIHtcbiAgICAgICAgICAgICAgICBmZW4gKz0gdGhpcy5yZXZlcnRlZCA/ICdrJyA6ICdxJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZlbiA9IGZlbi5zcGxpdCgnJykuc29ydCgpLmpvaW4oJycpO1xuICAgICAgICByZXR1cm4gY29sb3IgPT09IENvbG9yLkJMQUNLID8gZmVuIDogZmVuLnRvVXBwZXJDYXNlKCk7XG4gICAgfVxuXG4gICAgZ2V0RW5QYXNzYW50RkVOU3RyaW5nKCkge1xuICAgICAgICBpZiAodGhpcy5lblBhc3NhbnRQb2ludCkge1xuICAgICAgICAgICAgaWYgKHRoaXMucmV2ZXJ0ZWQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZSgxMDQgLSB0aGlzLmVuUGFzc2FudFBvaW50LmNvbCkgKyAodGhpcy5lblBhc3NhbnRQb2ludC5yb3cgKyAxKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoOTcgKyB0aGlzLmVuUGFzc2FudFBvaW50LmNvbCkgKyAoTWF0aC5hYnModGhpcy5lblBhc3NhbnRQb2ludC5yb3cgLSA3KSArIDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuICctJztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNhbGN1bGF0ZUZFTigpIHtcbiAgICAgICAgbGV0IGZlbiA9ICcnO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDg7ICsraSkge1xuICAgICAgICAgICAgbGV0IGVtcHR5RmllbGRzID0gMDtcbiAgICAgICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgODsgKytqKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZm91bmRQaWVjZSA9IHRoaXMucGllY2VzLmZpbmQoKHBpZWNlKSA9PiBwaWVjZS5wb2ludC5jb2wgPT09IGogJiYgcGllY2UucG9pbnQucm93ID09PSBpKTtcbiAgICAgICAgICAgICAgICBpZiAoZm91bmRQaWVjZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZW1wdHlGaWVsZHMgPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBmZW4gKz0gZW1wdHlGaWVsZHM7XG4gICAgICAgICAgICAgICAgICAgICAgICBlbXB0eUZpZWxkcyA9IDA7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBpZiAoZm91bmRQaWVjZSBpbnN0YW5jZW9mIFJvb2spIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZlbiArPSBmb3VuZFBpZWNlLmNvbG9yID09PSBDb2xvci5CTEFDSyA/ICdyJyA6ICdSJztcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmb3VuZFBpZWNlIGluc3RhbmNlb2YgS25pZ2h0KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVuICs9IGZvdW5kUGllY2UuY29sb3IgPT09IENvbG9yLkJMQUNLID8gJ24nIDogJ04nO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm91bmRQaWVjZSBpbnN0YW5jZW9mIEJpc2hvcCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZW4gKz0gZm91bmRQaWVjZS5jb2xvciA9PT0gQ29sb3IuQkxBQ0sgPyAnYicgOiAnQic7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvdW5kUGllY2UgaW5zdGFuY2VvZiBRdWVlbikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVuICs9IGZvdW5kUGllY2UuY29sb3IgPT09IENvbG9yLkJMQUNLID8gJ3EnIDogJ1EnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZvdW5kUGllY2UgaW5zdGFuY2VvZiBLaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVuICs9IGZvdW5kUGllY2UuY29sb3IgPT09IENvbG9yLkJMQUNLID8gJ2snIDogJ0snO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZm91bmRQaWVjZSBpbnN0YW5jZW9mIFBhd24pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmVuICs9IGZvdW5kUGllY2UuY29sb3IgPT09IENvbG9yLkJMQUNLID8gJ3AnIDogJ1AnO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICsrZW1wdHlGaWVsZHM7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoZW1wdHlGaWVsZHMgPiAwKSB7XG4gICAgICAgICAgICAgICAgZmVuICs9IGVtcHR5RmllbGRzO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBmZW4gKz0gJy8nO1xuICAgICAgICB9XG5cbiAgICAgICAgZmVuID0gZmVuLnN1YnN0cigwLCBmZW4ubGVuZ3RoIC0gMSk7XG5cbiAgICAgICAgaWYgKHRoaXMucmV2ZXJ0ZWQpIHtcbiAgICAgICAgICAgIGZlbiA9IGZlbi5zcGxpdCgnJykucmV2ZXJzZSgpLmpvaW4oJycpO1xuICAgICAgICB9XG5cbiAgICAgICAgZmVuICs9ICcgJyArICh0aGlzLmN1cnJlbnRXaGl0ZVBsYXllciA/ICd3JyA6ICdiJyk7XG4gICAgICAgIGNvbnN0IHdoaXRlRW5QYXNzYW50ID0gdGhpcy5nZXRDYXN0bGVGRU5TdHJpbmcoQ29sb3IuV0hJVEUpO1xuICAgICAgICBjb25zdCBibGFja0VuUGFzc2FudCA9IHRoaXMuZ2V0Q2FzdGxlRkVOU3RyaW5nKENvbG9yLkJMQUNLKTtcbiAgICAgICAgbGV0IGNvbmNhdGVkRW5QYXNzYW50ID0gd2hpdGVFblBhc3NhbnQgKyBibGFja0VuUGFzc2FudDtcbiAgICAgICAgaWYgKCFjb25jYXRlZEVuUGFzc2FudCkge1xuICAgICAgICAgICAgY29uY2F0ZWRFblBhc3NhbnQgPSAnLSc7XG4gICAgICAgIH1cblxuICAgICAgICBmZW4gKz0gJyAnICsgY29uY2F0ZWRFblBhc3NhbnQ7XG4gICAgICAgIGZlbiArPSAnICcgKyB0aGlzLmdldEVuUGFzc2FudEZFTlN0cmluZygpO1xuICAgICAgICBmZW4gKz0gJyAnICsgMDtcbiAgICAgICAgZmVuICs9ICcgJyArIHRoaXMuZnVsbE1vdmVDb3VudDtcbiAgICAgICAgdGhpcy5mZW4gPSBmZW47XG4gICAgfVxuXG4gICAgaXNYWUluUG9pbnRTZWxlY3Rpb24oaTogbnVtYmVyLCBqOiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmV2ZXJzZVBvaW50KHBvaW50OiBQb2ludCkge1xuICAgICAgICBpZiAocG9pbnQpIHtcbiAgICAgICAgICAgIHBvaW50LnJvdyA9IE1hdGguYWJzKHBvaW50LnJvdyAtIDcpO1xuICAgICAgICAgICAgcG9pbnQuY29sID0gTWF0aC5hYnMocG9pbnQuY29sIC0gNyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0UGllY2VCeVBvaW50KHJvdzogbnVtYmVyLCBjb2w6IG51bWJlcik6IFBpZWNlIHtcbiAgICAgICAgcm93ID0gTWF0aC5mbG9vcihyb3cpO1xuICAgICAgICBjb2wgPSBNYXRoLmZsb29yKGNvbCk7XG4gICAgICAgIHJldHVybiB0aGlzLnBpZWNlcy5maW5kKFxuICAgICAgICAgICAgKHBpZWNlKSA9PiBwaWVjZS5wb2ludC5jb2wgPT09IGNvbCAmJiBwaWVjZS5wb2ludC5yb3cgPT09IHJvd1xuICAgICAgICApO1xuICAgIH1cblxuICAgIHB1YmxpYyBjaGVja0lmUGF3blRha2VzRW5QYXNzYW50KG5ld1BvaW50OiBQb2ludCkge1xuICAgICAgICBpZiAobmV3UG9pbnQuaXNFcXVhbCh0aGlzLmVuUGFzc2FudFBvaW50KSkge1xuICAgICAgICAgICAgdGhpcy5waWVjZXMgPSB0aGlzLnBpZWNlcy5maWx0ZXIoXG4gICAgICAgICAgICAgICAgKHBpZWNlKSA9PiBwaWVjZSAhPT0gdGhpcy5lblBhc3NhbnRQaWVjZVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuZW5QYXNzYW50UG9pbnQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy5lblBhc3NhbnRQaWVjZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgY2hlY2tJZlBhd25FbnBhc3NhbnRlZChwaWVjZTogUGF3biwgbmV3UG9pbnQ6IFBvaW50KSB7XG4gICAgICAgIGlmIChNYXRoLmFicyhwaWVjZS5wb2ludC5yb3cgLSBuZXdQb2ludC5yb3cpID4gMSkge1xuICAgICAgICAgICAgdGhpcy5lblBhc3NhbnRQaWVjZSA9IHBpZWNlO1xuICAgICAgICAgICAgdGhpcy5lblBhc3NhbnRQb2ludCA9IG5ldyBQb2ludChcbiAgICAgICAgICAgICAgICAocGllY2UucG9pbnQucm93ICsgbmV3UG9pbnQucm93KSAvIDIsXG4gICAgICAgICAgICAgICAgcGllY2UucG9pbnQuY29sXG4gICAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5lblBhc3NhbnRQb2ludCA9IG51bGw7XG4gICAgICAgICAgICB0aGlzLmVuUGFzc2FudFBpZWNlID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGlzS2luZ0NoZWNrZWQocGllY2U6IFBpZWNlKSB7XG4gICAgICAgIGlmIChwaWVjZSBpbnN0YW5jZW9mIEtpbmcpIHtcbiAgICAgICAgICAgIHJldHVybiBwaWVjZS5jb2xvciA9PT0gQ29sb3IuV0hJVEVcbiAgICAgICAgICAgICAgICA/IHRoaXMud2hpdGVLaW5nQ2hlY2tlZFxuICAgICAgICAgICAgICAgIDogdGhpcy5ibGFja0tpbmdDaGVja2VkO1xuICAgICAgICB9XG4gICAgfVxuXG59XG4iXX0=