import { Color } from './color';
import { Piece } from './piece';
import { Point } from './point';
import { Rook } from './rook';
export class King extends Piece {
    constructor(point, color, constant, board) {
        super(point, color, constant, 0, board);
        this.castledAlready = false;
        this.shortCastled = false;
        this.longCastled = false;
        this.isCastling = false;
    }
    getPossibleMoves() {
        const possiblePoints = [];
        const row = this.point.row;
        const col = this.point.col;
        // lewo
        if (this.board.isFieldEmpty(row, col - 1) &&
            !this.board.isFieldUnderAttack(row, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row, col - 1));
        }
        // prawo
        if (this.board.isFieldEmpty(row, col + 1) &&
            !this.board.isFieldUnderAttack(row, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row, col + 1));
        }
        // dol
        if (this.board.isFieldEmpty(row + 1, col) &&
            !this.board.isFieldUnderAttack(row + 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row + 1, col));
        }
        // gora
        if (this.board.isFieldEmpty(row - 1, col) &&
            !this.board.isFieldUnderAttack(row - 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row - 1, col));
        }
        // lewo gora
        if (this.board.isFieldEmpty(row - 1, col - 1) &&
            !this.board.isFieldUnderAttack(row - 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row - 1, col - 1));
        }
        // prawo gora
        if (this.board.isFieldEmpty(row - 1, col + 1) &&
            !this.board.isFieldUnderAttack(row - 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row - 1, col + 1));
        }
        // lewo dol
        if (this.board.isFieldEmpty(row + 1, col - 1) &&
            !this.board.isFieldUnderAttack(row + 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row + 1, col - 1));
        }
        // prawo dol
        if (this.board.isFieldEmpty(row + 1, col + 1) &&
            !this.board.isFieldUnderAttack(row + 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row + 1, col + 1));
        }
        if (!this.isMovedAlready) {
            let longCastlePossible = true;
            for (let i = col - 1; i > 0; --i) {
                if (!this.board.isFieldEmpty(row, i) ||
                    this.board.isFieldUnderAttack(row, i, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
                    longCastlePossible = false;
                    break;
                }
            }
            if (longCastlePossible && !this.board.isKingInCheck(this.color, this.board.pieces) && this.board.getPieceByField(row, 0)) {
                const leftRook = this.board.getPieceByField(row, 0);
                if (leftRook instanceof Rook) {
                    if (!leftRook.isMovedAlready) {
                        possiblePoints.push(new Point(row, col - 2));
                    }
                }
            }
            let shortCastlePossible = true;
            for (let i = col + 1; i < 7; ++i) {
                if (!this.board.isFieldEmpty(row, i) ||
                    this.board.isFieldUnderAttack(row, i, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
                    shortCastlePossible = false;
                    break;
                }
            }
            if (shortCastlePossible && !this.board.isKingInCheck(this.color, this.board.pieces) && this.board.getPieceByField(row, 7)) {
                const rightRook = this.board.getPieceByField(row, 7);
                if (rightRook instanceof Rook) {
                    if (!rightRook.isMovedAlready) {
                        possiblePoints.push(new Point(row, col + 2));
                    }
                }
            }
        }
        return possiblePoints;
    }
    getPossibleCaptures() {
        const possiblePoints = [];
        const row = this.point.row;
        const col = this.point.col;
        // lewo
        if (this.board.isFieldTakenByEnemy(row, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) &&
            !this.board.isFieldUnderAttack(row, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row, col - 1));
        }
        // prawo
        if (this.board.isFieldTakenByEnemy(row, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) &&
            !this.board.isFieldUnderAttack(row, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row, col + 1));
        }
        // dol
        if (this.board.isFieldTakenByEnemy(row + 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) &&
            !this.board.isFieldUnderAttack(row + 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row + 1, col));
        }
        // gora
        if (this.board.isFieldTakenByEnemy(row - 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) &&
            !this.board.isFieldUnderAttack(row - 1, col, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row - 1, col));
        }
        // lewo gora
        if (this.board.isFieldTakenByEnemy(row - 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) &&
            !this.board.isFieldUnderAttack(row - 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row - 1, col - 1));
        }
        // prawo gora
        if (this.board.isFieldTakenByEnemy(row - 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) &&
            !this.board.isFieldUnderAttack(row - 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row - 1, col + 1));
        }
        // lewo dol
        if (this.board.isFieldTakenByEnemy(row + 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) &&
            !this.board.isFieldUnderAttack(row + 1, col - 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row + 1, col - 1));
        }
        // prawo dol
        if (this.board.isFieldTakenByEnemy(row + 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE) &&
            !this.board.isFieldUnderAttack(row + 1, col + 1, this.color === Color.WHITE ? Color.BLACK : Color.WHITE)) {
            possiblePoints.push(new Point(row + 1, col + 1));
        }
        return possiblePoints;
    }
    getCoveredFields() {
        const possiblePoints = [];
        const row = this.point.row;
        const col = this.point.col;
        // lewo
        if (this.board.isFieldTakenByEnemy(row, col - 1, this.color)) {
            possiblePoints.push(new Point(row, col - 1));
        }
        // prawo
        if (this.board.isFieldTakenByEnemy(row, col + 1, this.color)) {
            possiblePoints.push(new Point(row, col + 1));
        }
        // dol
        if (this.board.isFieldTakenByEnemy(row + 1, col, this.color)) {
            possiblePoints.push(new Point(row + 1, col));
        }
        // gora
        if (this.board.isFieldTakenByEnemy(row - 1, col, this.color)) {
            possiblePoints.push(new Point(row - 1, col));
        }
        // lewo gora
        if (this.board.isFieldTakenByEnemy(row - 1, col - 1, this.color)) {
            possiblePoints.push(new Point(row - 1, col - 1));
        }
        // prawo gora
        if (this.board.isFieldTakenByEnemy(row - 1, col + 1, this.color)) {
            possiblePoints.push(new Point(row - 1, col + 1));
        }
        // lewo dol
        if (this.board.isFieldTakenByEnemy(row + 1, col - 1, this.color)) {
            possiblePoints.push(new Point(row + 1, col - 1));
        }
        // prawo dol
        if (this.board.isFieldTakenByEnemy(row + 1, col + 1, this.color)) {
            possiblePoints.push(new Point(row + 1, col + 1));
        }
        return possiblePoints;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoia2luZy5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9Lb21wdXRlci9EZXNrdG9wL05vd3kgZm9sZGVyL2NoZXNzLWJvYXJkL3Byb2plY3RzL25neC1jaGVzcy1ib2FyZC9zcmMvIiwic291cmNlcyI6WyJsaWIvbW9kZWxzL3BpZWNlcy9raW5nLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDaEMsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNoQyxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQ2hDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFFOUIsTUFBTSxPQUFPLElBQUssU0FBUSxLQUFLO0lBTzNCLFlBQ0ksS0FBWSxFQUNaLEtBQVksRUFDWixRQUF1QixFQUN2QixLQUFZO1FBRVosS0FBSyxDQUFDLEtBQUssRUFBRSxLQUFLLEVBQUUsUUFBUSxFQUFFLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztRQVo1QyxtQkFBYyxHQUFHLEtBQUssQ0FBQztRQUN2QixpQkFBWSxHQUFHLEtBQUssQ0FBQztRQUNyQixnQkFBVyxHQUFHLEtBQUssQ0FBQztRQUVwQixlQUFVLEdBQUcsS0FBSyxDQUFDO0lBU25CLENBQUM7SUFFRCxnQkFBZ0I7UUFDWixNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUM7UUFFMUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFDM0IsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFDM0IsT0FBTztRQUNQLElBQ0ksSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUM7WUFDckMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUMxQixHQUFHLEVBQ0gsR0FBRyxHQUFHLENBQUMsRUFDUCxJQUFJLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQ3pELEVBQ0g7WUFDRSxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNoRDtRQUVELFFBQVE7UUFDUixJQUNJLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQ3JDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FDMUIsR0FBRyxFQUNILEdBQUcsR0FBRyxDQUFDLEVBQ1AsSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUN6RCxFQUNIO1lBQ0UsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDaEQ7UUFFRCxNQUFNO1FBQ04sSUFDSSxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQztZQUNyQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQzFCLEdBQUcsR0FBRyxDQUFDLEVBQ1AsR0FBRyxFQUNILElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FDekQsRUFDSDtZQUNFLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ2hEO1FBRUQsT0FBTztRQUNQLElBQ0ksSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUM7WUFDckMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUMxQixHQUFHLEdBQUcsQ0FBQyxFQUNQLEdBQUcsRUFDSCxJQUFJLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQ3pELEVBQ0g7WUFDRSxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztTQUNoRDtRQUVELFlBQVk7UUFDWixJQUNJLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQztZQUN6QyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQzFCLEdBQUcsR0FBRyxDQUFDLEVBQ1AsR0FBRyxHQUFHLENBQUMsRUFDUCxJQUFJLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQ3pELEVBQ0g7WUFDRSxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDcEQ7UUFDRCxhQUFhO1FBQ2IsSUFDSSxJQUFJLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUM7WUFDekMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUMxQixHQUFHLEdBQUcsQ0FBQyxFQUNQLEdBQUcsR0FBRyxDQUFDLEVBQ1AsSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUN6RCxFQUNIO1lBQ0UsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3BEO1FBRUQsV0FBVztRQUNYLElBQ0ksSUFBSSxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDO1lBQ3pDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FDMUIsR0FBRyxHQUFHLENBQUMsRUFDUCxHQUFHLEdBQUcsQ0FBQyxFQUNQLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FDekQsRUFDSDtZQUNFLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNwRDtRQUNELFlBQVk7UUFDWixJQUNJLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQztZQUN6QyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQzFCLEdBQUcsR0FBRyxDQUFDLEVBQ1AsR0FBRyxHQUFHLENBQUMsRUFDUCxJQUFJLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQ3pELEVBQ0g7WUFDRSxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDcEQ7UUFFRCxJQUFJLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRTtZQUN0QixJQUFJLGtCQUFrQixHQUFHLElBQUksQ0FBQztZQUM5QixLQUFLLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtnQkFDOUIsSUFDSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7b0JBQ2hDLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQ3pCLEdBQUcsRUFDSCxDQUFDLEVBQ0QsSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUN6RCxFQUNIO29CQUNFLGtCQUFrQixHQUFHLEtBQUssQ0FBQztvQkFDM0IsTUFBTTtpQkFDVDthQUNKO1lBRUQsSUFBSSxrQkFBa0IsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3RILE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDcEQsSUFBSSxRQUFRLFlBQVksSUFBSSxFQUFFO29CQUMxQixJQUFJLENBQUMsUUFBUSxDQUFDLGNBQWMsRUFBRTt3QkFDMUIsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7cUJBQ2hEO2lCQUNKO2FBQ0o7WUFFRCxJQUFJLG1CQUFtQixHQUFHLElBQUksQ0FBQztZQUMvQixLQUFLLElBQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRTtnQkFDOUIsSUFDSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUM7b0JBQ2hDLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQ3pCLEdBQUcsRUFDSCxDQUFDLEVBQ0QsSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUN6RCxFQUNIO29CQUNFLG1CQUFtQixHQUFHLEtBQUssQ0FBQztvQkFDNUIsTUFBTTtpQkFDVDthQUNKO1lBRUQsSUFBSSxtQkFBbUIsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLEVBQUU7Z0JBQ3ZILE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDckQsSUFBSSxTQUFTLFlBQVksSUFBSSxFQUFFO29CQUMzQixJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsRUFBRTt3QkFDM0IsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7cUJBQ2hEO2lCQUNKO2FBQ0o7U0FDSjtRQUVELE9BQU8sY0FBYyxDQUFDO0lBQzFCLENBQUM7SUFFRCxtQkFBbUI7UUFDZixNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUM7UUFFMUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFDM0IsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFFM0IsT0FBTztRQUNQLElBQ0ksSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FDMUIsR0FBRyxFQUNILEdBQUcsR0FBRyxDQUFDLEVBQ1AsSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUN6RDtZQUNELENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FDMUIsR0FBRyxFQUNILEdBQUcsR0FBRyxDQUFDLEVBQ1AsSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUN6RCxFQUNIO1lBQ0UsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDaEQ7UUFFRCxRQUFRO1FBQ1IsSUFDSSxJQUFJLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUMxQixHQUFHLEVBQ0gsR0FBRyxHQUFHLENBQUMsRUFDUCxJQUFJLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQ3pEO1lBQ0QsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUMxQixHQUFHLEVBQ0gsR0FBRyxHQUFHLENBQUMsRUFDUCxJQUFJLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQ3pELEVBQ0g7WUFDRSxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNoRDtRQUVELE1BQU07UUFDTixJQUNJLElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQzFCLEdBQUcsR0FBRyxDQUFDLEVBQ1AsR0FBRyxFQUNILElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FDekQ7WUFDRCxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQzFCLEdBQUcsR0FBRyxDQUFDLEVBQ1AsR0FBRyxFQUNILElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FDekQsRUFDSDtZQUNFLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ2hEO1FBRUQsT0FBTztRQUNQLElBQ0ksSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FDMUIsR0FBRyxHQUFHLENBQUMsRUFDUCxHQUFHLEVBQ0gsSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUN6RDtZQUNELENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FDMUIsR0FBRyxHQUFHLENBQUMsRUFDUCxHQUFHLEVBQ0gsSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUN6RCxFQUNIO1lBQ0UsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDaEQ7UUFFRCxZQUFZO1FBQ1osSUFDSSxJQUFJLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUMxQixHQUFHLEdBQUcsQ0FBQyxFQUNQLEdBQUcsR0FBRyxDQUFDLEVBQ1AsSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUN6RDtZQUNELENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FDMUIsR0FBRyxHQUFHLENBQUMsRUFDUCxHQUFHLEdBQUcsQ0FBQyxFQUNQLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FDekQsRUFDSDtZQUNFLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNwRDtRQUNELGFBQWE7UUFDYixJQUNJLElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQzFCLEdBQUcsR0FBRyxDQUFDLEVBQ1AsR0FBRyxHQUFHLENBQUMsRUFDUCxJQUFJLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQ3pEO1lBQ0QsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLGtCQUFrQixDQUMxQixHQUFHLEdBQUcsQ0FBQyxFQUNQLEdBQUcsR0FBRyxDQUFDLEVBQ1AsSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUN6RCxFQUNIO1lBQ0UsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3BEO1FBRUQsV0FBVztRQUNYLElBQ0ksSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FDMUIsR0FBRyxHQUFHLENBQUMsRUFDUCxHQUFHLEdBQUcsQ0FBQyxFQUNQLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FDekQ7WUFDRCxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsa0JBQWtCLENBQzFCLEdBQUcsR0FBRyxDQUFDLEVBQ1AsR0FBRyxHQUFHLENBQUMsRUFDUCxJQUFJLENBQUMsS0FBSyxLQUFLLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQ3pELEVBQ0g7WUFDRSxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDcEQ7UUFDRCxZQUFZO1FBQ1osSUFDSSxJQUFJLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUMxQixHQUFHLEdBQUcsQ0FBQyxFQUNQLEdBQUcsR0FBRyxDQUFDLEVBQ1AsSUFBSSxDQUFDLEtBQUssS0FBSyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUN6RDtZQUNELENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxrQkFBa0IsQ0FDMUIsR0FBRyxHQUFHLENBQUMsRUFDUCxHQUFHLEdBQUcsQ0FBQyxFQUNQLElBQUksQ0FBQyxLQUFLLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FDekQsRUFDSDtZQUNFLGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNwRDtRQUVELE9BQU8sY0FBYyxDQUFDO0lBQzFCLENBQUM7SUFFRCxnQkFBZ0I7UUFDWixNQUFNLGNBQWMsR0FBRyxFQUFFLENBQUM7UUFFMUIsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFDM0IsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUM7UUFFM0IsT0FBTztRQUNQLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDMUQsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUFHLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDaEQ7UUFFRCxRQUFRO1FBQ1IsSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUMxRCxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLEdBQUcsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNoRDtRQUVELE1BQU07UUFDTixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzFELGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQ2hEO1FBRUQsT0FBTztRQUNQLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDMUQsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDaEQ7UUFFRCxZQUFZO1FBQ1osSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDOUQsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3BEO1FBQ0QsYUFBYTtRQUNiLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQzlELGNBQWMsQ0FBQyxJQUFJLENBQUMsSUFBSSxLQUFLLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNwRDtRQUVELFdBQVc7UUFDWCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsbUJBQW1CLENBQUMsR0FBRyxHQUFHLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUM5RCxjQUFjLENBQUMsSUFBSSxDQUFDLElBQUksS0FBSyxDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDcEQ7UUFDRCxZQUFZO1FBQ1osSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLG1CQUFtQixDQUFDLEdBQUcsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUU7WUFDOUQsY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3BEO1FBRUQsT0FBTyxjQUFjLENBQUM7SUFDMUIsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUGllY2VDb25zdGFudCB9IGZyb20gJy4uLy4uL3V0aWxzL3VuaWNvZGUtY29uc3RhbnRzJztcclxuaW1wb3J0IHsgQm9hcmQgfSBmcm9tICcuLi9ib2FyZCc7XHJcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi9jb2xvcic7XHJcbmltcG9ydCB7IFBpZWNlIH0gZnJvbSAnLi9waWVjZSc7XHJcbmltcG9ydCB7IFBvaW50IH0gZnJvbSAnLi9wb2ludCc7XHJcbmltcG9ydCB7IFJvb2sgfSBmcm9tICcuL3Jvb2snO1xyXG5cclxuZXhwb3J0IGNsYXNzIEtpbmcgZXh0ZW5kcyBQaWVjZSB7XHJcbiAgICBjYXN0bGVkQWxyZWFkeSA9IGZhbHNlO1xyXG4gICAgc2hvcnRDYXN0bGVkID0gZmFsc2U7XHJcbiAgICBsb25nQ2FzdGxlZCA9IGZhbHNlO1xyXG4gICAgaXNNb3ZlZEFscmVhZHk7XHJcbiAgICBpc0Nhc3RsaW5nID0gZmFsc2U7XHJcblxyXG4gICAgY29uc3RydWN0b3IoXHJcbiAgICAgICAgcG9pbnQ6IFBvaW50LFxyXG4gICAgICAgIGNvbG9yOiBDb2xvcixcclxuICAgICAgICBjb25zdGFudDogUGllY2VDb25zdGFudCxcclxuICAgICAgICBib2FyZDogQm9hcmRcclxuICAgICkge1xyXG4gICAgICAgIHN1cGVyKHBvaW50LCBjb2xvciwgY29uc3RhbnQsIDAsIGJvYXJkKTtcclxuICAgIH1cclxuXHJcbiAgICBnZXRQb3NzaWJsZU1vdmVzKCk6IFBvaW50W10ge1xyXG4gICAgICAgIGNvbnN0IHBvc3NpYmxlUG9pbnRzID0gW107XHJcblxyXG4gICAgICAgIGNvbnN0IHJvdyA9IHRoaXMucG9pbnQucm93O1xyXG4gICAgICAgIGNvbnN0IGNvbCA9IHRoaXMucG9pbnQuY29sO1xyXG4gICAgICAgIC8vIGxld29cclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHRoaXMuYm9hcmQuaXNGaWVsZEVtcHR5KHJvdywgY29sIC0gMSkgJiZcclxuICAgICAgICAgICAgIXRoaXMuYm9hcmQuaXNGaWVsZFVuZGVyQXR0YWNrKFxyXG4gICAgICAgICAgICAgICAgcm93LFxyXG4gICAgICAgICAgICAgICAgY29sIC0gMSxcclxuICAgICAgICAgICAgICAgIHRoaXMuY29sb3IgPT09IENvbG9yLldISVRFID8gQ29sb3IuQkxBQ0sgOiBDb2xvci5XSElURVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHBvc3NpYmxlUG9pbnRzLnB1c2gobmV3IFBvaW50KHJvdywgY29sIC0gMSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gcHJhd29cclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHRoaXMuYm9hcmQuaXNGaWVsZEVtcHR5KHJvdywgY29sICsgMSkgJiZcclxuICAgICAgICAgICAgIXRoaXMuYm9hcmQuaXNGaWVsZFVuZGVyQXR0YWNrKFxyXG4gICAgICAgICAgICAgICAgcm93LFxyXG4gICAgICAgICAgICAgICAgY29sICsgMSxcclxuICAgICAgICAgICAgICAgIHRoaXMuY29sb3IgPT09IENvbG9yLldISVRFID8gQ29sb3IuQkxBQ0sgOiBDb2xvci5XSElURVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHBvc3NpYmxlUG9pbnRzLnB1c2gobmV3IFBvaW50KHJvdywgY29sICsgMSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZG9sXHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICB0aGlzLmJvYXJkLmlzRmllbGRFbXB0eShyb3cgKyAxLCBjb2wpICYmXHJcbiAgICAgICAgICAgICF0aGlzLmJvYXJkLmlzRmllbGRVbmRlckF0dGFjayhcclxuICAgICAgICAgICAgICAgIHJvdyArIDEsXHJcbiAgICAgICAgICAgICAgICBjb2wsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yID09PSBDb2xvci5XSElURSA/IENvbG9yLkJMQUNLIDogQ29sb3IuV0hJVEVcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBwb3NzaWJsZVBvaW50cy5wdXNoKG5ldyBQb2ludChyb3cgKyAxLCBjb2wpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGdvcmFcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHRoaXMuYm9hcmQuaXNGaWVsZEVtcHR5KHJvdyAtIDEsIGNvbCkgJiZcclxuICAgICAgICAgICAgIXRoaXMuYm9hcmQuaXNGaWVsZFVuZGVyQXR0YWNrKFxyXG4gICAgICAgICAgICAgICAgcm93IC0gMSxcclxuICAgICAgICAgICAgICAgIGNvbCxcclxuICAgICAgICAgICAgICAgIHRoaXMuY29sb3IgPT09IENvbG9yLldISVRFID8gQ29sb3IuQkxBQ0sgOiBDb2xvci5XSElURVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHBvc3NpYmxlUG9pbnRzLnB1c2gobmV3IFBvaW50KHJvdyAtIDEsIGNvbCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gbGV3byBnb3JhXHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICB0aGlzLmJvYXJkLmlzRmllbGRFbXB0eShyb3cgLSAxLCBjb2wgLSAxKSAmJlxyXG4gICAgICAgICAgICAhdGhpcy5ib2FyZC5pc0ZpZWxkVW5kZXJBdHRhY2soXHJcbiAgICAgICAgICAgICAgICByb3cgLSAxLFxyXG4gICAgICAgICAgICAgICAgY29sIC0gMSxcclxuICAgICAgICAgICAgICAgIHRoaXMuY29sb3IgPT09IENvbG9yLldISVRFID8gQ29sb3IuQkxBQ0sgOiBDb2xvci5XSElURVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHBvc3NpYmxlUG9pbnRzLnB1c2gobmV3IFBvaW50KHJvdyAtIDEsIGNvbCAtIDEpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gcHJhd28gZ29yYVxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgdGhpcy5ib2FyZC5pc0ZpZWxkRW1wdHkocm93IC0gMSwgY29sICsgMSkgJiZcclxuICAgICAgICAgICAgIXRoaXMuYm9hcmQuaXNGaWVsZFVuZGVyQXR0YWNrKFxyXG4gICAgICAgICAgICAgICAgcm93IC0gMSxcclxuICAgICAgICAgICAgICAgIGNvbCArIDEsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yID09PSBDb2xvci5XSElURSA/IENvbG9yLkJMQUNLIDogQ29sb3IuV0hJVEVcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBwb3NzaWJsZVBvaW50cy5wdXNoKG5ldyBQb2ludChyb3cgLSAxLCBjb2wgKyAxKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBsZXdvIGRvbFxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgdGhpcy5ib2FyZC5pc0ZpZWxkRW1wdHkocm93ICsgMSwgY29sIC0gMSkgJiZcclxuICAgICAgICAgICAgIXRoaXMuYm9hcmQuaXNGaWVsZFVuZGVyQXR0YWNrKFxyXG4gICAgICAgICAgICAgICAgcm93ICsgMSxcclxuICAgICAgICAgICAgICAgIGNvbCAtIDEsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yID09PSBDb2xvci5XSElURSA/IENvbG9yLkJMQUNLIDogQ29sb3IuV0hJVEVcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBwb3NzaWJsZVBvaW50cy5wdXNoKG5ldyBQb2ludChyb3cgKyAxLCBjb2wgLSAxKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIC8vIHByYXdvIGRvbFxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgdGhpcy5ib2FyZC5pc0ZpZWxkRW1wdHkocm93ICsgMSwgY29sICsgMSkgJiZcclxuICAgICAgICAgICAgIXRoaXMuYm9hcmQuaXNGaWVsZFVuZGVyQXR0YWNrKFxyXG4gICAgICAgICAgICAgICAgcm93ICsgMSxcclxuICAgICAgICAgICAgICAgIGNvbCArIDEsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yID09PSBDb2xvci5XSElURSA/IENvbG9yLkJMQUNLIDogQ29sb3IuV0hJVEVcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBwb3NzaWJsZVBvaW50cy5wdXNoKG5ldyBQb2ludChyb3cgKyAxLCBjb2wgKyAxKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXRoaXMuaXNNb3ZlZEFscmVhZHkpIHtcclxuICAgICAgICAgICAgbGV0IGxvbmdDYXN0bGVQb3NzaWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSBjb2wgLSAxOyBpID4gMDsgLS1pKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgICAgICAgICAgIXRoaXMuYm9hcmQuaXNGaWVsZEVtcHR5KHJvdywgaSkgfHxcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmJvYXJkLmlzRmllbGRVbmRlckF0dGFjayhcclxuICAgICAgICAgICAgICAgICAgICAgICAgcm93LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbG9yID09PSBDb2xvci5XSElURSA/IENvbG9yLkJMQUNLIDogQ29sb3IuV0hJVEVcclxuICAgICAgICAgICAgICAgICAgICApXHJcbiAgICAgICAgICAgICAgICApIHtcclxuICAgICAgICAgICAgICAgICAgICBsb25nQ2FzdGxlUG9zc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKGxvbmdDYXN0bGVQb3NzaWJsZSAmJiAhdGhpcy5ib2FyZC5pc0tpbmdJbkNoZWNrKHRoaXMuY29sb3IsIHRoaXMuYm9hcmQucGllY2VzKSAmJiB0aGlzLmJvYXJkLmdldFBpZWNlQnlGaWVsZChyb3csIDApKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBsZWZ0Um9vayA9IHRoaXMuYm9hcmQuZ2V0UGllY2VCeUZpZWxkKHJvdywgMCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobGVmdFJvb2sgaW5zdGFuY2VvZiBSb29rKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFsZWZ0Um9vay5pc01vdmVkQWxyZWFkeSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NzaWJsZVBvaW50cy5wdXNoKG5ldyBQb2ludChyb3csIGNvbCAtIDIpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGxldCBzaG9ydENhc3RsZVBvc3NpYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IGNvbCArIDE7IGkgPCA3OyArK2kpIHtcclxuICAgICAgICAgICAgICAgIGlmIChcclxuICAgICAgICAgICAgICAgICAgICAhdGhpcy5ib2FyZC5pc0ZpZWxkRW1wdHkocm93LCBpKSB8fFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYm9hcmQuaXNGaWVsZFVuZGVyQXR0YWNrKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByb3csXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY29sb3IgPT09IENvbG9yLldISVRFID8gQ29sb3IuQkxBQ0sgOiBDb2xvci5XSElURVxyXG4gICAgICAgICAgICAgICAgICAgIClcclxuICAgICAgICAgICAgICAgICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNob3J0Q2FzdGxlUG9zc2libGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHNob3J0Q2FzdGxlUG9zc2libGUgJiYgIXRoaXMuYm9hcmQuaXNLaW5nSW5DaGVjayh0aGlzLmNvbG9yLCB0aGlzLmJvYXJkLnBpZWNlcykgJiYgdGhpcy5ib2FyZC5nZXRQaWVjZUJ5RmllbGQocm93LCA3KSkge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgcmlnaHRSb29rID0gdGhpcy5ib2FyZC5nZXRQaWVjZUJ5RmllbGQocm93LCA3KTtcclxuICAgICAgICAgICAgICAgIGlmIChyaWdodFJvb2sgaW5zdGFuY2VvZiBSb29rKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFyaWdodFJvb2suaXNNb3ZlZEFscmVhZHkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zc2libGVQb2ludHMucHVzaChuZXcgUG9pbnQocm93LCBjb2wgKyAyKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcG9zc2libGVQb2ludHM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0UG9zc2libGVDYXB0dXJlcygpOiBQb2ludFtdIHtcclxuICAgICAgICBjb25zdCBwb3NzaWJsZVBvaW50cyA9IFtdO1xyXG5cclxuICAgICAgICBjb25zdCByb3cgPSB0aGlzLnBvaW50LnJvdztcclxuICAgICAgICBjb25zdCBjb2wgPSB0aGlzLnBvaW50LmNvbDtcclxuXHJcbiAgICAgICAgLy8gbGV3b1xyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgdGhpcy5ib2FyZC5pc0ZpZWxkVGFrZW5CeUVuZW15KFxyXG4gICAgICAgICAgICAgICAgcm93LFxyXG4gICAgICAgICAgICAgICAgY29sIC0gMSxcclxuICAgICAgICAgICAgICAgIHRoaXMuY29sb3IgPT09IENvbG9yLldISVRFID8gQ29sb3IuQkxBQ0sgOiBDb2xvci5XSElURVxyXG4gICAgICAgICAgICApICYmXHJcbiAgICAgICAgICAgICF0aGlzLmJvYXJkLmlzRmllbGRVbmRlckF0dGFjayhcclxuICAgICAgICAgICAgICAgIHJvdyxcclxuICAgICAgICAgICAgICAgIGNvbCAtIDEsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yID09PSBDb2xvci5XSElURSA/IENvbG9yLkJMQUNLIDogQ29sb3IuV0hJVEVcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBwb3NzaWJsZVBvaW50cy5wdXNoKG5ldyBQb2ludChyb3csIGNvbCAtIDEpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHByYXdvXHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICB0aGlzLmJvYXJkLmlzRmllbGRUYWtlbkJ5RW5lbXkoXHJcbiAgICAgICAgICAgICAgICByb3csXHJcbiAgICAgICAgICAgICAgICBjb2wgKyAxLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5jb2xvciA9PT0gQ29sb3IuV0hJVEUgPyBDb2xvci5CTEFDSyA6IENvbG9yLldISVRFXHJcbiAgICAgICAgICAgICkgJiZcclxuICAgICAgICAgICAgIXRoaXMuYm9hcmQuaXNGaWVsZFVuZGVyQXR0YWNrKFxyXG4gICAgICAgICAgICAgICAgcm93LFxyXG4gICAgICAgICAgICAgICAgY29sICsgMSxcclxuICAgICAgICAgICAgICAgIHRoaXMuY29sb3IgPT09IENvbG9yLldISVRFID8gQ29sb3IuQkxBQ0sgOiBDb2xvci5XSElURVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHBvc3NpYmxlUG9pbnRzLnB1c2gobmV3IFBvaW50KHJvdywgY29sICsgMSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZG9sXHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICB0aGlzLmJvYXJkLmlzRmllbGRUYWtlbkJ5RW5lbXkoXHJcbiAgICAgICAgICAgICAgICByb3cgKyAxLFxyXG4gICAgICAgICAgICAgICAgY29sLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5jb2xvciA9PT0gQ29sb3IuV0hJVEUgPyBDb2xvci5CTEFDSyA6IENvbG9yLldISVRFXHJcbiAgICAgICAgICAgICkgJiZcclxuICAgICAgICAgICAgIXRoaXMuYm9hcmQuaXNGaWVsZFVuZGVyQXR0YWNrKFxyXG4gICAgICAgICAgICAgICAgcm93ICsgMSxcclxuICAgICAgICAgICAgICAgIGNvbCxcclxuICAgICAgICAgICAgICAgIHRoaXMuY29sb3IgPT09IENvbG9yLldISVRFID8gQ29sb3IuQkxBQ0sgOiBDb2xvci5XSElURVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHBvc3NpYmxlUG9pbnRzLnB1c2gobmV3IFBvaW50KHJvdyArIDEsIGNvbCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZ29yYVxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgdGhpcy5ib2FyZC5pc0ZpZWxkVGFrZW5CeUVuZW15KFxyXG4gICAgICAgICAgICAgICAgcm93IC0gMSxcclxuICAgICAgICAgICAgICAgIGNvbCxcclxuICAgICAgICAgICAgICAgIHRoaXMuY29sb3IgPT09IENvbG9yLldISVRFID8gQ29sb3IuQkxBQ0sgOiBDb2xvci5XSElURVxyXG4gICAgICAgICAgICApICYmXHJcbiAgICAgICAgICAgICF0aGlzLmJvYXJkLmlzRmllbGRVbmRlckF0dGFjayhcclxuICAgICAgICAgICAgICAgIHJvdyAtIDEsXHJcbiAgICAgICAgICAgICAgICBjb2wsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yID09PSBDb2xvci5XSElURSA/IENvbG9yLkJMQUNLIDogQ29sb3IuV0hJVEVcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBwb3NzaWJsZVBvaW50cy5wdXNoKG5ldyBQb2ludChyb3cgLSAxLCBjb2wpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGxld28gZ29yYVxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgdGhpcy5ib2FyZC5pc0ZpZWxkVGFrZW5CeUVuZW15KFxyXG4gICAgICAgICAgICAgICAgcm93IC0gMSxcclxuICAgICAgICAgICAgICAgIGNvbCAtIDEsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yID09PSBDb2xvci5XSElURSA/IENvbG9yLkJMQUNLIDogQ29sb3IuV0hJVEVcclxuICAgICAgICAgICAgKSAmJlxyXG4gICAgICAgICAgICAhdGhpcy5ib2FyZC5pc0ZpZWxkVW5kZXJBdHRhY2soXHJcbiAgICAgICAgICAgICAgICByb3cgLSAxLFxyXG4gICAgICAgICAgICAgICAgY29sIC0gMSxcclxuICAgICAgICAgICAgICAgIHRoaXMuY29sb3IgPT09IENvbG9yLldISVRFID8gQ29sb3IuQkxBQ0sgOiBDb2xvci5XSElURVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHBvc3NpYmxlUG9pbnRzLnB1c2gobmV3IFBvaW50KHJvdyAtIDEsIGNvbCAtIDEpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gcHJhd28gZ29yYVxyXG4gICAgICAgIGlmIChcclxuICAgICAgICAgICAgdGhpcy5ib2FyZC5pc0ZpZWxkVGFrZW5CeUVuZW15KFxyXG4gICAgICAgICAgICAgICAgcm93IC0gMSxcclxuICAgICAgICAgICAgICAgIGNvbCArIDEsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yID09PSBDb2xvci5XSElURSA/IENvbG9yLkJMQUNLIDogQ29sb3IuV0hJVEVcclxuICAgICAgICAgICAgKSAmJlxyXG4gICAgICAgICAgICAhdGhpcy5ib2FyZC5pc0ZpZWxkVW5kZXJBdHRhY2soXHJcbiAgICAgICAgICAgICAgICByb3cgLSAxLFxyXG4gICAgICAgICAgICAgICAgY29sICsgMSxcclxuICAgICAgICAgICAgICAgIHRoaXMuY29sb3IgPT09IENvbG9yLldISVRFID8gQ29sb3IuQkxBQ0sgOiBDb2xvci5XSElURVxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICAgIHBvc3NpYmxlUG9pbnRzLnB1c2gobmV3IFBvaW50KHJvdyAtIDEsIGNvbCArIDEpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGxld28gZG9sXHJcbiAgICAgICAgaWYgKFxyXG4gICAgICAgICAgICB0aGlzLmJvYXJkLmlzRmllbGRUYWtlbkJ5RW5lbXkoXHJcbiAgICAgICAgICAgICAgICByb3cgKyAxLFxyXG4gICAgICAgICAgICAgICAgY29sIC0gMSxcclxuICAgICAgICAgICAgICAgIHRoaXMuY29sb3IgPT09IENvbG9yLldISVRFID8gQ29sb3IuQkxBQ0sgOiBDb2xvci5XSElURVxyXG4gICAgICAgICAgICApICYmXHJcbiAgICAgICAgICAgICF0aGlzLmJvYXJkLmlzRmllbGRVbmRlckF0dGFjayhcclxuICAgICAgICAgICAgICAgIHJvdyArIDEsXHJcbiAgICAgICAgICAgICAgICBjb2wgLSAxLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5jb2xvciA9PT0gQ29sb3IuV0hJVEUgPyBDb2xvci5CTEFDSyA6IENvbG9yLldISVRFXHJcbiAgICAgICAgICAgIClcclxuICAgICAgICApIHtcclxuICAgICAgICAgICAgcG9zc2libGVQb2ludHMucHVzaChuZXcgUG9pbnQocm93ICsgMSwgY29sIC0gMSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBwcmF3byBkb2xcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICAgIHRoaXMuYm9hcmQuaXNGaWVsZFRha2VuQnlFbmVteShcclxuICAgICAgICAgICAgICAgIHJvdyArIDEsXHJcbiAgICAgICAgICAgICAgICBjb2wgKyAxLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5jb2xvciA9PT0gQ29sb3IuV0hJVEUgPyBDb2xvci5CTEFDSyA6IENvbG9yLldISVRFXHJcbiAgICAgICAgICAgICkgJiZcclxuICAgICAgICAgICAgIXRoaXMuYm9hcmQuaXNGaWVsZFVuZGVyQXR0YWNrKFxyXG4gICAgICAgICAgICAgICAgcm93ICsgMSxcclxuICAgICAgICAgICAgICAgIGNvbCArIDEsXHJcbiAgICAgICAgICAgICAgICB0aGlzLmNvbG9yID09PSBDb2xvci5XSElURSA/IENvbG9yLkJMQUNLIDogQ29sb3IuV0hJVEVcclxuICAgICAgICAgICAgKVxyXG4gICAgICAgICkge1xyXG4gICAgICAgICAgICBwb3NzaWJsZVBvaW50cy5wdXNoKG5ldyBQb2ludChyb3cgKyAxLCBjb2wgKyAxKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcG9zc2libGVQb2ludHM7XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0Q292ZXJlZEZpZWxkcygpOiBQb2ludFtdIHtcclxuICAgICAgICBjb25zdCBwb3NzaWJsZVBvaW50cyA9IFtdO1xyXG5cclxuICAgICAgICBjb25zdCByb3cgPSB0aGlzLnBvaW50LnJvdztcclxuICAgICAgICBjb25zdCBjb2wgPSB0aGlzLnBvaW50LmNvbDtcclxuXHJcbiAgICAgICAgLy8gbGV3b1xyXG4gICAgICAgIGlmICh0aGlzLmJvYXJkLmlzRmllbGRUYWtlbkJ5RW5lbXkocm93LCBjb2wgLSAxLCB0aGlzLmNvbG9yKSkge1xyXG4gICAgICAgICAgICBwb3NzaWJsZVBvaW50cy5wdXNoKG5ldyBQb2ludChyb3csIGNvbCAtIDEpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIHByYXdvXHJcbiAgICAgICAgaWYgKHRoaXMuYm9hcmQuaXNGaWVsZFRha2VuQnlFbmVteShyb3csIGNvbCArIDEsIHRoaXMuY29sb3IpKSB7XHJcbiAgICAgICAgICAgIHBvc3NpYmxlUG9pbnRzLnB1c2gobmV3IFBvaW50KHJvdywgY29sICsgMSkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZG9sXHJcbiAgICAgICAgaWYgKHRoaXMuYm9hcmQuaXNGaWVsZFRha2VuQnlFbmVteShyb3cgKyAxLCBjb2wsIHRoaXMuY29sb3IpKSB7XHJcbiAgICAgICAgICAgIHBvc3NpYmxlUG9pbnRzLnB1c2gobmV3IFBvaW50KHJvdyArIDEsIGNvbCkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgLy8gZ29yYVxyXG4gICAgICAgIGlmICh0aGlzLmJvYXJkLmlzRmllbGRUYWtlbkJ5RW5lbXkocm93IC0gMSwgY29sLCB0aGlzLmNvbG9yKSkge1xyXG4gICAgICAgICAgICBwb3NzaWJsZVBvaW50cy5wdXNoKG5ldyBQb2ludChyb3cgLSAxLCBjb2wpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIC8vIGxld28gZ29yYVxyXG4gICAgICAgIGlmICh0aGlzLmJvYXJkLmlzRmllbGRUYWtlbkJ5RW5lbXkocm93IC0gMSwgY29sIC0gMSwgdGhpcy5jb2xvcikpIHtcclxuICAgICAgICAgICAgcG9zc2libGVQb2ludHMucHVzaChuZXcgUG9pbnQocm93IC0gMSwgY29sIC0gMSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBwcmF3byBnb3JhXHJcbiAgICAgICAgaWYgKHRoaXMuYm9hcmQuaXNGaWVsZFRha2VuQnlFbmVteShyb3cgLSAxLCBjb2wgKyAxLCB0aGlzLmNvbG9yKSkge1xyXG4gICAgICAgICAgICBwb3NzaWJsZVBvaW50cy5wdXNoKG5ldyBQb2ludChyb3cgLSAxLCBjb2wgKyAxKSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBsZXdvIGRvbFxyXG4gICAgICAgIGlmICh0aGlzLmJvYXJkLmlzRmllbGRUYWtlbkJ5RW5lbXkocm93ICsgMSwgY29sIC0gMSwgdGhpcy5jb2xvcikpIHtcclxuICAgICAgICAgICAgcG9zc2libGVQb2ludHMucHVzaChuZXcgUG9pbnQocm93ICsgMSwgY29sIC0gMSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICAvLyBwcmF3byBkb2xcclxuICAgICAgICBpZiAodGhpcy5ib2FyZC5pc0ZpZWxkVGFrZW5CeUVuZW15KHJvdyArIDEsIGNvbCArIDEsIHRoaXMuY29sb3IpKSB7XHJcbiAgICAgICAgICAgIHBvc3NpYmxlUG9pbnRzLnB1c2gobmV3IFBvaW50KHJvdyArIDEsIGNvbCArIDEpKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBwb3NzaWJsZVBvaW50cztcclxuICAgIH1cclxufVxyXG4iXX0=