import { BehaviorSubject } from 'rxjs';
export class MoveStateProvider {
    constructor() {
        this.statesSubject$ = new BehaviorSubject([]);
    }
    get states() {
        return this.statesSubject$.value;
    }
    set states(states) {
        this.statesSubject$.next(states);
    }
    addMove(state) {
        this.states = [...this.states, state];
    }
    getStates() {
        return this.states;
    }
    pop() {
        const lastState = this.getLastState();
        this.states = this.states.filter((state) => state !== lastState);
        return lastState;
    }
    isEmpty() {
        return this.states.length === 0;
    }
    clear() {
        this.states = [];
    }
    getLastState() {
        return this.states[this.getLastStateIndex()];
    }
    getLastStateIndex() {
        return this.states.length - 1;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW92ZS1zdGF0ZS1wcm92aWRlci5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9Lb21wdXRlci9EZXNrdG9wL05vd3kgZm9sZGVyL2NoZXNzLWJvYXJkL3Byb2plY3RzL25neC1jaGVzcy1ib2FyZC9zcmMvIiwic291cmNlcyI6WyJsaWIvZW5naW5lL2JvYXJkLXN0YXRlLXByb3ZpZGVyL21vdmUtc3RhdGUtcHJvdmlkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLGVBQWUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUd2QyxNQUFNLE9BQU8saUJBQWlCO0lBQTlCO1FBQ0ksbUJBQWMsR0FBRyxJQUFJLGVBQWUsQ0FBZSxFQUFFLENBQUMsQ0FBQztJQXVDM0QsQ0FBQztJQXJDRyxJQUFJLE1BQU07UUFDTixPQUFPLElBQUksQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDO0lBQ3JDLENBQUM7SUFFRCxJQUFJLE1BQU0sQ0FBQyxNQUFvQjtRQUMzQixJQUFJLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNyQyxDQUFDO0lBRUQsT0FBTyxDQUFDLEtBQWlCO1FBQ3JCLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDMUMsQ0FBQztJQUVELFNBQVM7UUFDTCxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUM7SUFDdkIsQ0FBQztJQUVELEdBQUc7UUFDQyxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsWUFBWSxFQUFFLENBQUM7UUFDdEMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsS0FBSyxLQUFLLFNBQVMsQ0FBQyxDQUFDO1FBQ2pFLE9BQU8sU0FBUyxDQUFDO0lBQ3JCLENBQUM7SUFFRCxPQUFPO1FBQ0gsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sS0FBSyxDQUFDLENBQUM7SUFDcEMsQ0FBQztJQUVELEtBQUs7UUFDRCxJQUFJLENBQUMsTUFBTSxHQUFHLEVBQUUsQ0FBQztJQUNyQixDQUFDO0lBRUQsWUFBWTtRQUNSLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFRCxpQkFBaUI7UUFDYixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQztJQUNsQyxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCZWhhdmlvclN1YmplY3QgfSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHsgQm9hcmRTdGF0ZSB9IGZyb20gJy4vYm9hcmQtc3RhdGUnO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1vdmVTdGF0ZVByb3ZpZGVyIHtcclxuICAgIHN0YXRlc1N1YmplY3QkID0gbmV3IEJlaGF2aW9yU3ViamVjdDxCb2FyZFN0YXRlW10+KFtdKTtcclxuXHJcbiAgICBnZXQgc3RhdGVzKCk6IEJvYXJkU3RhdGVbXSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGVzU3ViamVjdCQudmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgc2V0IHN0YXRlcyhzdGF0ZXM6IEJvYXJkU3RhdGVbXSkge1xyXG4gICAgICAgIHRoaXMuc3RhdGVzU3ViamVjdCQubmV4dChzdGF0ZXMpO1xyXG4gICAgfVxyXG5cclxuICAgIGFkZE1vdmUoc3RhdGU6IEJvYXJkU3RhdGUpIHtcclxuICAgICAgICB0aGlzLnN0YXRlcyA9IFsuLi50aGlzLnN0YXRlcywgc3RhdGVdO1xyXG4gICAgfVxyXG5cclxuICAgIGdldFN0YXRlcygpOiBCb2FyZFN0YXRlW10ge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlcztcclxuICAgIH1cclxuXHJcbiAgICBwb3AoKTogQm9hcmRTdGF0ZSB7XHJcbiAgICAgICAgY29uc3QgbGFzdFN0YXRlID0gdGhpcy5nZXRMYXN0U3RhdGUoKTtcclxuICAgICAgICB0aGlzLnN0YXRlcyA9IHRoaXMuc3RhdGVzLmZpbHRlcigoc3RhdGUpID0+IHN0YXRlICE9PSBsYXN0U3RhdGUpO1xyXG4gICAgICAgIHJldHVybiBsYXN0U3RhdGU7XHJcbiAgICB9XHJcblxyXG4gICAgaXNFbXB0eSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zdGF0ZXMubGVuZ3RoID09PSAwO1xyXG4gICAgfVxyXG5cclxuICAgIGNsZWFyKCkge1xyXG4gICAgICAgIHRoaXMuc3RhdGVzID0gW107XHJcbiAgICB9XHJcblxyXG4gICAgZ2V0TGFzdFN0YXRlKCkge1xyXG4gICAgICAgIHJldHVybiB0aGlzLnN0YXRlc1t0aGlzLmdldExhc3RTdGF0ZUluZGV4KCldO1xyXG4gICAgfVxyXG5cclxuICAgIGdldExhc3RTdGF0ZUluZGV4KCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuc3RhdGVzLmxlbmd0aCAtIDE7XHJcbiAgICB9XHJcbn1cclxuIl19