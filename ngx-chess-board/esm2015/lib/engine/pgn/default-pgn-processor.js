import { King } from '../../models/pieces/king';
import { Pawn } from '../../models/pieces/pawn';
import { MoveUtils } from '../../utils/move-utils';
import { AbstractPgnProcessor } from './abstract-pgn-processor';
export class DefaultPgnProcessor extends AbstractPgnProcessor {
    process(board, sourcePiece, destPoint, destPiece) {
        this.currentIndex += 0.5;
        this.pgn += (this.currentIndex % Math.floor(this.currentIndex) === 0) ? (' ' + this.currentIndex + '. ') : ' ';
        let possibleCaptures = [];
        let possibleMoves = [];
        if (destPiece) {
            possibleCaptures = MoveUtils.findPieceByPossibleCapturesContaining(MoveUtils.formatSingle(destPoint, board.reverted), board, sourcePiece.color).filter(piece => piece.constructor.name === sourcePiece.constructor.name);
        }
        possibleMoves = MoveUtils.findPieceByPossibleMovesContaining(MoveUtils.formatSingle(destPoint, board.reverted), board, sourcePiece.color).filter(piece => piece.constructor.name === sourcePiece.constructor.name);
        if (sourcePiece instanceof Pawn && !destPiece && possibleCaptures.length === 0) {
            this.pgn += MoveUtils.formatSingle(destPoint, board.reverted);
        }
        else {
            if (sourcePiece instanceof Pawn && destPiece) {
                this.pgn += MoveUtils.formatSingle(sourcePiece.point, board.reverted).substring(0, 1) + 'x' + MoveUtils.formatSingle(destPoint, board.reverted);
            }
            else {
                if (sourcePiece instanceof King && (Math.abs(sourcePiece.point.col - destPoint.col) === 2)) {
                    if (board.reverted) {
                        this.pgn += destPoint.col < 2
                            ? 'O-O'
                            : 'O-O-O';
                    }
                    else {
                        this.pgn += destPoint.col < 3
                            ? 'O-O-O'
                            : 'O-O';
                    }
                }
                else {
                    if (!(sourcePiece instanceof Pawn) && possibleCaptures.length === 0 && possibleMoves.length < 2) { // Nf3
                        this.pgn += MoveUtils.getFirstLetterPiece(sourcePiece) + MoveUtils.formatSingle(destPoint, board.reverted);
                    }
                    else {
                        if (possibleMoves && possibleMoves.length === 2 && possibleCaptures.length === 0) { // Nbd7
                            if (this.isEqualByCol(possibleMoves[0], possibleMoves[1])) {
                                this.pgn += MoveUtils.getFirstLetterPiece(sourcePiece) + MoveUtils.reverse(board, sourcePiece.point.row) + MoveUtils.formatSingle(destPoint, board.reverted);
                            }
                            else {
                                this.pgn += MoveUtils.getFirstLetterPiece(sourcePiece) + MoveUtils.formatCol(board, sourcePiece.point.col) + MoveUtils.formatSingle(destPoint, board.reverted);
                            }
                        }
                        else {
                            if (possibleCaptures.length > 1) {
                                if ((this.isEqualByCol(possibleCaptures[0], possibleCaptures[1]))) {
                                    this.pgn += MoveUtils.getFirstLetterPiece(sourcePiece) + MoveUtils.reverse(board, sourcePiece.point.row) + 'x' + MoveUtils.formatSingle(destPoint, board.reverted);
                                }
                                else {
                                    this.pgn += MoveUtils.getFirstLetterPiece(sourcePiece) + MoveUtils.formatCol(board, sourcePiece.point.col) + 'x' + MoveUtils.formatSingle(destPoint, board.reverted);
                                }
                            }
                            else {
                                this.pgn += MoveUtils.getFirstLetterPiece(sourcePiece) + 'x' + MoveUtils.formatSingle(destPoint, board.reverted);
                            }
                        }
                    }
                }
            }
        }
        this.pgn = this.pgn.trim();
    }
    resolvePieceByFirstChar(move, piece) {
        return MoveUtils.getFirstLetterPiece(piece) === move;
    }
    isEqualByCol(aPiece, bPiece) {
        return aPiece.point.col === bPiece.point.col;
    }
}
//# sourceMappingURL=data:application/json;base64,