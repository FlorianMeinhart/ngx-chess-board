import { HistoryMoveProvider } from '../history-move-provider/history-move-provider';
import { King } from '../models/pieces/king';
import { Pawn } from '../models/pieces/pawn';
import { Rook } from '../models/pieces/rook';
import { Constants } from '../utils/constants';
import { PieceIconInputManager } from '../utils/inputs/piece-icon-input-manager';
import { CoordsProvider } from './coords/coords-provider';
import { DragEndStrategy } from './drag/end/drag-end-strategy';
import { DragStartStrategy } from './drag/start/drag-start-strategy';
import { ColorStrategy } from './drawing-tools/colors/color-strategy';
import { DrawProvider } from './drawing-tools/draw-provider';
export class AbstractEngineFacade {
    constructor(board) {
        this.dragStartStrategy = new DragStartStrategy();
        this.dragEndStrategy = new DragEndStrategy();
        this.colorStrategy = new ColorStrategy();
        this.coords = new CoordsProvider();
        this.heightAndWidth = Constants.DEFAULT_SIZE;
        this.freeMode = false;
        this.drawProvider = new DrawProvider();
        this.pieceIconManager = new PieceIconInputManager();
        this.moveHistoryProvider = new HistoryMoveProvider();
        this.board = board;
    }
    checkIfPawnFirstMove(piece) {
        if (piece instanceof Pawn) {
            piece.isMovedAlready = true;
        }
    }
    checkIfRookMoved(piece) {
        if (piece instanceof Rook) {
            piece.isMovedAlready = true;
        }
    }
    checkIfKingMoved(piece) {
        if (piece instanceof King) {
            piece.isMovedAlready = true;
        }
    }
    getMoveHistory() {
        return this.moveHistoryProvider.getAll();
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYWJzdHJhY3QtZW5naW5lLWZhY2FkZS5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9Lb21wdXRlci9EZXNrdG9wL05vd3kgZm9sZGVyL2NoZXNzLWJvYXJkL3Byb2plY3RzL25neC1jaGVzcy1ib2FyZC9zcmMvIiwic291cmNlcyI6WyJsaWIvZW5naW5lL2Fic3RyYWN0LWVuZ2luZS1mYWNhZGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sZ0RBQWdELENBQUM7QUFFckYsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzdDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSx1QkFBdUIsQ0FBQztBQUc3QyxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDN0MsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBQy9DLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBR2pGLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sOEJBQThCLENBQUM7QUFDL0QsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sa0NBQWtDLENBQUM7QUFDckUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLHVDQUF1QyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUU3RCxNQUFNLE9BQWdCLG9CQUFvQjtJQXFCdEMsWUFBc0IsS0FBWTtRQW5CM0Isc0JBQWlCLEdBQXNCLElBQUksaUJBQWlCLEVBQUUsQ0FBQztRQUMvRCxvQkFBZSxHQUFvQixJQUFJLGVBQWUsRUFBRSxDQUFDO1FBQ3RELGtCQUFhLEdBQWtCLElBQUksYUFBYSxFQUFFLENBQUM7UUFFdEQsV0FBTSxHQUFtQixJQUFJLGNBQWMsRUFBRSxDQUFDO1FBQzlDLG1CQUFjLEdBQVcsU0FBUyxDQUFDLFlBQVksQ0FBQztRQUVoRCxhQUFRLEdBQUcsS0FBSyxDQUFDO1FBUWpCLGlCQUFZLEdBQWlCLElBQUksWUFBWSxFQUFFLENBQUM7UUFDaEQscUJBQWdCLEdBQTBCLElBQUkscUJBQXFCLEVBQUUsQ0FBQztRQUN0RSx3QkFBbUIsR0FBd0IsSUFBSSxtQkFBbUIsRUFBRSxDQUFDO1FBR3hFLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO0lBQ3ZCLENBQUM7SUE0Qk0sb0JBQW9CLENBQUMsS0FBWTtRQUNwQyxJQUFJLEtBQUssWUFBWSxJQUFJLEVBQUU7WUFDdkIsS0FBSyxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7U0FDL0I7SUFDTCxDQUFDO0lBRU0sZ0JBQWdCLENBQUMsS0FBWTtRQUNoQyxJQUFJLEtBQUssWUFBWSxJQUFJLEVBQUU7WUFDdkIsS0FBSyxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7U0FDL0I7SUFDTCxDQUFDO0lBRU0sZ0JBQWdCLENBQUMsS0FBWTtRQUNoQyxJQUFJLEtBQUssWUFBWSxJQUFJLEVBQUU7WUFDdkIsS0FBSyxDQUFDLGNBQWMsR0FBRyxJQUFJLENBQUM7U0FDL0I7SUFDTCxDQUFDO0lBRU0sY0FBYztRQUNqQixPQUFPLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLEVBQUUsQ0FBQztJQUM3QyxDQUFDO0NBRUoiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQaWVjZVByb21vdGlvbk1vZGFsQ29tcG9uZW50IH0gZnJvbSAnLi4vcGllY2UtcHJvbW90aW9uL3BpZWNlLXByb21vdGlvbi1tb2RhbC9waWVjZS1wcm9tb3Rpb24tbW9kYWwuY29tcG9uZW50JztcbmltcG9ydCB7IEhpc3RvcnlNb3ZlIH0gZnJvbSAnLi4vaGlzdG9yeS1tb3ZlLXByb3ZpZGVyL2hpc3RvcnktbW92ZSc7XG5pbXBvcnQgeyBIaXN0b3J5TW92ZVByb3ZpZGVyIH0gZnJvbSAnLi4vaGlzdG9yeS1tb3ZlLXByb3ZpZGVyL2hpc3RvcnktbW92ZS1wcm92aWRlcic7XG5pbXBvcnQgeyBCb2FyZCB9IGZyb20gJy4uL21vZGVscy9ib2FyZCc7XG5pbXBvcnQgeyBLaW5nIH0gZnJvbSAnLi4vbW9kZWxzL3BpZWNlcy9raW5nJztcbmltcG9ydCB7IFBhd24gfSBmcm9tICcuLi9tb2RlbHMvcGllY2VzL3Bhd24nO1xuaW1wb3J0IHsgUGllY2UgfSBmcm9tICcuLi9tb2RlbHMvcGllY2VzL3BpZWNlJztcbmltcG9ydCB7IFBvaW50IH0gZnJvbSAnLi4vbW9kZWxzL3BpZWNlcy9wb2ludCc7XG5pbXBvcnQgeyBSb29rIH0gZnJvbSAnLi4vbW9kZWxzL3BpZWNlcy9yb29rJztcbmltcG9ydCB7IENvbnN0YW50cyB9IGZyb20gJy4uL3V0aWxzL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBQaWVjZUljb25JbnB1dE1hbmFnZXIgfSBmcm9tICcuLi91dGlscy9pbnB1dHMvcGllY2UtaWNvbi1pbnB1dC1tYW5hZ2VyJztcbmltcG9ydCB7IENvbG9ySW5wdXQsIFBpZWNlVHlwZUlucHV0IH0gZnJvbSAnLi4vdXRpbHMvaW5wdXRzL3BpZWNlLXR5cGUtaW5wdXQnO1xuaW1wb3J0IHsgQm9hcmRMb2FkZXIgfSBmcm9tICcuL2JvYXJkLXN0YXRlLXByb3ZpZGVyL2JvYXJkLWxvYWRlci9ib2FyZC1sb2FkZXInO1xuaW1wb3J0IHsgQ29vcmRzUHJvdmlkZXIgfSBmcm9tICcuL2Nvb3Jkcy9jb29yZHMtcHJvdmlkZXInO1xuaW1wb3J0IHsgRHJhZ0VuZFN0cmF0ZWd5IH0gZnJvbSAnLi9kcmFnL2VuZC9kcmFnLWVuZC1zdHJhdGVneSc7XG5pbXBvcnQgeyBEcmFnU3RhcnRTdHJhdGVneSB9IGZyb20gJy4vZHJhZy9zdGFydC9kcmFnLXN0YXJ0LXN0cmF0ZWd5JztcbmltcG9ydCB7IENvbG9yU3RyYXRlZ3kgfSBmcm9tICcuL2RyYXdpbmctdG9vbHMvY29sb3JzL2NvbG9yLXN0cmF0ZWd5JztcbmltcG9ydCB7IERyYXdQcm92aWRlciB9IGZyb20gJy4vZHJhd2luZy10b29scy9kcmF3LXByb3ZpZGVyJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEFic3RyYWN0RW5naW5lRmFjYWRlIHtcblxuICAgIHB1YmxpYyBkcmFnU3RhcnRTdHJhdGVneTogRHJhZ1N0YXJ0U3RyYXRlZ3kgPSBuZXcgRHJhZ1N0YXJ0U3RyYXRlZ3koKTtcbiAgICBwdWJsaWMgZHJhZ0VuZFN0cmF0ZWd5OiBEcmFnRW5kU3RyYXRlZ3kgPSBuZXcgRHJhZ0VuZFN0cmF0ZWd5KCk7XG4gICAgcHJvdGVjdGVkIGNvbG9yU3RyYXRlZ3k6IENvbG9yU3RyYXRlZ3kgPSBuZXcgQ29sb3JTdHJhdGVneSgpO1xuXG4gICAgcHVibGljIGNvb3JkczogQ29vcmRzUHJvdmlkZXIgPSBuZXcgQ29vcmRzUHJvdmlkZXIoKTtcbiAgICBwdWJsaWMgaGVpZ2h0QW5kV2lkdGg6IG51bWJlciA9IENvbnN0YW50cy5ERUZBVUxUX1NJWkU7XG5cbiAgICBwdWJsaWMgZnJlZU1vZGUgPSBmYWxzZTtcbiAgICBwdWJsaWMgZHJhZ0Rpc2FibGVkOiBib29sZWFuO1xuICAgIHB1YmxpYyBkcmF3RGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgcHVibGljIGxpZ2h0RGlzYWJsZWQ6IGJvb2xlYW47XG4gICAgcHVibGljIGRhcmtEaXNhYmxlZDogYm9vbGVhbjtcbiAgICBwdWJsaWMgYm9hcmQ6IEJvYXJkO1xuICAgIHB1YmxpYyBtb2RhbDogUGllY2VQcm9tb3Rpb25Nb2RhbENvbXBvbmVudDtcbiAgICBwdWJsaWMgYm9hcmRMb2FkZXI6IEJvYXJkTG9hZGVyO1xuICAgIHB1YmxpYyBkcmF3UHJvdmlkZXI6IERyYXdQcm92aWRlciA9IG5ldyBEcmF3UHJvdmlkZXIoKTtcbiAgICBwdWJsaWMgcGllY2VJY29uTWFuYWdlcjogUGllY2VJY29uSW5wdXRNYW5hZ2VyID0gbmV3IFBpZWNlSWNvbklucHV0TWFuYWdlcigpO1xuICAgIHB1YmxpYyBtb3ZlSGlzdG9yeVByb3ZpZGVyOiBIaXN0b3J5TW92ZVByb3ZpZGVyID0gbmV3IEhpc3RvcnlNb3ZlUHJvdmlkZXIoKTtcblxuICAgIHByb3RlY3RlZCBjb25zdHJ1Y3Rvcihib2FyZDogQm9hcmQpIHtcbiAgICAgICAgdGhpcy5ib2FyZCA9IGJvYXJkO1xuICAgIH1cblxuICAgIHB1YmxpYyBhYnN0cmFjdCByZXNldCgpOiB2b2lkO1xuXG4gICAgcHVibGljIGFic3RyYWN0IHVuZG8oKTogdm9pZDtcblxuICAgIHB1YmxpYyBhYnN0cmFjdCBtb3ZlKGNvb3Jkczogc3RyaW5nKTogdm9pZDtcblxuICAgIHB1YmxpYyBhYnN0cmFjdCBhZGRQaWVjZShcbiAgICAgICAgcGllY2VUeXBlSW5wdXQ6IFBpZWNlVHlwZUlucHV0LFxuICAgICAgICBjb2xvcklucHV0OiBDb2xvcklucHV0LFxuICAgICAgICBjb29yZHM6IHN0cmluZ1xuICAgICk6IHZvaWQ7XG5cbiAgICBwdWJsaWMgYWJzdHJhY3Qgb25Nb3VzZVVwKFxuICAgICAgICBldmVudDogTW91c2VFdmVudCxcbiAgICAgICAgcG9pbnRDbGlja2VkOiBQb2ludCxcbiAgICAgICAgbGVmdDogbnVtYmVyLFxuICAgICAgICB0b3A6IG51bWJlclxuICAgICk6IHZvaWQ7XG5cbiAgICBwdWJsaWMgYWJzdHJhY3Qgb25Nb3VzZURvd24oXG4gICAgICAgIGV2ZW50OiBNb3VzZUV2ZW50LFxuICAgICAgICBwb2ludENsaWNrZWQ6IFBvaW50LFxuICAgICAgICBsZWZ0PzogbnVtYmVyLFxuICAgICAgICB0b3A/OiBudW1iZXJcbiAgICApOiB2b2lkO1xuXG4gICAgcHVibGljIGNoZWNrSWZQYXduRmlyc3RNb3ZlKHBpZWNlOiBQaWVjZSkge1xuICAgICAgICBpZiAocGllY2UgaW5zdGFuY2VvZiBQYXduKSB7XG4gICAgICAgICAgICBwaWVjZS5pc01vdmVkQWxyZWFkeSA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgY2hlY2tJZlJvb2tNb3ZlZChwaWVjZTogUGllY2UpIHtcbiAgICAgICAgaWYgKHBpZWNlIGluc3RhbmNlb2YgUm9vaykge1xuICAgICAgICAgICAgcGllY2UuaXNNb3ZlZEFscmVhZHkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGNoZWNrSWZLaW5nTW92ZWQocGllY2U6IFBpZWNlKSB7XG4gICAgICAgIGlmIChwaWVjZSBpbnN0YW5jZW9mIEtpbmcpIHtcbiAgICAgICAgICAgIHBpZWNlLmlzTW92ZWRBbHJlYWR5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXRNb3ZlSGlzdG9yeSgpOiBIaXN0b3J5TW92ZVtdIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW92ZUhpc3RvcnlQcm92aWRlci5nZXRBbGwoKTtcbiAgICB9XG5cbn1cbiJdfQ==