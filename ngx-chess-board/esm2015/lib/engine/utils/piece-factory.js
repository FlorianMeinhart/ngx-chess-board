import { Bishop } from '../../models/pieces/bishop';
import { Color } from '../../models/pieces/color';
import { King } from '../../models/pieces/king';
import { Knight } from '../../models/pieces/knight';
import { Pawn } from '../../models/pieces/pawn';
import { Point } from '../../models/pieces/point';
import { Queen } from '../../models/pieces/queen';
import { Rook } from '../../models/pieces/rook';
import { ColorInput, PieceTypeInput } from '../../utils/inputs/piece-type-input';
import { UnicodeConstants } from '../../utils/unicode-constants';
export class PieceFactory {
    static create(indexes, pieceTypeInput, colorInput, board) {
        let piece;
        let color = colorInput === ColorInput.LIGHT
            ? Color.WHITE
            : Color.BLACK;
        switch (pieceTypeInput) {
            case PieceTypeInput.QUEEN:
                piece = new Queen(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_QUEEN : UnicodeConstants.BLACK_QUEEN, board);
                break;
            case PieceTypeInput.KING:
                piece = new King(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_KING : UnicodeConstants.BLACK_KING, board);
                break;
            case PieceTypeInput.KNIGHT:
                piece = new Knight(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_KNIGHT : UnicodeConstants.BLACK_KNIGHT, board);
                break;
            case PieceTypeInput.BISHOP:
                piece = new Bishop(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_BISHOP : UnicodeConstants.BLACK_BISHOP, board);
                break;
            case PieceTypeInput.ROOK:
                piece = new Rook(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_ROOK : UnicodeConstants.BLACK_ROOK, board);
                break;
            case PieceTypeInput.PAWN:
                piece = new Pawn(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_PAWN : UnicodeConstants.BLACK_PAWN, board);
                break;
        }
        return piece;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGllY2UtZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9Lb21wdXRlci9EZXNrdG9wL05vd3kgZm9sZGVyL2NoZXNzLWJvYXJkL3Byb2plY3RzL25neC1jaGVzcy1ib2FyZC9zcmMvIiwic291cmNlcyI6WyJsaWIvZW5naW5lL3V0aWxzL3BpZWNlLWZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUVoRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbEQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRCxPQUFPLEVBQ0gsVUFBVSxFQUNWLGNBQWMsRUFDakIsTUFBTSxxQ0FBcUMsQ0FBQztBQUM3QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUVqRSxNQUFNLE9BQU8sWUFBWTtJQUVyQixNQUFNLENBQUMsTUFBTSxDQUNULE9BQXdCLEVBQ3hCLGNBQThCLEVBQzlCLFVBQXNCLEVBQ3RCLEtBQVk7UUFFWixJQUFJLEtBQUssQ0FBQztRQUNWLElBQUksS0FBSyxHQUFHLFVBQVUsS0FBSyxVQUFVLENBQUMsS0FBSztZQUN2QyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUs7WUFDYixDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUVsQixRQUFRLGNBQWMsRUFBRTtZQUNwQixLQUFLLGNBQWMsQ0FBQyxLQUFLO2dCQUNyQixLQUFLLEdBQUcsSUFBSSxLQUFLLENBQ2IsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQ3ZDLEtBQUssRUFDTCxLQUFLLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQ25GLEtBQUssQ0FDUixDQUFDO2dCQUNGLE1BQU07WUFDVixLQUFLLGNBQWMsQ0FBQyxJQUFJO2dCQUNwQixLQUFLLEdBQUcsSUFBSSxJQUFJLENBQ1osSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQ3ZDLEtBQUssRUFDTCxLQUFLLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQ2pGLEtBQUssQ0FDUixDQUFDO2dCQUVGLE1BQU07WUFDVixLQUFLLGNBQWMsQ0FBQyxNQUFNO2dCQUN0QixLQUFLLEdBQUcsSUFBSSxNQUFNLENBQ2QsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQ3ZDLEtBQUssRUFDTCxLQUFLLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQ3JGLEtBQUssQ0FDUixDQUFDO2dCQUNGLE1BQU07WUFDVixLQUFLLGNBQWMsQ0FBQyxNQUFNO2dCQUN0QixLQUFLLEdBQUcsSUFBSSxNQUFNLENBQ2QsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQ3ZDLEtBQUssRUFDTCxLQUFLLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQ3JGLEtBQUssQ0FDUixDQUFDO2dCQUNGLE1BQU07WUFDVixLQUFLLGNBQWMsQ0FBQyxJQUFJO2dCQUNwQixLQUFLLEdBQUcsSUFBSSxJQUFJLENBQ1osSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQ3ZDLEtBQUssRUFDTCxLQUFLLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQ2pGLEtBQUssQ0FDUixDQUFDO2dCQUNGLE1BQU07WUFDVixLQUFLLGNBQWMsQ0FBQyxJQUFJO2dCQUNwQixLQUFLLEdBQUcsSUFBSSxJQUFJLENBQ1osSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQ3ZDLEtBQUssRUFDTCxLQUFLLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQ2pGLEtBQUssQ0FDUixDQUFDO2dCQUNGLE1BQU07U0FDYjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvYXJkIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2JvYXJkJztcclxuaW1wb3J0IHsgTW92ZVRyYW5zbGF0aW9uIH0gZnJvbSAnLi4vLi4vbW9kZWxzL21vdmUtdHJhbnNsYXRpb24nO1xyXG5pbXBvcnQgeyBCaXNob3AgfSBmcm9tICcuLi8uLi9tb2RlbHMvcGllY2VzL2Jpc2hvcCc7XHJcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vLi4vbW9kZWxzL3BpZWNlcy9jb2xvcic7XHJcbmltcG9ydCB7IEtpbmcgfSBmcm9tICcuLi8uLi9tb2RlbHMvcGllY2VzL2tpbmcnO1xyXG5pbXBvcnQgeyBLbmlnaHQgfSBmcm9tICcuLi8uLi9tb2RlbHMvcGllY2VzL2tuaWdodCc7XHJcbmltcG9ydCB7IFBhd24gfSBmcm9tICcuLi8uLi9tb2RlbHMvcGllY2VzL3Bhd24nO1xyXG5pbXBvcnQgeyBQaWVjZSB9IGZyb20gJy4uLy4uL21vZGVscy9waWVjZXMvcGllY2UnO1xyXG5pbXBvcnQgeyBQb2ludCB9IGZyb20gJy4uLy4uL21vZGVscy9waWVjZXMvcG9pbnQnO1xyXG5pbXBvcnQgeyBRdWVlbiB9IGZyb20gJy4uLy4uL21vZGVscy9waWVjZXMvcXVlZW4nO1xyXG5pbXBvcnQgeyBSb29rIH0gZnJvbSAnLi4vLi4vbW9kZWxzL3BpZWNlcy9yb29rJztcclxuaW1wb3J0IHtcclxuICAgIENvbG9ySW5wdXQsXHJcbiAgICBQaWVjZVR5cGVJbnB1dFxyXG59IGZyb20gJy4uLy4uL3V0aWxzL2lucHV0cy9waWVjZS10eXBlLWlucHV0JztcclxuaW1wb3J0IHsgVW5pY29kZUNvbnN0YW50cyB9IGZyb20gJy4uLy4uL3V0aWxzL3VuaWNvZGUtY29uc3RhbnRzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBQaWVjZUZhY3Rvcnkge1xyXG5cclxuICAgIHN0YXRpYyBjcmVhdGUoXHJcbiAgICAgICAgaW5kZXhlczogTW92ZVRyYW5zbGF0aW9uLFxyXG4gICAgICAgIHBpZWNlVHlwZUlucHV0OiBQaWVjZVR5cGVJbnB1dCxcclxuICAgICAgICBjb2xvcklucHV0OiBDb2xvcklucHV0LFxyXG4gICAgICAgIGJvYXJkOiBCb2FyZFxyXG4gICAgKTogUGllY2Uge1xyXG4gICAgICAgIGxldCBwaWVjZTtcclxuICAgICAgICBsZXQgY29sb3IgPSBjb2xvcklucHV0ID09PSBDb2xvcklucHV0LkxJR0hUXHJcbiAgICAgICAgICAgID8gQ29sb3IuV0hJVEVcclxuICAgICAgICAgICAgOiBDb2xvci5CTEFDSztcclxuXHJcbiAgICAgICAgc3dpdGNoIChwaWVjZVR5cGVJbnB1dCkge1xyXG4gICAgICAgICAgICBjYXNlIFBpZWNlVHlwZUlucHV0LlFVRUVOOlxyXG4gICAgICAgICAgICAgICAgcGllY2UgPSBuZXcgUXVlZW4oXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IFBvaW50KGluZGV4ZXMueUF4aXMsIGluZGV4ZXMueEF4aXMpLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yID09PSBDb2xvci5XSElURSA/IFVuaWNvZGVDb25zdGFudHMuV0hJVEVfUVVFRU4gOiBVbmljb2RlQ29uc3RhbnRzLkJMQUNLX1FVRUVOLFxyXG4gICAgICAgICAgICAgICAgICAgIGJvYXJkXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgUGllY2VUeXBlSW5wdXQuS0lORzpcclxuICAgICAgICAgICAgICAgIHBpZWNlID0gbmV3IEtpbmcoXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IFBvaW50KGluZGV4ZXMueUF4aXMsIGluZGV4ZXMueEF4aXMpLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yID09PSBDb2xvci5XSElURSA/IFVuaWNvZGVDb25zdGFudHMuV0hJVEVfS0lORyA6IFVuaWNvZGVDb25zdGFudHMuQkxBQ0tfS0lORyxcclxuICAgICAgICAgICAgICAgICAgICBib2FyZFxyXG4gICAgICAgICAgICAgICAgKTtcclxuXHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBQaWVjZVR5cGVJbnB1dC5LTklHSFQ6XHJcbiAgICAgICAgICAgICAgICBwaWVjZSA9IG5ldyBLbmlnaHQoXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IFBvaW50KGluZGV4ZXMueUF4aXMsIGluZGV4ZXMueEF4aXMpLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yID09PSBDb2xvci5XSElURSA/IFVuaWNvZGVDb25zdGFudHMuV0hJVEVfS05JR0hUIDogVW5pY29kZUNvbnN0YW50cy5CTEFDS19LTklHSFQsXHJcbiAgICAgICAgICAgICAgICAgICAgYm9hcmRcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBQaWVjZVR5cGVJbnB1dC5CSVNIT1A6XHJcbiAgICAgICAgICAgICAgICBwaWVjZSA9IG5ldyBCaXNob3AoXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IFBvaW50KGluZGV4ZXMueUF4aXMsIGluZGV4ZXMueEF4aXMpLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yID09PSBDb2xvci5XSElURSA/IFVuaWNvZGVDb25zdGFudHMuV0hJVEVfQklTSE9QIDogVW5pY29kZUNvbnN0YW50cy5CTEFDS19CSVNIT1AsXHJcbiAgICAgICAgICAgICAgICAgICAgYm9hcmRcclxuICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgY2FzZSBQaWVjZVR5cGVJbnB1dC5ST09LOlxyXG4gICAgICAgICAgICAgICAgcGllY2UgPSBuZXcgUm9vayhcclxuICAgICAgICAgICAgICAgICAgICBuZXcgUG9pbnQoaW5kZXhlcy55QXhpcywgaW5kZXhlcy54QXhpcyksXHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgY29sb3IgPT09IENvbG9yLldISVRFID8gVW5pY29kZUNvbnN0YW50cy5XSElURV9ST09LIDogVW5pY29kZUNvbnN0YW50cy5CTEFDS19ST09LLFxyXG4gICAgICAgICAgICAgICAgICAgIGJvYXJkXHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgUGllY2VUeXBlSW5wdXQuUEFXTjpcclxuICAgICAgICAgICAgICAgIHBpZWNlID0gbmV3IFBhd24oXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3IFBvaW50KGluZGV4ZXMueUF4aXMsIGluZGV4ZXMueEF4aXMpLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yID09PSBDb2xvci5XSElURSA/IFVuaWNvZGVDb25zdGFudHMuV0hJVEVfUEFXTiA6IFVuaWNvZGVDb25zdGFudHMuQkxBQ0tfUEFXTixcclxuICAgICAgICAgICAgICAgICAgICBib2FyZFxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHBpZWNlO1xyXG4gICAgfVxyXG59XHJcbiJdfQ==