import { Bishop } from '../../models/pieces/bishop';
import { Color } from '../../models/pieces/color';
import { King } from '../../models/pieces/king';
import { Knight } from '../../models/pieces/knight';
import { Pawn } from '../../models/pieces/pawn';
import { Point } from '../../models/pieces/point';
import { Queen } from '../../models/pieces/queen';
import { Rook } from '../../models/pieces/rook';
import { ColorInput, PieceTypeInput } from '../../utils/inputs/piece-type-input';
import { UnicodeConstants } from '../../utils/unicode-constants';
export class PieceFactory {
    static create(indexes, pieceTypeInput, colorInput, board) {
        let piece;
        let color = colorInput === ColorInput.LIGHT
            ? Color.WHITE
            : Color.BLACK;
        switch (pieceTypeInput) {
            case PieceTypeInput.QUEEN:
                piece = new Queen(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_QUEEN : UnicodeConstants.BLACK_QUEEN, board);
                break;
            case PieceTypeInput.KING:
                piece = new King(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_KING : UnicodeConstants.BLACK_KING, board);
                break;
            case PieceTypeInput.KNIGHT:
                piece = new Knight(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_KNIGHT : UnicodeConstants.BLACK_KNIGHT, board);
                break;
            case PieceTypeInput.BISHOP:
                piece = new Bishop(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_BISHOP : UnicodeConstants.BLACK_BISHOP, board);
                break;
            case PieceTypeInput.ROOK:
                piece = new Rook(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_ROOK : UnicodeConstants.BLACK_ROOK, board);
                break;
            case PieceTypeInput.PAWN:
                piece = new Pawn(new Point(indexes.yAxis, indexes.xAxis), color, color === Color.WHITE ? UnicodeConstants.WHITE_PAWN : UnicodeConstants.BLACK_PAWN, board);
                break;
        }
        return piece;
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGllY2UtZmFjdG9yeS5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9Lb21wdXRlci9EZXNrdG9wL05vd3kgZm9sZGVyL2NoZXNzLWJvYXJkL3Byb2plY3RzL25neC1jaGVzcy1ib2FyZC9zcmMvIiwic291cmNlcyI6WyJsaWIvZW5naW5lL3V0aWxzL3BpZWNlLWZhY3RvcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBRUEsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUNsRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sMEJBQTBCLENBQUM7QUFDaEQsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ3BELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUVoRCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDbEQsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ2xELE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSwwQkFBMEIsQ0FBQztBQUNoRCxPQUFPLEVBQ0gsVUFBVSxFQUNWLGNBQWMsRUFDakIsTUFBTSxxQ0FBcUMsQ0FBQztBQUM3QyxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSwrQkFBK0IsQ0FBQztBQUVqRSxNQUFNLE9BQU8sWUFBWTtJQUVyQixNQUFNLENBQUMsTUFBTSxDQUNULE9BQXdCLEVBQ3hCLGNBQThCLEVBQzlCLFVBQXNCLEVBQ3RCLEtBQVk7UUFFWixJQUFJLEtBQUssQ0FBQztRQUNWLElBQUksS0FBSyxHQUFHLFVBQVUsS0FBSyxVQUFVLENBQUMsS0FBSztZQUN2QyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUs7WUFDYixDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztRQUVsQixRQUFRLGNBQWMsRUFBRTtZQUNwQixLQUFLLGNBQWMsQ0FBQyxLQUFLO2dCQUNyQixLQUFLLEdBQUcsSUFBSSxLQUFLLENBQ2IsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQ3ZDLEtBQUssRUFDTCxLQUFLLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxXQUFXLEVBQ25GLEtBQUssQ0FDUixDQUFDO2dCQUNGLE1BQU07WUFDVixLQUFLLGNBQWMsQ0FBQyxJQUFJO2dCQUNwQixLQUFLLEdBQUcsSUFBSSxJQUFJLENBQ1osSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQ3ZDLEtBQUssRUFDTCxLQUFLLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQ2pGLEtBQUssQ0FDUixDQUFDO2dCQUVGLE1BQU07WUFDVixLQUFLLGNBQWMsQ0FBQyxNQUFNO2dCQUN0QixLQUFLLEdBQUcsSUFBSSxNQUFNLENBQ2QsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQ3ZDLEtBQUssRUFDTCxLQUFLLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQ3JGLEtBQUssQ0FDUixDQUFDO2dCQUNGLE1BQU07WUFDVixLQUFLLGNBQWMsQ0FBQyxNQUFNO2dCQUN0QixLQUFLLEdBQUcsSUFBSSxNQUFNLENBQ2QsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQ3ZDLEtBQUssRUFDTCxLQUFLLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxZQUFZLEVBQ3JGLEtBQUssQ0FDUixDQUFDO2dCQUNGLE1BQU07WUFDVixLQUFLLGNBQWMsQ0FBQyxJQUFJO2dCQUNwQixLQUFLLEdBQUcsSUFBSSxJQUFJLENBQ1osSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQ3ZDLEtBQUssRUFDTCxLQUFLLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQ2pGLEtBQUssQ0FDUixDQUFDO2dCQUNGLE1BQU07WUFDVixLQUFLLGNBQWMsQ0FBQyxJQUFJO2dCQUNwQixLQUFLLEdBQUcsSUFBSSxJQUFJLENBQ1osSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLEVBQ3ZDLEtBQUssRUFDTCxLQUFLLEtBQUssS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsZ0JBQWdCLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxnQkFBZ0IsQ0FBQyxVQUFVLEVBQ2pGLEtBQUssQ0FDUixDQUFDO2dCQUNGLE1BQU07U0FDYjtRQUVELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvYXJkIH0gZnJvbSAnLi4vLi4vbW9kZWxzL2JvYXJkJztcbmltcG9ydCB7IE1vdmVUcmFuc2xhdGlvbiB9IGZyb20gJy4uLy4uL21vZGVscy9tb3ZlLXRyYW5zbGF0aW9uJztcbmltcG9ydCB7IEJpc2hvcCB9IGZyb20gJy4uLy4uL21vZGVscy9waWVjZXMvYmlzaG9wJztcbmltcG9ydCB7IENvbG9yIH0gZnJvbSAnLi4vLi4vbW9kZWxzL3BpZWNlcy9jb2xvcic7XG5pbXBvcnQgeyBLaW5nIH0gZnJvbSAnLi4vLi4vbW9kZWxzL3BpZWNlcy9raW5nJztcbmltcG9ydCB7IEtuaWdodCB9IGZyb20gJy4uLy4uL21vZGVscy9waWVjZXMva25pZ2h0JztcbmltcG9ydCB7IFBhd24gfSBmcm9tICcuLi8uLi9tb2RlbHMvcGllY2VzL3Bhd24nO1xuaW1wb3J0IHsgUGllY2UgfSBmcm9tICcuLi8uLi9tb2RlbHMvcGllY2VzL3BpZWNlJztcbmltcG9ydCB7IFBvaW50IH0gZnJvbSAnLi4vLi4vbW9kZWxzL3BpZWNlcy9wb2ludCc7XG5pbXBvcnQgeyBRdWVlbiB9IGZyb20gJy4uLy4uL21vZGVscy9waWVjZXMvcXVlZW4nO1xuaW1wb3J0IHsgUm9vayB9IGZyb20gJy4uLy4uL21vZGVscy9waWVjZXMvcm9vayc7XG5pbXBvcnQge1xuICAgIENvbG9ySW5wdXQsXG4gICAgUGllY2VUeXBlSW5wdXRcbn0gZnJvbSAnLi4vLi4vdXRpbHMvaW5wdXRzL3BpZWNlLXR5cGUtaW5wdXQnO1xuaW1wb3J0IHsgVW5pY29kZUNvbnN0YW50cyB9IGZyb20gJy4uLy4uL3V0aWxzL3VuaWNvZGUtY29uc3RhbnRzJztcblxuZXhwb3J0IGNsYXNzIFBpZWNlRmFjdG9yeSB7XG5cbiAgICBzdGF0aWMgY3JlYXRlKFxuICAgICAgICBpbmRleGVzOiBNb3ZlVHJhbnNsYXRpb24sXG4gICAgICAgIHBpZWNlVHlwZUlucHV0OiBQaWVjZVR5cGVJbnB1dCxcbiAgICAgICAgY29sb3JJbnB1dDogQ29sb3JJbnB1dCxcbiAgICAgICAgYm9hcmQ6IEJvYXJkXG4gICAgKTogUGllY2Uge1xuICAgICAgICBsZXQgcGllY2U7XG4gICAgICAgIGxldCBjb2xvciA9IGNvbG9ySW5wdXQgPT09IENvbG9ySW5wdXQuTElHSFRcbiAgICAgICAgICAgID8gQ29sb3IuV0hJVEVcbiAgICAgICAgICAgIDogQ29sb3IuQkxBQ0s7XG5cbiAgICAgICAgc3dpdGNoIChwaWVjZVR5cGVJbnB1dCkge1xuICAgICAgICAgICAgY2FzZSBQaWVjZVR5cGVJbnB1dC5RVUVFTjpcbiAgICAgICAgICAgICAgICBwaWVjZSA9IG5ldyBRdWVlbihcbiAgICAgICAgICAgICAgICAgICAgbmV3IFBvaW50KGluZGV4ZXMueUF4aXMsIGluZGV4ZXMueEF4aXMpLFxuICAgICAgICAgICAgICAgICAgICBjb2xvcixcbiAgICAgICAgICAgICAgICAgICAgY29sb3IgPT09IENvbG9yLldISVRFID8gVW5pY29kZUNvbnN0YW50cy5XSElURV9RVUVFTiA6IFVuaWNvZGVDb25zdGFudHMuQkxBQ0tfUVVFRU4sXG4gICAgICAgICAgICAgICAgICAgIGJvYXJkXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgUGllY2VUeXBlSW5wdXQuS0lORzpcbiAgICAgICAgICAgICAgICBwaWVjZSA9IG5ldyBLaW5nKFxuICAgICAgICAgICAgICAgICAgICBuZXcgUG9pbnQoaW5kZXhlcy55QXhpcywgaW5kZXhlcy54QXhpcyksXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICBjb2xvciA9PT0gQ29sb3IuV0hJVEUgPyBVbmljb2RlQ29uc3RhbnRzLldISVRFX0tJTkcgOiBVbmljb2RlQ29uc3RhbnRzLkJMQUNLX0tJTkcsXG4gICAgICAgICAgICAgICAgICAgIGJvYXJkXG4gICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBQaWVjZVR5cGVJbnB1dC5LTklHSFQ6XG4gICAgICAgICAgICAgICAgcGllY2UgPSBuZXcgS25pZ2h0KFxuICAgICAgICAgICAgICAgICAgICBuZXcgUG9pbnQoaW5kZXhlcy55QXhpcywgaW5kZXhlcy54QXhpcyksXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICBjb2xvciA9PT0gQ29sb3IuV0hJVEUgPyBVbmljb2RlQ29uc3RhbnRzLldISVRFX0tOSUdIVCA6IFVuaWNvZGVDb25zdGFudHMuQkxBQ0tfS05JR0hULFxuICAgICAgICAgICAgICAgICAgICBib2FyZFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlIFBpZWNlVHlwZUlucHV0LkJJU0hPUDpcbiAgICAgICAgICAgICAgICBwaWVjZSA9IG5ldyBCaXNob3AoXG4gICAgICAgICAgICAgICAgICAgIG5ldyBQb2ludChpbmRleGVzLnlBeGlzLCBpbmRleGVzLnhBeGlzKSxcbiAgICAgICAgICAgICAgICAgICAgY29sb3IsXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yID09PSBDb2xvci5XSElURSA/IFVuaWNvZGVDb25zdGFudHMuV0hJVEVfQklTSE9QIDogVW5pY29kZUNvbnN0YW50cy5CTEFDS19CSVNIT1AsXG4gICAgICAgICAgICAgICAgICAgIGJvYXJkXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgUGllY2VUeXBlSW5wdXQuUk9PSzpcbiAgICAgICAgICAgICAgICBwaWVjZSA9IG5ldyBSb29rKFxuICAgICAgICAgICAgICAgICAgICBuZXcgUG9pbnQoaW5kZXhlcy55QXhpcywgaW5kZXhlcy54QXhpcyksXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICBjb2xvciA9PT0gQ29sb3IuV0hJVEUgPyBVbmljb2RlQ29uc3RhbnRzLldISVRFX1JPT0sgOiBVbmljb2RlQ29uc3RhbnRzLkJMQUNLX1JPT0ssXG4gICAgICAgICAgICAgICAgICAgIGJvYXJkXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgUGllY2VUeXBlSW5wdXQuUEFXTjpcbiAgICAgICAgICAgICAgICBwaWVjZSA9IG5ldyBQYXduKFxuICAgICAgICAgICAgICAgICAgICBuZXcgUG9pbnQoaW5kZXhlcy55QXhpcywgaW5kZXhlcy54QXhpcyksXG4gICAgICAgICAgICAgICAgICAgIGNvbG9yLFxuICAgICAgICAgICAgICAgICAgICBjb2xvciA9PT0gQ29sb3IuV0hJVEUgPyBVbmljb2RlQ29uc3RhbnRzLldISVRFX1BBV04gOiBVbmljb2RlQ29uc3RhbnRzLkJMQUNLX1BBV04sXG4gICAgICAgICAgICAgICAgICAgIGJvYXJkXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBwaWVjZTtcbiAgICB9XG59XG4iXX0=