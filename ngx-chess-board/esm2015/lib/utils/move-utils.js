import { Bishop } from '../models/pieces/bishop';
import { King } from '../models/pieces/king';
import { Knight } from '../models/pieces/knight';
import { Pawn } from '../models/pieces/pawn';
import { Point } from '../models/pieces/point';
import { MoveTranslation } from '../models/move-translation';
import { Queen } from '../models/pieces/queen';
import { Rook } from '../models/pieces/rook';
export class MoveUtils {
    static willMoveCauseCheck(currentColor, row, col, destRow, destCol, board) {
        const srcPiece = board.getPieceByField(row, col);
        const destPiece = board.getPieceByField(destRow, destCol);
        if (srcPiece) {
            srcPiece.point.row = destRow;
            srcPiece.point.col = destCol;
        }
        if (destPiece) {
            board.pieces = board.pieces.filter((piece) => piece !== destPiece);
        }
        const isBound = board.isKingInCheck(currentColor, board.pieces);
        if (srcPiece) {
            srcPiece.point.col = col;
            srcPiece.point.row = row;
        }
        if (destPiece) {
            board.pieces.push(destPiece);
        }
        return isBound;
    }
    static format(sourcePoint, destPoint, reverted) {
        if (reverted) {
            const sourceX = 104 - sourcePoint.col;
            const destX = 104 - destPoint.col;
            return (String.fromCharCode(sourceX) +
                (sourcePoint.row + 1) +
                String.fromCharCode(destX) +
                (destPoint.row + 1));
        }
        else {
            const incrementX = 97;
            return (String.fromCharCode(sourcePoint.col + incrementX) +
                (Math.abs(sourcePoint.row - 7) + 1) +
                String.fromCharCode(destPoint.col + incrementX) +
                (Math.abs(destPoint.row - 7) + 1));
        }
    }
    static translateCoordsToIndex(coords, reverted) {
        let xAxis;
        let yAxis;
        if (reverted) {
            xAxis = 104 - coords.charCodeAt(0);
            yAxis = +coords.charAt(1) - 1;
        }
        else {
            xAxis = coords.charCodeAt(0) - 97;
            yAxis = Math.abs(+coords.charAt(1) - 8);
        }
        return new MoveTranslation(xAxis, yAxis, reverted);
    }
    static findPieceByPossibleMovesContaining(coords, board, color) {
        let indexes = this.translateCoordsToIndex(coords, board.reverted);
        let destPoint = new Point(indexes.yAxis, indexes.xAxis);
        let foundPieces = [];
        for (let piece of board.pieces.filter(piece => piece.color === color)) {
            for (let point of piece.getPossibleMoves()) {
                if (!MoveUtils.willMoveCauseCheck(piece.color, piece.point.row, piece.point.col, indexes.yAxis, indexes.xAxis, board) && point.isEqual(destPoint)) {
                    foundPieces.push(piece);
                }
            }
        }
        return foundPieces;
    }
    static findPieceByPossibleCapturesContaining(coords, board, color) {
        let indexes = this.translateCoordsToIndex(coords, board.reverted);
        let destPoint = new Point(indexes.yAxis, indexes.xAxis);
        let foundPieces = [];
        for (let piece of board.pieces.filter(piece => piece.color === color)) {
            for (let point of piece.getPossibleCaptures()) {
                if (!MoveUtils.willMoveCauseCheck(piece.color, piece.point.row, piece.point.col, indexes.yAxis, indexes.xAxis, board) && point.isEqual(destPoint)) {
                    foundPieces.push(piece);
                }
            }
        }
        return foundPieces;
    }
    static formatSingle(point, reverted) {
        if (reverted) {
            const sourceX = 104 - point.col;
            return (String.fromCharCode(sourceX) +
                (point.row + 1));
        }
        else {
            const incrementX = 97;
            return (String.fromCharCode(point.col + incrementX) +
                (Math.abs(point.row - 7) + 1));
        }
    }
    static getFirstLetterPiece(piece) {
        if (piece instanceof Pawn) {
            return 'P';
        }
        else {
            if (piece instanceof Knight) {
                return 'N';
            }
            else {
                if (piece instanceof Bishop) {
                    return 'B';
                }
                else {
                    if (piece instanceof Rook) {
                        return 'R';
                    }
                    else {
                        if (piece instanceof King) {
                            return 'K';
                        }
                        else {
                            if (piece instanceof Queen) {
                                return 'Q';
                            }
                        }
                    }
                }
            }
        }
        return '';
    }
    static reverse(board, row) {
        return board.reverted
            ? row + 1
            : Math.abs(row - 7) + 1;
    }
    static formatCol(board, col) {
        return board.reverted
            ? String.fromCharCode(104 - col)
            : String.fromCharCode(97 + col);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW92ZS11dGlscy5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9Lb21wdXRlci9EZXNrdG9wL05vd3kgZm9sZGVyL2NoZXNzLWJvYXJkL3Byb2plY3RzL25neC1jaGVzcy1ib2FyZC9zcmMvIiwic291cmNlcyI6WyJsaWIvdXRpbHMvbW92ZS11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFFakQsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBQzdDLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSx5QkFBeUIsQ0FBQztBQUNqRCxPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFFN0MsT0FBTyxFQUFFLEtBQUssRUFBRSxNQUFNLHdCQUF3QixDQUFDO0FBQy9DLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUM3RCxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sd0JBQXdCLENBQUM7QUFDL0MsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLHVCQUF1QixDQUFDO0FBRTdDLE1BQU0sT0FBTyxTQUFTO0lBQ1gsTUFBTSxDQUFDLGtCQUFrQixDQUM1QixZQUFtQixFQUNuQixHQUFXLEVBQ1gsR0FBVyxFQUNYLE9BQWUsRUFDZixPQUFlLEVBQ2YsS0FBWTtRQUVaLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxlQUFlLENBQUMsR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ2pELE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxlQUFlLENBQUMsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRTFELElBQUksUUFBUSxFQUFFO1lBQ1YsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDO1lBQzdCLFFBQVEsQ0FBQyxLQUFLLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQztTQUNoQztRQUVELElBQUks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LE1BQU0sRUFBRTtvQkFDekIsT0FBTyxHQUFHLENBQUM7aUJBQ2Q7cUJBQU07b0JBQ0gsSUFBSSxLQUFLLFlBQVksSUFBSSxFQUFFO3dCQUN2QixPQUFPLEdBQUcsQ0FBQztxQkFDZDt5QkFBTTt3QkFDSCxJQUFJLEtBQUssWUFBWSxJQUFJLEVBQUU7NEJBQ3ZCLE9BQU8sR0FBRyxDQUFDO3lCQUNkOzZCQUFNOzRCQUNILElBQUksS0FBSyxZQUFZLEtBQUssRUFBRTtnQ0FDeEIsT0FBTyxHQUFHLENBQUM7NkJBQ2Q7eUJBQ0o7cUJBQ0o7aUJBQ0o7YUFDSjtTQUNKO1FBRUQsT0FBTyxFQUFFLENBQUM7SUFDZCxDQUFDO0lBRUQsTUFBTSxDQUFDLE9BQU8sQ0FBQyxLQUFZLEVBQUUsR0FBVztRQUNwQyxPQUFPLEtBQUssQ0FBQyxRQUFRO1lBQ2pCLENBQUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQztZQUNULENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDaEMsQ0FBQztJQUVELE1BQU0sQ0FBQyxTQUFTLENBQUMsS0FBWSxFQUFFLEdBQVc7UUFDdEMsT0FBTyxLQUFLLENBQUMsUUFBUTtZQUNqQixDQUFDLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1lBQ2hDLENBQUMsQ0FBQyxNQUFNLENBQUMsWUFBWSxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUN4QyxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBCb2FyZCB9IGZyb20gJy4uL21vZGVscy9ib2FyZCc7XHJcbmltcG9ydCB7IEJpc2hvcCB9IGZyb20gJy4uL21vZGVscy9waWVjZXMvYmlzaG9wJztcclxuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi9tb2RlbHMvcGllY2VzL2NvbG9yJztcclxuaW1wb3J0IHsgS2luZyB9IGZyb20gJy4uL21vZGVscy9waWVjZXMva2luZyc7XHJcbmltcG9ydCB7IEtuaWdodCB9IGZyb20gJy4uL21vZGVscy9waWVjZXMva25pZ2h0JztcclxuaW1wb3J0IHsgUGF3biB9IGZyb20gJy4uL21vZGVscy9waWVjZXMvcGF3bic7XHJcbmltcG9ydCB7IFBpZWNlIH0gZnJvbSAnLi4vbW9kZWxzL3BpZWNlcy9waWVjZSc7XHJcbmltcG9ydCB7IFBvaW50IH0gZnJvbSAnLi4vbW9kZWxzL3BpZWNlcy9wb2ludCc7XHJcbmltcG9ydCB7IE1vdmVUcmFuc2xhdGlvbiB9IGZyb20gJy4uL21vZGVscy9tb3ZlLXRyYW5zbGF0aW9uJztcclxuaW1wb3J0IHsgUXVlZW4gfSBmcm9tICcuLi9tb2RlbHMvcGllY2VzL3F1ZWVuJztcclxuaW1wb3J0IHsgUm9vayB9IGZyb20gJy4uL21vZGVscy9waWVjZXMvcm9vayc7XHJcblxyXG5leHBvcnQgY2xhc3MgTW92ZVV0aWxzIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgd2lsbE1vdmVDYXVzZUNoZWNrKFxyXG4gICAgICAgIGN1cnJlbnRDb2xvcjogQ29sb3IsXHJcbiAgICAgICAgcm93OiBudW1iZXIsXHJcbiAgICAgICAgY29sOiBudW1iZXIsXHJcbiAgICAgICAgZGVzdFJvdzogbnVtYmVyLFxyXG4gICAgICAgIGRlc3RDb2w6IG51bWJlcixcclxuICAgICAgICBib2FyZDogQm9hcmRcclxuICAgICkge1xyXG4gICAgICAgIGNvbnN0IHNyY1BpZWNlID0gYm9hcmQuZ2V0UGllY2VCeUZpZWxkKHJvdywgY29sKTtcclxuICAgICAgICBjb25zdCBkZXN0UGllY2UgPSBib2FyZC5nZXRQaWVjZUJ5RmllbGQoZGVzdFJvdywgZGVzdENvbCk7XHJcblxyXG4gICAgICAgIGlmIChzcmNQaWVjZSkge1xyXG4gICAgICAgICAgICBzcmNQaWVjZS5wb2ludC5yb3cgPSBkZXN0Um93O1xyXG4gICAgICAgICAgICBzcmNQaWVjZS5wb2ludC5jb2wgPSBkZXN0Q29sO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGRlc3RQaWVjZSkge1xyXG4gICAgICAgICAgICBib2FyZC5waWVjZXMgPSBib2FyZC5waWVjZXMuZmlsdGVyKChwaWVjZSkgPT4gcGllY2UgIT09IGRlc3RQaWVjZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGNvbnN0IGlzQm91bmQgPSBib2FyZC5pc0tpbmdJbkNoZWNrKGN1cnJlbnRDb2xvciwgYm9hcmQucGllY2VzKTtcclxuXHJcbiAgICAgICAgaWYgKHNyY1BpZWNlKSB7XHJcbiAgICAgICAgICAgIHNyY1BpZWNlLnBvaW50LmNvbCA9IGNvbDtcclxuICAgICAgICAgICAgc3JjUGllY2UucG9pbnQucm93ID0gcm93O1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKGRlc3RQaWVjZSkge1xyXG4gICAgICAgICAgICBib2FyZC5waWVjZXMucHVzaChkZXN0UGllY2UpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGlzQm91bmQ7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBmb3JtYXQoXHJcbiAgICAgICAgc291cmNlUG9pbnQ6IFBvaW50LFxyXG4gICAgICAgIGRlc3RQb2ludDogUG9pbnQsXHJcbiAgICAgICAgcmV2ZXJ0ZWQ6IGJvb2xlYW5cclxuICAgICkge1xyXG4gICAgICAgIGlmIChyZXZlcnRlZCkge1xyXG4gICAgICAgICAgICBjb25zdCBzb3VyY2VYID0gMTA0IC0gc291cmNlUG9pbnQuY29sO1xyXG4gICAgICAgICAgICBjb25zdCBkZXN0WCA9IDEwNCAtIGRlc3RQb2ludC5jb2w7XHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICBTdHJpbmcuZnJvbUNoYXJDb2RlKHNvdXJjZVgpICtcclxuICAgICAgICAgICAgICAgIChzb3VyY2VQb2ludC5yb3cgKyAxKSArXHJcbiAgICAgICAgICAgICAgICBTdHJpbmcuZnJvbUNoYXJDb2RlKGRlc3RYKSArXHJcbiAgICAgICAgICAgICAgICAoZGVzdFBvaW50LnJvdyArIDEpXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc3QgaW5jcmVtZW50WCA9IDk3O1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgU3RyaW5nLmZyb21DaGFyQ29kZShzb3VyY2VQb2ludC5jb2wgKyBpbmNyZW1lbnRYKSArXHJcbiAgICAgICAgICAgICAgICAoTWF0aC5hYnMoc291cmNlUG9pbnQucm93IC0gNykgKyAxKSArXHJcbiAgICAgICAgICAgICAgICBTdHJpbmcuZnJvbUNoYXJDb2RlKGRlc3RQb2ludC5jb2wgKyBpbmNyZW1lbnRYKSArXHJcbiAgICAgICAgICAgICAgICAoTWF0aC5hYnMoZGVzdFBvaW50LnJvdyAtIDcpICsgMSlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyB0cmFuc2xhdGVDb29yZHNUb0luZGV4KGNvb3Jkczogc3RyaW5nLCByZXZlcnRlZDogYm9vbGVhbikge1xyXG4gICAgICAgIGxldCB4QXhpczogbnVtYmVyO1xyXG4gICAgICAgIGxldCB5QXhpczogbnVtYmVyO1xyXG4gICAgICAgIGlmIChyZXZlcnRlZCkge1xyXG4gICAgICAgICAgICB4QXhpcyA9IDEwNCAtIGNvb3Jkcy5jaGFyQ29kZUF0KDApO1xyXG4gICAgICAgICAgICB5QXhpcyA9ICtjb29yZHMuY2hhckF0KDEpIC0gMTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICB4QXhpcyA9IGNvb3Jkcy5jaGFyQ29kZUF0KDApIC0gOTc7XHJcbiAgICAgICAgICAgIHlBeGlzID0gTWF0aC5hYnMoK2Nvb3Jkcy5jaGFyQXQoMSkgLSA4KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgTW92ZVRyYW5zbGF0aW9uKHhBeGlzLCB5QXhpcywgcmV2ZXJ0ZWQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZmluZFBpZWNlQnlQb3NzaWJsZU1vdmVzQ29udGFpbmluZyhcclxuICAgICAgICBjb29yZHM6IHN0cmluZyxcclxuICAgICAgICBib2FyZDogQm9hcmQsXHJcbiAgICAgICAgY29sb3I6IENvbG9yXHJcbiAgICApOiBQaWVjZVtdIHtcclxuICAgICAgICBsZXQgaW5kZXhlcyA9IHRoaXMudHJhbnNsYXRlQ29vcmRzVG9JbmRleChjb29yZHMsIGJvYXJkLnJldmVydGVkKTtcclxuICAgICAgICBsZXQgZGVzdFBvaW50ID0gbmV3IFBvaW50KGluZGV4ZXMueUF4aXMsIGluZGV4ZXMueEF4aXMpO1xyXG4gICAgICAgIGxldCBmb3VuZFBpZWNlcyA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBwaWVjZSBvZiBib2FyZC5waWVjZXMuZmlsdGVyKHBpZWNlID0+IHBpZWNlLmNvbG9yID09PSBjb2xvcikpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgcG9pbnQgb2YgcGllY2UuZ2V0UG9zc2libGVNb3ZlcygpKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIU1vdmVVdGlscy53aWxsTW92ZUNhdXNlQ2hlY2soXHJcbiAgICAgICAgICAgICAgICAgICAgcGllY2UuY29sb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgcGllY2UucG9pbnQucm93LFxyXG4gICAgICAgICAgICAgICAgICAgIHBpZWNlLnBvaW50LmNvbCxcclxuICAgICAgICAgICAgICAgICAgICBpbmRleGVzLnlBeGlzLFxyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4ZXMueEF4aXMsXHJcbiAgICAgICAgICAgICAgICAgICAgYm9hcmRcclxuICAgICAgICAgICAgICAgICkgJiYgcG9pbnQuaXNFcXVhbChkZXN0UG9pbnQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm91bmRQaWVjZXMucHVzaChwaWVjZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGZvdW5kUGllY2VzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZmluZFBpZWNlQnlQb3NzaWJsZUNhcHR1cmVzQ29udGFpbmluZyhcclxuICAgICAgICBjb29yZHM6IHN0cmluZyxcclxuICAgICAgICBib2FyZDogQm9hcmQsXHJcbiAgICAgICAgY29sb3I6IENvbG9yXHJcbiAgICApOiBQaWVjZVtdIHtcclxuICAgICAgICBsZXQgaW5kZXhlcyA9IHRoaXMudHJhbnNsYXRlQ29vcmRzVG9JbmRleChjb29yZHMsIGJvYXJkLnJldmVydGVkKTtcclxuICAgICAgICBsZXQgZGVzdFBvaW50ID0gbmV3IFBvaW50KGluZGV4ZXMueUF4aXMsIGluZGV4ZXMueEF4aXMpO1xyXG4gICAgICAgIGxldCBmb3VuZFBpZWNlcyA9IFtdO1xyXG4gICAgICAgIGZvciAobGV0IHBpZWNlIG9mIGJvYXJkLnBpZWNlcy5maWx0ZXIocGllY2UgPT4gcGllY2UuY29sb3IgPT09IGNvbG9yKSkge1xyXG4gICAgICAgICAgICBmb3IgKGxldCBwb2ludCBvZiBwaWVjZS5nZXRQb3NzaWJsZUNhcHR1cmVzKCkpIHtcclxuICAgICAgICAgICAgICAgIGlmICghTW92ZVV0aWxzLndpbGxNb3ZlQ2F1c2VDaGVjayhcclxuICAgICAgICAgICAgICAgICAgICBwaWVjZS5jb2xvcixcclxuICAgICAgICAgICAgICAgICAgICBwaWVjZS5wb2ludC5yb3csXHJcbiAgICAgICAgICAgICAgICAgICAgcGllY2UucG9pbnQuY29sLFxyXG4gICAgICAgICAgICAgICAgICAgIGluZGV4ZXMueUF4aXMsXHJcbiAgICAgICAgICAgICAgICAgICAgaW5kZXhlcy54QXhpcyxcclxuICAgICAgICAgICAgICAgICAgICBib2FyZFxyXG4gICAgICAgICAgICAgICAgKSAmJiBwb2ludC5pc0VxdWFsKGRlc3RQb2ludCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3VuZFBpZWNlcy5wdXNoKHBpZWNlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIGZvdW5kUGllY2VzO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZm9ybWF0U2luZ2xlKHBvaW50OiBQb2ludCwgcmV2ZXJ0ZWQ6IGJvb2xlYW4pOiBzdHJpbmcge1xyXG4gICAgICAgIGlmIChyZXZlcnRlZCkge1xyXG4gICAgICAgICAgICBjb25zdCBzb3VyY2VYID0gMTA0IC0gcG9pbnQuY29sO1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgU3RyaW5nLmZyb21DaGFyQ29kZShzb3VyY2VYKSArXHJcbiAgICAgICAgICAgICAgICAocG9pbnQucm93ICsgMSlcclxuICAgICAgICAgICAgKTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBjb25zdCBpbmNyZW1lbnRYID0gOTc7XHJcbiAgICAgICAgICAgIHJldHVybiAoXHJcbiAgICAgICAgICAgICAgICBTdHJpbmcuZnJvbUNoYXJDb2RlKHBvaW50LmNvbCArIGluY3JlbWVudFgpICtcclxuICAgICAgICAgICAgICAgIChNYXRoLmFicyhwb2ludC5yb3cgLSA3KSArIDEpXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0Rmlyc3RMZXR0ZXJQaWVjZShwaWVjZTogUGllY2UpOiBzdHJpbmcge1xyXG4gICAgICAgIGlmIChwaWVjZSBpbnN0YW5jZW9mIFBhd24pIHtcclxuICAgICAgICAgICAgcmV0dXJuICdQJztcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAocGllY2UgaW5zdGFuY2VvZiBLbmlnaHQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAnTic7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocGllY2UgaW5zdGFuY2VvZiBCaXNob3ApIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ0InO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGllY2UgaW5zdGFuY2VvZiBSb29rKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnUic7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBpZWNlIGluc3RhbmNlb2YgS2luZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdLJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwaWVjZSBpbnN0YW5jZW9mIFF1ZWVuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICdRJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuICcnO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyByZXZlcnNlKGJvYXJkOiBCb2FyZCwgcm93OiBudW1iZXIpIHtcclxuICAgICAgICByZXR1cm4gYm9hcmQucmV2ZXJ0ZWRcclxuICAgICAgICAgICAgPyByb3cgKyAxXHJcbiAgICAgICAgICAgIDogTWF0aC5hYnMocm93IC0gNykgKyAxO1xyXG4gICAgfVxyXG5cclxuICAgIHN0YXRpYyBmb3JtYXRDb2woYm9hcmQ6IEJvYXJkLCBjb2w6IG51bWJlcik6IHN0cmluZyB7XHJcbiAgICAgICAgcmV0dXJuIGJvYXJkLnJldmVydGVkXHJcbiAgICAgICAgICAgID8gU3RyaW5nLmZyb21DaGFyQ29kZSgxMDQgLSBjb2wpXHJcbiAgICAgICAgICAgIDogU3RyaW5nLmZyb21DaGFyQ29kZSg5NyArIGNvbCk7XHJcbiAgICB9XHJcbn1cclxuIl19