import { MoveTranslation } from '../models/move-translation';
export class MoveUtils {
    static willMoveCauseCheck(currentColor, row, col, destRow, destCol, board) {
        const srcPiece = board.getPieceByField(row, col);
        const destPiece = board.getPieceByField(destRow, destCol);
        if (srcPiece) {
            srcPiece.point.row = destRow;
            srcPiece.point.col = destCol;
        }
        if (destPiece) {
            board.pieces = board.pieces.filter((piece) => piece !== destPiece);
        }
        const isBound = board.isKingInCheck(currentColor, board.pieces);
        if (srcPiece) {
            srcPiece.point.col = col;
            srcPiece.point.row = row;
        }
        if (destPiece) {
            board.pieces.push(destPiece);
        }
        return isBound;
    }
    static format(sourcePoint, destPoint, reverted) {
        if (reverted) {
            const sourceX = 104 - sourcePoint.col;
            const destX = 104 - destPoint.col;
            return (String.fromCharCode(sourceX) +
                (sourcePoint.row + 1) +
                String.fromCharCode(destX) +
                (destPoint.row + 1));
        }
        else {
            const incrementX = 97;
            return (String.fromCharCode(sourcePoint.col + incrementX) +
                (Math.abs(sourcePoint.row - 7) + 1) +
                String.fromCharCode(destPoint.col + incrementX) +
                (Math.abs(destPoint.row - 7) + 1));
        }
    }
    static translateCoordsToIndex(coords, reverted) {
        let xAxis;
        let yAxis;
        if (reverted) {
            xAxis = 104 - coords.charCodeAt(0);
            yAxis = +coords.charAt(1) - 1;
        }
        else {
            xAxis = coords.charCodeAt(0) - 97;
            yAxis = Math.abs(+coords.charAt(1) - 8);
        }
        return new MoveTranslation(xAxis, yAxis, reverted);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW92ZS11dGlscy5qcyIsInNvdXJjZVJvb3QiOiJDOi9Vc2Vycy9Lb21wdXRlci9EZXNrdG9wL05vd3kgZm9sZGVyL2NoZXNzLWJvYXJkL3Byb2plY3RzL25neC1jaGVzcy1ib2FyZC9zcmMvIiwic291cmNlcyI6WyJsaWIvdXRpbHMvbW92ZS11dGlscy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFHQSxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sNEJBQTRCLENBQUM7QUFFN0QsTUFBTSxPQUFPLFNBQVM7SUFDWCxNQUFNLENBQUMsa0JBQWtCLENBQzVCLFlBQW1CLEVBQ25CLEdBQVcsRUFDWCxHQUFXLEVBQ1gsT0FBZSxFQUNmLE9BQWUsRUFDZixLQUFZO1FBRVosTUFBTSxRQUFRLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDakQsTUFBTSxTQUFTLEdBQUcsS0FBSyxDQUFDLGVBQWUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFMUQsSUFBSSxRQUFRLEVBQUU7WUFDVixRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUM7WUFDN0IsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDO1NBQ2hDO1FBRUQsSUFBSSxTQUFTLEVBQUU7WUFDWCxLQUFLLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUM7U0FDdEU7UUFDRCxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsYUFBYSxDQUFDLFlBQVksRUFBRSxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFaEUsSUFBSSxRQUFRLEVBQUU7WUFDVixRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7WUFDekIsUUFBUSxDQUFDLEtBQUssQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO1NBQzVCO1FBRUQsSUFBSSxTQUFTLEVBQUU7WUFDWCxLQUFLLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztTQUNoQztRQUVELE9BQU8sT0FBTyxDQUFDO0lBQ25CLENBQUM7SUFFTSxNQUFNLENBQUMsTUFBTSxDQUNoQixXQUFrQixFQUNsQixTQUFnQixFQUNoQixRQUFpQjtRQUVqQixJQUFJLFFBQVEsRUFBRTtZQUNWLE1BQU0sT0FBTyxHQUFHLEdBQUcsR0FBRyxXQUFXLENBQUMsR0FBRyxDQUFDO1lBQ3RDLE1BQU0sS0FBSyxHQUFHLEdBQUcsR0FBRyxTQUFTLENBQUMsR0FBRyxDQUFDO1lBQ2xDLE9BQU8sQ0FDSCxNQUFNLENBQUMsWUFBWSxDQUFDLE9BQU8sQ0FBQztnQkFDNUIsQ0FBQyxXQUFXLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztnQkFDckIsTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUM7Z0JBQzFCLENBQUMsU0FBUyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsQ0FDdEIsQ0FBQztTQUNMO2FBQU07WUFDSCxNQUFNLFVBQVUsR0FBRyxFQUFFLENBQUM7WUFDdEIsT0FBTyxDQUNILE1BQU0sQ0FBQyxZQUFZLENBQUMsV0FBVyxDQUFDLEdBQUcsR0FBRyxVQUFVLENBQUM7Z0JBQ2pELENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFDbkMsTUFBTSxDQUFDLFlBQVksQ0FBQyxTQUFTLENBQUMsR0FBRyxHQUFHLFVBQVUsQ0FBQztnQkFDL0MsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQ3BDLENBQUM7U0FDTDtJQUNMLENBQUM7SUFFTSxNQUFNLENBQUMsc0JBQXNCLENBQUMsTUFBYyxFQUFFLFFBQWlCO1FBQ2xFLElBQUksS0FBYSxDQUFDO1FBQ2xCLElBQUksS0FBYSxDQUFDO1FBQ2xCLElBQUksUUFBUSxFQUFFO1lBQ1YsS0FBSyxHQUFHLEdBQUcsR0FBRyxNQUFNLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25DLEtBQUssR0FBRyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQ2pDO2FBQU07WUFDSCxLQUFLLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLENBQUM7WUFDbEMsS0FBSyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1NBQzNDO1FBRUQsT0FBTyxJQUFJLGVBQWUsQ0FBQyxLQUFLLEVBQUUsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZELENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJvYXJkIH0gZnJvbSAnLi4vbW9kZWxzL2JvYXJkJztcclxuaW1wb3J0IHsgQ29sb3IgfSBmcm9tICcuLi9tb2RlbHMvcGllY2VzL2NvbG9yJztcclxuaW1wb3J0IHsgUG9pbnQgfSBmcm9tICcuLi9tb2RlbHMvcGllY2VzL3BvaW50JztcclxuaW1wb3J0IHsgTW92ZVRyYW5zbGF0aW9uIH0gZnJvbSAnLi4vbW9kZWxzL21vdmUtdHJhbnNsYXRpb24nO1xyXG5cclxuZXhwb3J0IGNsYXNzIE1vdmVVdGlscyB7XHJcbiAgICBwdWJsaWMgc3RhdGljIHdpbGxNb3ZlQ2F1c2VDaGVjayhcclxuICAgICAgICBjdXJyZW50Q29sb3I6IENvbG9yLFxyXG4gICAgICAgIHJvdzogbnVtYmVyLFxyXG4gICAgICAgIGNvbDogbnVtYmVyLFxyXG4gICAgICAgIGRlc3RSb3c6IG51bWJlcixcclxuICAgICAgICBkZXN0Q29sOiBudW1iZXIsXHJcbiAgICAgICAgYm9hcmQ6IEJvYXJkXHJcbiAgICApIHtcclxuICAgICAgICBjb25zdCBzcmNQaWVjZSA9IGJvYXJkLmdldFBpZWNlQnlGaWVsZChyb3csIGNvbCk7XHJcbiAgICAgICAgY29uc3QgZGVzdFBpZWNlID0gYm9hcmQuZ2V0UGllY2VCeUZpZWxkKGRlc3RSb3csIGRlc3RDb2wpO1xyXG5cclxuICAgICAgICBpZiAoc3JjUGllY2UpIHtcclxuICAgICAgICAgICAgc3JjUGllY2UucG9pbnQucm93ID0gZGVzdFJvdztcclxuICAgICAgICAgICAgc3JjUGllY2UucG9pbnQuY29sID0gZGVzdENvbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkZXN0UGllY2UpIHtcclxuICAgICAgICAgICAgYm9hcmQucGllY2VzID0gYm9hcmQucGllY2VzLmZpbHRlcigocGllY2UpID0+IHBpZWNlICE9PSBkZXN0UGllY2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb25zdCBpc0JvdW5kID0gYm9hcmQuaXNLaW5nSW5DaGVjayhjdXJyZW50Q29sb3IsIGJvYXJkLnBpZWNlcyk7XHJcblxyXG4gICAgICAgIGlmIChzcmNQaWVjZSkge1xyXG4gICAgICAgICAgICBzcmNQaWVjZS5wb2ludC5jb2wgPSBjb2w7XHJcbiAgICAgICAgICAgIHNyY1BpZWNlLnBvaW50LnJvdyA9IHJvdztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkZXN0UGllY2UpIHtcclxuICAgICAgICAgICAgYm9hcmQucGllY2VzLnB1c2goZGVzdFBpZWNlKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBpc0JvdW5kO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZm9ybWF0KFxyXG4gICAgICAgIHNvdXJjZVBvaW50OiBQb2ludCxcclxuICAgICAgICBkZXN0UG9pbnQ6IFBvaW50LFxyXG4gICAgICAgIHJldmVydGVkOiBib29sZWFuXHJcbiAgICApIHtcclxuICAgICAgICBpZiAocmV2ZXJ0ZWQpIHtcclxuICAgICAgICAgICAgY29uc3Qgc291cmNlWCA9IDEwNCAtIHNvdXJjZVBvaW50LmNvbDtcclxuICAgICAgICAgICAgY29uc3QgZGVzdFggPSAxMDQgLSBkZXN0UG9pbnQuY29sO1xyXG4gICAgICAgICAgICByZXR1cm4gKFxyXG4gICAgICAgICAgICAgICAgU3RyaW5nLmZyb21DaGFyQ29kZShzb3VyY2VYKSArXHJcbiAgICAgICAgICAgICAgICAoc291cmNlUG9pbnQucm93ICsgMSkgK1xyXG4gICAgICAgICAgICAgICAgU3RyaW5nLmZyb21DaGFyQ29kZShkZXN0WCkgK1xyXG4gICAgICAgICAgICAgICAgKGRlc3RQb2ludC5yb3cgKyAxKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGluY3JlbWVudFggPSA5NztcclxuICAgICAgICAgICAgcmV0dXJuIChcclxuICAgICAgICAgICAgICAgIFN0cmluZy5mcm9tQ2hhckNvZGUoc291cmNlUG9pbnQuY29sICsgaW5jcmVtZW50WCkgK1xyXG4gICAgICAgICAgICAgICAgKE1hdGguYWJzKHNvdXJjZVBvaW50LnJvdyAtIDcpICsgMSkgK1xyXG4gICAgICAgICAgICAgICAgU3RyaW5nLmZyb21DaGFyQ29kZShkZXN0UG9pbnQuY29sICsgaW5jcmVtZW50WCkgK1xyXG4gICAgICAgICAgICAgICAgKE1hdGguYWJzKGRlc3RQb2ludC5yb3cgLSA3KSArIDEpXHJcbiAgICAgICAgICAgICk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgdHJhbnNsYXRlQ29vcmRzVG9JbmRleChjb29yZHM6IHN0cmluZywgcmV2ZXJ0ZWQ6IGJvb2xlYW4pIHtcclxuICAgICAgICBsZXQgeEF4aXM6IG51bWJlcjtcclxuICAgICAgICBsZXQgeUF4aXM6IG51bWJlcjtcclxuICAgICAgICBpZiAocmV2ZXJ0ZWQpIHtcclxuICAgICAgICAgICAgeEF4aXMgPSAxMDQgLSBjb29yZHMuY2hhckNvZGVBdCgwKTtcclxuICAgICAgICAgICAgeUF4aXMgPSArY29vcmRzLmNoYXJBdCgxKSAtIDE7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgeEF4aXMgPSBjb29yZHMuY2hhckNvZGVBdCgwKSAtIDk3O1xyXG4gICAgICAgICAgICB5QXhpcyA9IE1hdGguYWJzKCtjb29yZHMuY2hhckF0KDEpIC0gOCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3IE1vdmVUcmFuc2xhdGlvbih4QXhpcywgeUF4aXMsIHJldmVydGVkKTtcclxuICAgIH1cclxufVxyXG4iXX0=