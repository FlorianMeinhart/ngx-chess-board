{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","../../../projects/ngx-chess-board/src/lib/models/pieces/color.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/piece.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/notation-processors/notation-processor-factory.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/point.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/rook.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/king.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/bishop.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/knight.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/pawn.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/queen.ts","../../../projects/ngx-chess-board/src/lib/utils/unicode-constants.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/notation-processors/fen-loader/default-fen-processor.ts","../../../projects/ngx-chess-board/src/lib/models/move-translation.ts","../../../projects/ngx-chess-board/src/lib/utils/move-utils.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/default-pieces-loader.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/notation-processors/pgn-loader/default-pgn-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/draw-point.ts","../../../projects/ngx-chess-board/src/lib/engine/click/click-utils.ts","../../../projects/ngx-chess-board/src/lib/history-move-provider/history-move.ts","../../../projects/ngx-chess-board/src/lib/history-move-provider/history-move-provider.ts","../../../projects/ngx-chess-board/src/lib/utils/constants.ts","../../../projects/ngx-chess-board/src/lib/utils/inputs/piece-icon-input-manager.ts","../../../projects/ngx-chess-board/src/lib/utils/inputs/piece-type-input.ts","../../../projects/ngx-chess-board/src/lib/engine/coords/coords-provider.ts","../../../projects/ngx-chess-board/src/lib/engine/drag/end/default-drag-end-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/drag/end/drag-end-strategy.ts","../../../projects/ngx-chess-board/src/lib/engine/drag/start/default-drag-start-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/drag/start/drag-start-strategy.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/colors/default-color-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/colors/color-strategy.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/draw-provider.ts","../../../projects/ngx-chess-board/src/lib/engine/abstract-engine-facade.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/board-loader.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-state/board-state.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-state/board-state-provider.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/shapes/arrow.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/shapes/circle.ts","../../../projects/ngx-chess-board/src/lib/engine/pgn/default-pgn-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/pgn/pgn-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/piece-decorator/available-move-decorator.ts","../../../projects/ngx-chess-board/src/lib/engine/piece-decorator/piece-abstract-decorator.ts","../../../projects/ngx-chess-board/src/lib/piece-promotion/piece-promotion-resolver.ts","../../../projects/ngx-chess-board/src/lib/engine/utils/piece-factory.ts","../../../projects/ngx-chess-board/src/lib/engine/engine-facade.ts","../../../projects/ngx-chess-board/src/lib/models/board.ts","../../../projects/ngx-chess-board/src/lib/service/ngx-chess-board.service.ts","../../../projects/ngx-chess-board/src/lib/piece-promotion/piece-promotion-modal/piece-promotion-modal.component.ts","../../../projects/ngx-chess-board/src/lib/piece-promotion/piece-promotion-modal/piece-promotion-modal.component.html","../../../projects/ngx-chess-board/src/lib/ngx-chess-board.component.html","../../../projects/ngx-chess-board/src/lib/ngx-chess-board.component.ts","../../../projects/ngx-chess-board/src/lib/ngx-chess-board.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","__","this","constructor","create","__values","o","s","Symbol","iterator","m","i","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","Color","NotationType","Piece","point","color","constant","relValue","board","checkPoints","Point","row","col","isEqual","that","hasCoordsEqual","clone","Rook","_super","_this","isMovedAlready","getPossibleMoves","possiblePoints","isFieldEmpty","j","getPossibleCaptures","isFieldTakenByEnemy","WHITE","BLACK","getCoveredFields","getPieceByField","King","castledAlready","shortCastled","longCastled","isCastling","isFieldUnderAttack","longCastlePossible","isKingInCheck","pieces","leftRook","shortCastlePossible","rightRook","Bishop","Knight","Pawn","reverted","enPassantPoint","enPassantPiece","Math","abs","Queen","UnicodeConstants","WHITE_KING","name","icon","WHITE_QUEEN","WHITE_KNIGHT","WHITE_ROOK","WHITE_PAWN","WHITE_BISHOP","BLACK_KING","BLACK_QUEEN","BLACK_KNIGHT","BLACK_ROOK","BLACK_PAWN","BLACK_BISHOP","DefaultFenProcessor","process","notation","engineFacade","fen","Error","split","pointer","chunk","charAt","match","Number","pawn","setCurrentPlayer","setCastles","setEnPassant","setFullMoveCount","currentWhitePlayer","castleChunk","includes","setRookAlreadyMoved","rook","find","piece","MoveTranslation","xAxis","yAxis","_xAxis","_yAxis","_reverted","defineProperty","MoveUtils","willMoveCauseCheck","currentColor","destRow","destCol","srcPiece","destPiece","filter","isBound","format","sourcePoint","destPoint","sourceX","destX","String","fromCharCode","translateCoordsToIndex","coords","charCodeAt","findPieceByPossibleMovesContaining","indexes","foundPieces","_c","_d","_e","e_2","_f","console","log","findPieceByPossibleCapturesContaining","e_4","formatSingle","getFirstLetterPiece","DefaultPiecesLoader","loadDefaultPieces","calculateFEN","DefaultPgnProcessor","reset","moves","extractMoves","counter","move","promotionIndex","replace","this_1","resolvePromotion","substring","test","resolvePieceByFirstChar","indexOf","resolveByCol","resolveByRow","moves_1","moves_1_1","lastIndexOf","trim","movePiece","hasUpperCase","piecesFirstChar","isShortCastle","removePiece","isLongCastle","char","firstPieceFormat","replacePromotion","promotionChar","NotationProcessorFactory","getProcessor","type","FEN","PGN","getDefaultProcessor","DrawPoint","x","y","ClickUtils","getClickPoint","event","top","height","left","width","floor","getDrawingPoint","tileSize","colorStrategy","ctrl","alt","shift","squareSize","xx","yy","resolve","captured","HistoryMoveProvider","historyMovesSubject$","BehaviorSubject","states","addMove","historyMove","historyMoves","pop","lastHistoryMove","getLastMove","state","getAll","clear","getLastMoveIndex","Constants","DEFAULT_DARK_TILE_COLOR","DEFAULT_LIGHT_TILE_COLOR","DEFAULT_SIZE","MIN_BOARD_SIZE","MAX_BOARD_SIZE","PieceTypeInput","ColorInput","PieceIconInputManager","_defaultIcons","_pieceIconInput","isDefaultIcons","undefined","pieceIconInput","getPieceIcon","isWhite","whiteKingUrl","blackKingUrl","whiteQueenUrl","blackQueenUrl","whiteRookUrl","blackRookUrl","whiteBishopUrl","blackBishopUrl","whiteKnightUrl","blackKnightUrl","whitePawnUrl","blackPawnUrl","loadDefaultData","CoordsProvider","defaultXCoords","defaultYCoords","currentXCoords","currentYCoords","reverse","init","DefaultDragEndProcessor","dragEnded","source","element","nativeElement","style","zIndex","pointerEvents","touchAction","DragEndStrategy","dragEndProcessor","setDragEndProcessor","processor","DefaultDragStartProcessor","dragStarted","position","DragStartStrategy","dragStartProcessor","setDragStartProcessor","DefaultColorProcessor","ColorStrategy","colorProcessor","setColorProcessor","DrawProvider","arrowsSubject$","circlesSubject$","arrows$","asObservable","circles$","circles","arrows","addCircle","circle","reomveCircle","removeCircle","addArrow","arrow","removeArrow","containsCircle","checkCircle","some","containsArrow","checkArrow","AbstractEngineFacade","dragStartStrategy","dragEndStrategy","heightAndWidth","freeMode","drawProvider","pieceIconManager","moveHistoryProvider","checkIfPawnFirstMove","checkIfRookMoved","checkIfKingMoved","getMoveHistory","BoardLoader","notationProcessor","addPieces","loadFEN","loadPGN","pgn","setEngineFacade","setNotationProcessor","BoardState","BoardStateProvider","statesSubject$","getStates","lastState","getLastState","isEmpty","getLastStateIndex","Arrow","start","end","Circle","drawPoint","DefaultPgnProcessor$1","sourcePiece","currentIndex","possibleMoves","possibleCaptures","isEqualByCol","aPiece","bPiece","AbstractPgnProcessor","getPGN","AvailableMoveDecorator","pointClicked","PiecePromotionResolver","resolvePromotionChoice","index","PieceFactory","pieceTypeInput","colorInput","LIGHT","QUEEN","KING","KNIGHT","BISHOP","ROOK","PAWN","EngineFacade","moveChange","_selected","disabling","pgnProcessor","boardLoader","boardStateProvider","undo","lastBoard","saveMoveClone","moveStateProvider","sourceIndexes","destIndexes","getPieceByPoint","prepareActivePiece","isPointInPossibleMoves","isPointInPossibleCaptures","saveClone","lastMoveSrc","lastMoveDest","disableSelection","pieceClicked","activePiece","onPieceClicked","handleClickEvent","isMouseDown","moving","onFreeMode","onMouseDown","button","ctrlKey","isPieceDisabled","altKey","shiftKey","onMouseUp","drawDisabled","dragDisabled","addDrawPoint","toMovePiece","newPoint","HistoryMove","checkIfPawnTakesEnPassant","checkIfPawnEnpassanted","increaseFullMoveCount","checkForPawnPromote","afterMoveActions","toPromotePiece","openPromoteDialog","blackKingChecked","whiteKingChecked","check","checkmate","checkForPossibleMoves","stalemate","checkForPat","lastMove","emit","assign","modal","open","capture","lightDisabled","darkDisabled","crtl","upPoint","fullMoveCount","addPiece","existing_1","createdPiece","Board","isXYInPossibleMoves","isXYInPossibleCaptures","isXYInSourceMove","isXYInDestMove","isXYInActiveMove","forEach","reversePoint","cloneDeep","enemyColor","field","king","getKingByColor","getCastleFENString","sort","join","toUpperCase","getEnPassantFENString","emptyFields","foundPiece","substr","concatedEnPassant","isXYInPointSelection","isKingChecked","NgxChessBoardService","componentMethodCallSource","Subject","componentMethodCalled$","factory","ɵfac","providedIn","PiecePromotionModalComponent","opened","closeCallback","onCloseCallback","display","changeSelection","selectors","viewQuery","rf","ctx","i0.ɵɵelementStart","i0.ɵɵlistener","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵstyleProp","ctx_r11","pieceSize","i0.ɵɵadvance","i0.ɵɵtextInterpolate1","ctx_r12","$event","i0","ɵɵrestoreView","_r18_1","ɵɵnextContext","dragStart","i0.ɵɵproperty","ctx_r13","i_r7","j_r10","ɵɵsanitizeHtml","getCustomPieceIcons","i0.ɵɵtemplate","i0.ɵɵclassProp","ctx_r8","i0.ɵɵelement","i0.ɵɵattribute","arrow_r24","circle_r25","ctx_r4","NgxChessBoardComponent","ngxChessBoardService","darkTileColor","lightTileColor","showCoords","EventEmitter","selected","size","calculatePieceSize","pieceIcons","onRightClick","preventDefault","ngOnChanges","changes","ngOnInit","subscribe","ngAfterViewInit","boardRef","getBoundingClientRect","updateBoard","setFEN","exception","setPGN","getFEN","JSON","parse","ɵɵdirectiveInject","_r26_1","ɵɵreference","i0.ɵɵnamespaceSVG","i0.ɵɵnamespaceHTML","NgxChessBoardModule","forRoot","ngModule","providers","imports","CommonModule","DragDropModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export enum Color {\r\n    WHITE,\r\n    BLACK,\r\n}\r\n","import { AbstractPiece } from '../../engine/piece-decorator/abstract-piece';\r\nimport { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { Point } from './point';\r\n\r\nexport abstract class Piece implements AbstractPiece {\r\n    point: Point;\r\n    color: Color;\r\n    constant: PieceConstant;\r\n    checkPoints: Point[] = [];\r\n    relValue: number;\r\n    board: Board;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        relValue: number,\r\n        board: Board\r\n    ) {\r\n        this.color = color;\r\n        this.constant = constant;\r\n        this.point = point;\r\n        this.relValue = relValue;\r\n        this.board = board;\r\n    }\r\n\r\n    abstract getPossibleMoves(): Point[];\r\n\r\n    abstract getPossibleCaptures(): Point[];\r\n\r\n    abstract getCoveredFields(): Point[]; // zwraca liste punktow ktore sa puste lub istnieje na nich pionek tego samego koloru\r\n}\r\n","import { NotationProcessor } from './notation-processor';\r\nimport {\r\n    DefaultFenProcessor,\r\n} from './fen-loader/default-fen-processor';\r\nimport { DefaultPgnProcessor } from './pgn-loader/default-pgn-processor';\r\n\r\nexport class NotationProcessorFactory {\r\n\r\n    static getProcessor(type: NotationType): NotationProcessor {\r\n        switch (type) {\r\n            case NotationType.FEN:\r\n                return new DefaultFenProcessor();\r\n\r\n            case NotationType.PGN:\r\n                return new DefaultPgnProcessor();\r\n\r\n        }\r\n    }\r\n\r\n    static getDefaultProcessor(): NotationProcessor {\r\n        return new DefaultFenProcessor();\r\n    }\r\n\r\n}\r\n\r\nexport enum NotationType {\r\n    FEN = 1,\r\n    PGN = 2\r\n}\r\n","export class Point {\r\n    row: number;\r\n    col: number;\r\n\r\n    constructor(row: number, col: number) {\r\n        this.row = row;\r\n        this.col = col;\r\n    }\r\n\r\n    isEqual(that: Point) {\r\n        return that && this.row === that.row && this.col === that.col;\r\n    }\r\n\r\n    hasCoordsEqual(row: number, col: number) {\r\n        return row && col && this.row === row && this.col === col;\r\n    }\r\n\r\n    clone() {\r\n        return new Point(this.row, this.col);\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { King } from './king';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Rook extends Piece {\r\n    isMovedAlready = false;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 5, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    col,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    col,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\nimport { Rook } from './rook';\r\n\r\nexport class King extends Piece {\r\n    castledAlready = false;\r\n    shortCastled = false;\r\n    longCastled = false;\r\n    isMovedAlready;\r\n    isCastling = false;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 0, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        // lewo\r\n        if (\r\n            this.board.isFieldEmpty(row, col - 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row, col - 1));\r\n        }\r\n\r\n        // prawo\r\n        if (\r\n            this.board.isFieldEmpty(row, col + 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row, col + 1));\r\n        }\r\n\r\n        // dol\r\n        if (\r\n            this.board.isFieldEmpty(row + 1, col) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col));\r\n        }\r\n\r\n        // gora\r\n        if (\r\n            this.board.isFieldEmpty(row - 1, col) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col));\r\n        }\r\n\r\n        // lewo gora\r\n        if (\r\n            this.board.isFieldEmpty(row - 1, col - 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col - 1));\r\n        }\r\n        // prawo gora\r\n        if (\r\n            this.board.isFieldEmpty(row - 1, col + 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col + 1));\r\n        }\r\n\r\n        // lewo dol\r\n        if (\r\n            this.board.isFieldEmpty(row + 1, col - 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col - 1));\r\n        }\r\n        // prawo dol\r\n        if (\r\n            this.board.isFieldEmpty(row + 1, col + 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col + 1));\r\n        }\r\n\r\n        if (!this.isMovedAlready) {\r\n            let longCastlePossible = true;\r\n            for (let i = col - 1; i > 0; --i) {\r\n                if (\r\n                    !this.board.isFieldEmpty(row, i) ||\r\n                    this.board.isFieldUnderAttack(\r\n                        row,\r\n                        i,\r\n                        this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                    )\r\n                ) {\r\n                    longCastlePossible = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (longCastlePossible && !this.board.isKingInCheck(\r\n                this.color,\r\n                this.board.pieces\r\n            ) && this.board.getPieceByField(row, 0)) {\r\n                const leftRook = this.board.getPieceByField(row, 0);\r\n                if (leftRook instanceof Rook) {\r\n                    if (!leftRook.isMovedAlready) {\r\n                        possiblePoints.push(new Point(row, col - 2));\r\n                    }\r\n                }\r\n            }\r\n\r\n            let shortCastlePossible = true;\r\n            for (let i = col + 1; i < 7; ++i) {\r\n                if (\r\n                    !this.board.isFieldEmpty(row, i) ||\r\n                    this.board.isFieldUnderAttack(\r\n                        row,\r\n                        i,\r\n                        this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                    )\r\n                ) {\r\n                    shortCastlePossible = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (shortCastlePossible && !this.board.isKingInCheck(\r\n                this.color,\r\n                this.board.pieces\r\n            ) && this.board.getPieceByField(row, 7)) {\r\n                const rightRook = this.board.getPieceByField(row, 7);\r\n                if (rightRook instanceof Rook) {\r\n                    if (!rightRook.isMovedAlready) {\r\n                        possiblePoints.push(new Point(row, col + 2));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // lewo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row, col - 1));\r\n        }\r\n\r\n        // prawo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row, col + 1));\r\n        }\r\n\r\n        // dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col));\r\n        }\r\n\r\n        // gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col));\r\n        }\r\n\r\n        // lewo gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col - 1));\r\n        }\r\n        // prawo gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col + 1));\r\n        }\r\n\r\n        // lewo dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col - 1));\r\n        }\r\n        // prawo dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col + 1));\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // lewo\r\n        possiblePoints.push(new Point(row, col - 1));\r\n\r\n        // prawo\r\n        possiblePoints.push(new Point(row, col + 1));\r\n\r\n        // dol\r\n        possiblePoints.push(new Point(row + 1, col));\r\n\r\n        // gora\r\n        possiblePoints.push(new Point(row - 1, col));\r\n\r\n        // lewo gora\r\n        possiblePoints.push(new Point(row - 1, col - 1));\r\n\r\n        // prawo gora\r\n        possiblePoints.push(new Point(row - 1, col + 1));\r\n\r\n        // lewo dol\r\n        possiblePoints.push(new Point(row + 1, col - 1));\r\n\r\n        // prawo dol\r\n        possiblePoints.push(new Point(row + 1, col + 1));\r\n\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { King } from './king';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Bishop extends Piece {\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 3, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures() {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Knight extends Piece {\r\n    isMovedAlready = false;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 3, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // gora -> lewo\r\n        if (this.board.isFieldEmpty(row - 2, col - 1)) {\r\n            possiblePoints.push(new Point(row - 2, col - 1));\r\n        }\r\n\r\n        // gora -> prawo\r\n        if (this.board.isFieldEmpty(row - 2, col + 1)) {\r\n            possiblePoints.push(new Point(row - 2, col + 1));\r\n        }\r\n\r\n        // lewo -> gora\r\n        if (this.board.isFieldEmpty(row - 1, col - 2)) {\r\n            possiblePoints.push(new Point(row - 1, col - 2));\r\n        }\r\n\r\n        // prawo -> gora\r\n        if (this.board.isFieldEmpty(row - 1, col + 2)) {\r\n            possiblePoints.push(new Point(row - 1, col + 2));\r\n        }\r\n\r\n        // lewo -> dol\r\n        if (this.board.isFieldEmpty(row + 1, col - 2)) {\r\n            possiblePoints.push(new Point(row + 1, col - 2));\r\n        }\r\n\r\n        // prawo -> dol\r\n        if (this.board.isFieldEmpty(row + 1, col + 2)) {\r\n            possiblePoints.push(new Point(row + 1, col + 2));\r\n        }\r\n\r\n        // dol -> lewo\r\n        if (this.board.isFieldEmpty(row + 2, col - 1)) {\r\n            possiblePoints.push(new Point(row + 2, col - 1));\r\n        }\r\n\r\n        // dol -> prawo\r\n        if (this.board.isFieldEmpty(row + 2, col + 1)) {\r\n            possiblePoints.push(new Point(row + 2, col + 1));\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // gora -> lewo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 2,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 2, col - 1));\r\n        }\r\n\r\n        // gora -> prawo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 2,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 2, col + 1));\r\n        }\r\n\r\n        // lewo -> gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col - 2,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col - 2));\r\n        }\r\n\r\n        // prawo -> gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col + 2,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col + 2));\r\n        }\r\n\r\n        // lewo -> dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col - 2,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col - 2));\r\n        }\r\n\r\n        // prawo -> dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col + 2,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col + 2));\r\n        }\r\n\r\n        // dol -> lewo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 2,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 2, col - 1));\r\n        }\r\n\r\n        // dol -> prawo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 2,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 2, col + 1));\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // gora -> lewo\r\n        possiblePoints.push(new Point(row - 2, col - 1));\r\n\r\n        // gora -> prawo\r\n        possiblePoints.push(new Point(row - 2, col + 1));\r\n\r\n        // lewo -> gora\r\n        possiblePoints.push(new Point(row - 1, col - 2));\r\n\r\n        // prawo -> gora\r\n        possiblePoints.push(new Point(row - 1, col + 2));\r\n\r\n        // lewo -> dol\r\n        possiblePoints.push(new Point(row + 1, col - 2));\r\n\r\n        // prawo -> dol\r\n        possiblePoints.push(new Point(row + 1, col + 2));\r\n\r\n        // dol -> lewo\r\n        possiblePoints.push(new Point(row + 2, col - 1));\r\n\r\n        // dol -> prawo\r\n        possiblePoints.push(new Point(row + 2, col + 1));\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Pawn extends Piece {\r\n    isMovedAlready = false;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 1, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        if (\r\n            (!this.board.reverted && this.color === Color.WHITE) ||\r\n            (this.board.reverted && this.color === Color.BLACK)\r\n        ) {\r\n            if (this.board.isFieldEmpty(row - 1, col)) {\r\n                possiblePoints.push(new Point(row - 1, col));\r\n\r\n                if (\r\n                    !this.isMovedAlready &&\r\n                    this.board.isFieldEmpty(row - 2, col)\r\n                ) {\r\n                    possiblePoints.push(new Point(row - 2, col));\r\n                }\r\n            }\r\n        } else {\r\n            if (\r\n                /*!board.isFieldTakenByEnemy(row + 1, col, Color.WHITE) &&*/ this.board.isFieldEmpty(\r\n                    row + 1,\r\n                    col\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row + 1, col));\r\n\r\n                if (\r\n                    !this.isMovedAlready &&\r\n                    this.board.isFieldEmpty(row + 2, col)\r\n                ) {\r\n                    possiblePoints.push(new Point(row + 2, col));\r\n                }\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        if (\r\n            (!this.board.reverted && this.color === Color.WHITE) ||\r\n            (this.board.reverted && this.color === Color.BLACK)\r\n        ) {\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row - 1,\r\n                    col - 1,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row - 1, col - 1));\r\n            }\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row - 1,\r\n                    col + 1,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row - 1, col + 1));\r\n            }\r\n        } else {\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row + 1,\r\n                    col - 1,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row + 1, col - 1));\r\n            }\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row + 1,\r\n                    col + 1,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row + 1, col + 1));\r\n            }\r\n        }\r\n\r\n        if (\r\n            this.board.enPassantPoint &&\r\n            this.board.enPassantPiece.color ===\r\n                (this.color === Color.WHITE ? Color.BLACK : Color.WHITE)\r\n        ) {\r\n            if (\r\n                row === this.board.enPassantPiece.point.row &&\r\n                Math.abs(this.board.enPassantPiece.point.col - col) === 1\r\n            ) {\r\n                possiblePoints.push(this.board.enPassantPoint);\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        if (\r\n            (!this.board.reverted && this.color === Color.WHITE) ||\r\n            (this.board.reverted && this.color === Color.BLACK)\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col - 1));\r\n\r\n            possiblePoints.push(new Point(row - 1, col + 1));\r\n        } else {\r\n            possiblePoints.push(new Point(row + 1, col - 1));\r\n\r\n            possiblePoints.push(new Point(row + 1, col + 1));\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { King } from './king';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Queen extends Piece {\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 9, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    col,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    col,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, col) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, col) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(row, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(row, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","export interface PieceConstant {\r\n    name: string;\r\n    icon: string;\r\n}\r\n\r\nexport const UnicodeConstants = {\r\n    WHITE_KING: { name: 'King', icon: '&#x2654;' },\r\n    WHITE_QUEEN: { name: 'Queen', icon: '&#x2655;' },\r\n    WHITE_KNIGHT: { name: 'Knight', icon: '&#x2658' },\r\n    WHITE_ROOK: { name: 'Rook', icon: '&#x2656' },\r\n    WHITE_PAWN: { name: 'Pawn', icon: '&#x2659' },\r\n    WHITE_BISHOP: { name: 'Bishop', icon: '&#x2657' },\r\n\r\n    BLACK_KING: { name: 'King', icon: '&#x265A' },\r\n    BLACK_QUEEN: { name: 'Queen', icon: '&#x265B' },\r\n    BLACK_KNIGHT: { name: 'Knight', icon: '&#x265E' },\r\n    BLACK_ROOK: { name: 'Rook', icon: '&#x265C' },\r\n    BLACK_PAWN: { name: 'Pawn', icon: '&#x265F' },\r\n    BLACK_BISHOP: { name: 'Bishop', icon: '&#x265D' },\r\n};\r\n","import { Board } from '../../../../../models/board';\r\nimport { Bishop } from '../../../../../models/pieces/bishop';\r\nimport { Color } from '../../../../../models/pieces/color';\r\nimport { King } from '../../../../../models/pieces/king';\r\nimport { Knight } from '../../../../../models/pieces/knight';\r\nimport { Pawn } from '../../../../../models/pieces/pawn';\r\nimport { Point } from '../../../../../models/pieces/point';\r\nimport { Queen } from '../../../../../models/pieces/queen';\r\nimport { Rook } from '../../../../../models/pieces/rook';\r\nimport { UnicodeConstants } from '../../../../../utils/unicode-constants';\r\nimport { AbstractEngineFacade } from '../../../../abstract-engine-facade';\r\nimport { NotationProcessor } from '../notation-processor';\r\n\r\nexport class DefaultFenProcessor implements NotationProcessor {\r\n\r\n    public process(notation: string, engineFacade: AbstractEngineFacade): void {\r\n        let fen = notation;\r\n        if (notation) {\r\n            engineFacade.board.reverted = false;\r\n            engineFacade.board.pieces = [];\r\n            const split = fen.split('/');\r\n            for (let i = 0; i < 8; ++i) {\r\n                let pointer = 0;\r\n                for (let j = 0; j < 8; ++j) {\r\n                    const chunk = split[i].charAt(j);\r\n                    if (chunk.match(/[0-9]/)) {\r\n                        pointer += Number(chunk);\r\n                    } else {\r\n                        switch (chunk) {\r\n                            case 'r':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Rook(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_ROOK,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n                            case 'n':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Knight(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_KNIGHT,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n\r\n                                break;\r\n                            case 'b':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Bishop(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_BISHOP,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n                            case 'q':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Queen(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_QUEEN,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n                            case 'k':\r\n                                engineFacade.board.pieces.push(\r\n                                    new King(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_KING,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n                            case 'p': {\r\n                                const pawn = new Pawn(\r\n                                    new Point(i, pointer),\r\n                                    Color.BLACK,\r\n                                    UnicodeConstants.BLACK_PAWN,\r\n                                    engineFacade.board\r\n                                );\r\n                                if (\r\n                                    (pawn.color === Color.BLACK && pawn.point.row !== 1) ||\r\n                                    (pawn.color === Color.WHITE && pawn.point.row !== 6)\r\n                                ) {\r\n                                    pawn.isMovedAlready = true;\r\n                                }\r\n                                engineFacade.board.pieces.push(pawn);\r\n                                break;\r\n                            }\r\n                            case 'R':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Rook(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_ROOK,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n\r\n                                break;\r\n                            case 'N':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Knight(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_KNIGHT,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n\r\n                            case 'B':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Bishop(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_BISHOP,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n\r\n                            case 'Q':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Queen(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_QUEEN,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n\r\n                            case 'K':\r\n                                engineFacade.board.pieces.push(\r\n                                    new King(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_KING,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n\r\n                            case 'P': {\r\n                                const pawn = new Pawn(\r\n                                    new Point(i, pointer),\r\n                                    Color.WHITE,\r\n                                    UnicodeConstants.WHITE_PAWN,\r\n                                    engineFacade.board\r\n                                );\r\n                                if (\r\n                                    (pawn.color === Color.BLACK && pawn.point.row !== 1) ||\r\n                                    (pawn.color === Color.WHITE && pawn.point.row !== 6)\r\n                                ) {\r\n                                    pawn.isMovedAlready = true;\r\n                                }\r\n                                engineFacade.board.pieces.push(pawn);\r\n                                break;\r\n                            }\r\n                        }\r\n                        ++pointer;\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setCurrentPlayer(engineFacade.board, fen);\r\n            this.setCastles(engineFacade.board, fen);\r\n            this.setEnPassant(fen);\r\n            this.setFullMoveCount(fen);\r\n            engineFacade.board.fen = fen;\r\n        } else {\r\n            throw Error('Incorrect FEN provided');\r\n        }\r\n    }\r\n\r\n\r\n    private setCurrentPlayer(board: Board, fen: string) {\r\n        if (fen) {\r\n            const split = fen.split(' ');\r\n            board.currentWhitePlayer = split[1] === 'w';\r\n        }\r\n    }\r\n\r\n    private setCastles(board: Board, fen: string) {\r\n        if (fen) {\r\n            const split = fen.split(' ');\r\n            const castleChunk = split[2];\r\n\r\n            if (!castleChunk.includes('K')) {\r\n                this.setRookAlreadyMoved(board, Color.WHITE, 7);\r\n            }\r\n\r\n            if (!castleChunk.includes('Q')) {\r\n                this.setRookAlreadyMoved(board, Color.WHITE, 0);\r\n            }\r\n\r\n            if (!castleChunk.includes('k')) {\r\n                this.setRookAlreadyMoved(board, Color.BLACK, 7);\r\n            }\r\n\r\n            if (!castleChunk.includes('q')) {\r\n                this.setRookAlreadyMoved(board, Color.BLACK, 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setFullMoveCount(fen: string) {}\r\n\r\n    private setEnPassant(fen: string) {\r\n        if (fen) {\r\n            const split = fen.split(' ');\r\n            const enPassantPoint = split[3];\r\n\r\n            if (enPassantPoint === '-') {\r\n                return;\r\n            }\r\n\r\n            // if()\r\n        }\r\n    }\r\n\r\n    private setRookAlreadyMoved(board: Board, color: Color, col: number) {\r\n        const rook = board.pieces.find(\r\n            (piece) => piece.color === color && piece instanceof Rook && piece.point.col === col\r\n        ) as Rook;\r\n\r\n        if (rook) {\r\n            rook.isMovedAlready = true;\r\n        }\r\n    }\r\n\r\n}\r\n","export class MoveTranslation {\r\n    private _xAxis: number;\r\n    private _yAxis: number;\r\n    private _reverted: boolean;\r\n\r\n    constructor(xAxis: number, yAxis: number, reverted: boolean) {\r\n        this._xAxis = xAxis;\r\n        this._yAxis = yAxis;\r\n        this._reverted = reverted;\r\n    }\r\n\r\n    get xAxis(): number {\r\n        return this._xAxis;\r\n    }\r\n\r\n    set xAxis(value: number) {\r\n        this._xAxis = value;\r\n    }\r\n\r\n    get yAxis(): number {\r\n        return this._yAxis;\r\n    }\r\n\r\n    set yAxis(value: number) {\r\n        this._yAxis = value;\r\n    }\r\n\r\n    get reverted(): boolean {\r\n        return this._reverted;\r\n    }\r\n\r\n    set reverted(value: boolean) {\r\n        this._reverted = value;\r\n    }\r\n}\r\n","import { Board } from '../models/board';\r\nimport { Bishop } from '../models/pieces/bishop';\r\nimport { Color } from '../models/pieces/color';\r\nimport { King } from '../models/pieces/king';\r\nimport { Knight } from '../models/pieces/knight';\r\nimport { Pawn } from '../models/pieces/pawn';\r\nimport { Piece } from '../models/pieces/piece';\r\nimport { Point } from '../models/pieces/point';\r\nimport { MoveTranslation } from '../models/move-translation';\r\nimport { Queen } from '../models/pieces/queen';\r\nimport { Rook } from '../models/pieces/rook';\r\n\r\nexport class MoveUtils {\r\n    public static willMoveCauseCheck(\r\n        currentColor: Color,\r\n        row: number,\r\n        col: number,\r\n        destRow: number,\r\n        destCol: number,\r\n        board: Board\r\n    ) {\r\n        const srcPiece = board.getPieceByField(row, col);\r\n        const destPiece = board.getPieceByField(destRow, destCol);\r\n\r\n        if (srcPiece) {\r\n            srcPiece.point.row = destRow;\r\n            srcPiece.point.col = destCol;\r\n        }\r\n\r\n        if (destPiece) {\r\n            board.pieces = board.pieces.filter((piece) => piece !== destPiece);\r\n        }\r\n        const isBound = board.isKingInCheck(currentColor, board.pieces);\r\n\r\n        if (srcPiece) {\r\n            srcPiece.point.col = col;\r\n            srcPiece.point.row = row;\r\n        }\r\n\r\n        if (destPiece) {\r\n            board.pieces.push(destPiece);\r\n        }\r\n\r\n        return isBound;\r\n    }\r\n\r\n    public static format(\r\n        sourcePoint: Point,\r\n        destPoint: Point,\r\n        reverted: boolean\r\n    ) {\r\n        if (reverted) {\r\n            const sourceX = 104 - sourcePoint.col;\r\n            const destX = 104 - destPoint.col;\r\n            return (\r\n                String.fromCharCode(sourceX) +\r\n                (sourcePoint.row + 1) +\r\n                String.fromCharCode(destX) +\r\n                (destPoint.row + 1)\r\n            );\r\n        } else {\r\n            const incrementX = 97;\r\n            return (\r\n                String.fromCharCode(sourcePoint.col + incrementX) +\r\n                (Math.abs(sourcePoint.row - 7) + 1) +\r\n                String.fromCharCode(destPoint.col + incrementX) +\r\n                (Math.abs(destPoint.row - 7) + 1)\r\n            );\r\n        }\r\n    }\r\n\r\n    public static translateCoordsToIndex(coords: string, reverted: boolean) {\r\n        let xAxis: number;\r\n        let yAxis: number;\r\n        if (reverted) {\r\n            xAxis = 104 - coords.charCodeAt(0);\r\n            yAxis = +coords.charAt(1) - 1;\r\n        } else {\r\n            xAxis = coords.charCodeAt(0) - 97;\r\n            yAxis = Math.abs(+coords.charAt(1) - 8);\r\n        }\r\n\r\n        return new MoveTranslation(xAxis, yAxis, reverted);\r\n    }\r\n\r\n    public static findPieceByPossibleMovesContaining(\r\n        coords: string,\r\n        board: Board,\r\n        color: Color\r\n    ): Piece[] {\r\n        let indexes = this.translateCoordsToIndex(coords, board.reverted);\r\n        let destPoint = new Point(indexes.yAxis, indexes.xAxis);\r\n        let foundPieces = [];\r\n\r\n        for (let piece of board.pieces.filter(piece => piece.color === color)) {\r\n            for (let point of piece.getPossibleMoves()) {\r\n                if (!MoveUtils.willMoveCauseCheck(\r\n                    piece.color,\r\n                    piece.point.row,\r\n                    piece.point.col,\r\n                    indexes.yAxis,\r\n                    indexes.xAxis,\r\n                    board\r\n                ) && point.isEqual(destPoint)) {\r\n                    foundPieces.push(piece);\r\n                }\r\n            }\r\n        }\r\n        if (foundPieces.length === 0) {\r\n            console.log(coords + ' debug');\r\n        }\r\n        return foundPieces;\r\n    }\r\n\r\n    public static findPieceByPossibleCapturesContaining(\r\n        coords: string,\r\n        board: Board,\r\n        color: Color\r\n    ): Piece[] {\r\n        let indexes = this.translateCoordsToIndex(coords, board.reverted);\r\n        let destPoint = new Point(indexes.yAxis, indexes.xAxis);\r\n        let foundPieces = [];\r\n        for (let piece of board.pieces.filter(piece => piece.color === color)) {\r\n            for (let point of piece.getPossibleCaptures()) {\r\n                if (!MoveUtils.willMoveCauseCheck(\r\n                    piece.color,\r\n                    piece.point.row,\r\n                    piece.point.col,\r\n                    indexes.yAxis,\r\n                    indexes.xAxis,\r\n                    board\r\n                ) && point.isEqual(destPoint)) {\r\n                    foundPieces.push(piece);\r\n                }\r\n            }\r\n        }\r\n        if (foundPieces.length === 0) {\r\n            console.log(coords + ' debug');\r\n        }\r\n\r\n        return foundPieces;\r\n    }\r\n\r\n    public static formatSingle(point: Point, reverted: boolean): string {\r\n        if (reverted) {\r\n            const sourceX = 104 - point.col;\r\n            return (\r\n                String.fromCharCode(sourceX) +\r\n                (point.row + 1)\r\n            );\r\n        } else {\r\n            const incrementX = 97;\r\n            return (\r\n                String.fromCharCode(point.col + incrementX) +\r\n                (Math.abs(point.row - 7) + 1)\r\n            );\r\n        }\r\n    }\r\n\r\n    public static getFirstLetterPiece(piece: Piece): string {\r\n        if (piece instanceof Pawn) {\r\n            return 'P';\r\n        } else {\r\n            if (piece instanceof Knight) {\r\n                return 'N';\r\n            } else {\r\n                if (piece instanceof Bishop) {\r\n                    return 'B';\r\n                } else {\r\n                    if (piece instanceof Rook) {\r\n                        return 'R';\r\n                    } else {\r\n                        if (piece instanceof King) {\r\n                            return 'K';\r\n                        } else {\r\n                            if (piece instanceof Queen) {\r\n                                return 'Q';\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n}\r\n","import { Board } from '../../../models/board';\r\nimport { Bishop } from '../../../models/pieces/bishop';\r\nimport { Color } from '../../../models/pieces/color';\r\nimport { King } from '../../../models/pieces/king';\r\nimport { Knight } from '../../../models/pieces/knight';\r\nimport { Pawn } from '../../../models/pieces/pawn';\r\nimport { Point } from '../../../models/pieces/point';\r\nimport { Queen } from '../../../models/pieces/queen';\r\nimport { Rook } from '../../../models/pieces/rook';\r\nimport { UnicodeConstants } from '../../../utils/unicode-constants';\r\n\r\nexport class DefaultPiecesLoader {\r\n\r\n    static loadDefaultPieces(board: Board) {\r\n        board.pieces = [];\r\n        // piony czarne\r\n        for (let i = 0; i < 8; ++i) {\r\n            board.pieces.push(new Pawn(\r\n                new Point(1, i),\r\n                Color.BLACK,\r\n                UnicodeConstants.BLACK_PAWN,\r\n                board\r\n            ));\r\n        }\r\n        board.pieces.push(new Rook(\r\n            new Point(0, 0),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_ROOK,\r\n            board\r\n        ));\r\n        board.pieces.push(new Knight(\r\n            new Point(0, 1),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_KNIGHT,\r\n            board\r\n        ));\r\n        board.pieces.push(new Bishop(\r\n            new Point(0, 2),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_BISHOP,\r\n            board\r\n        ));\r\n        board.pieces.push(new Queen(\r\n            new Point(0, 3),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_QUEEN,\r\n            board\r\n        ));\r\n        board.pieces.push(new King(\r\n            new Point(0, 4),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_KING,\r\n            board\r\n        ));\r\n        board.pieces.push(new Bishop(\r\n            new Point(0, 5),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_BISHOP,\r\n            board\r\n        ));\r\n        board.pieces.push(new Knight(\r\n            new Point(0, 6),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_KNIGHT,\r\n            board\r\n        ));\r\n        board.pieces.push(new Rook(\r\n            new Point(0, 7),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_ROOK,\r\n            board\r\n        ));\r\n\r\n        // piony biale\r\n        for (let i = 0; i < 8; ++i) {\r\n            board.pieces.push(new Pawn(\r\n                new Point(6, i),\r\n                Color.WHITE,\r\n                UnicodeConstants.WHITE_PAWN,\r\n                board\r\n            ));\r\n        }\r\n        board.pieces.push(new Rook(\r\n            new Point(7, 0),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_ROOK,\r\n            board\r\n        ));\r\n        board.pieces.push(new Knight(\r\n            new Point(7, 1),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_KNIGHT,\r\n            board\r\n        ));\r\n        board.pieces.push(new Bishop(\r\n            new Point(7, 2),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_BISHOP,\r\n            board\r\n        ));\r\n        board.pieces.push(new Queen(\r\n            new Point(7, 3),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_QUEEN,\r\n            board\r\n        ));\r\n        board.pieces.push(new King(\r\n            new Point(7, 4),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_KING,\r\n            board\r\n        ));\r\n        board.pieces.push(new Bishop(\r\n            new Point(7, 5),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_BISHOP,\r\n            board\r\n        ));\r\n        board.pieces.push(new Knight(\r\n            new Point(7, 6),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_KNIGHT,\r\n            board\r\n        ));\r\n        board.pieces.push(new Rook(\r\n            new Point(7, 7),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_ROOK,\r\n            board\r\n        ));\r\n\r\n        board.calculateFEN();\r\n\r\n    }\r\n\r\n}\r\n","import { Board } from '../../../../../models/board';\r\nimport { Bishop } from '../../../../../models/pieces/bishop';\r\nimport { Color } from '../../../../../models/pieces/color';\r\nimport { King } from '../../../../../models/pieces/king';\r\nimport { Knight } from '../../../../../models/pieces/knight';\r\nimport { Pawn } from '../../../../../models/pieces/pawn';\r\nimport { Piece } from '../../../../../models/pieces/piece';\r\nimport { Point } from '../../../../../models/pieces/point';\r\nimport { Queen } from '../../../../../models/pieces/queen';\r\nimport { Rook } from '../../../../../models/pieces/rook';\r\nimport { MoveUtils } from '../../../../../utils/move-utils';\r\nimport { AbstractEngineFacade } from '../../../../abstract-engine-facade';\r\nimport { DefaultPiecesLoader } from '../../default-pieces-loader';\r\nimport { NotationProcessor } from '../notation-processor';\r\n\r\nexport class DefaultPgnProcessor implements NotationProcessor {\r\n\r\n    public process(notation: string, engineFacade: AbstractEngineFacade): void {\r\n        if (notation) {\r\n            engineFacade.board.reverted = false;\r\n            engineFacade.board.pieces = [];\r\n            engineFacade.reset();\r\n            DefaultPiecesLoader.loadDefaultPieces(engineFacade.board);\r\n            let moves = this.extractMoves(notation);\r\n            let counter = -1;\r\n            for (let move of moves) {\r\n                ++counter;\r\n                move = move.replace(/[+#]/g, '');\r\n                let promotionIndex = '';\r\n\r\n                if (move.includes('=')) {\r\n                    promotionIndex = this.resolvePromotion(move.substring(move.length - 1));\r\n                    move = move.substring(0, move.length - 2);\r\n                }\r\n\r\n                let color = (counter === 0 || counter % 2 === 0)\r\n                    ? Color.WHITE\r\n                    : Color.BLACK;\r\n\r\n                if (/^[a-z]\\d$/g.test(move)) { // zwykly ruch na wolne pole e4\r\n                    let piece = MoveUtils.findPieceByPossibleMovesContaining(\r\n                        move,\r\n                        engineFacade.board,\r\n                        color\r\n                    ).find(piece => piece instanceof Pawn);\r\n                    if (piece) {\r\n                        engineFacade.move(MoveUtils.formatSingle(\r\n                            piece.point,\r\n                            false\r\n                        ) + move + promotionIndex);\r\n                    } else {\r\n                    }\r\n                } else {\r\n                    if (/^[A-Z][a-h]\\d$/g.test(move)) {// jezeli ma wielka litere, czyli trzeba odszukac ktora figura Nf3\r\n                        let pieces = MoveUtils.findPieceByPossibleMovesContaining(\r\n                            move.substring(1),\r\n                            engineFacade.board,\r\n                            color\r\n                        );\r\n                        let piece = pieces.find(piece => this.resolvePieceByFirstChar(\r\n                            move.charAt(0),\r\n                            piece\r\n                        ));\r\n                        if (piece) {\r\n                            engineFacade.move(MoveUtils.formatSingle(\r\n                                piece.point,\r\n                                false\r\n                            ) + move.substring(1) + promotionIndex);\r\n                        } else {\r\n                        }\r\n                    } else {\r\n                        if ('O-O' === move) {\r\n                            engineFacade.move(color === Color.WHITE ? 'e1g1' : 'e8g8');\r\n                        } else {\r\n                            if (/^[a-z]x[a-z]\\d$/g.test(move)) { //exd5\r\n                                let pieces = MoveUtils.findPieceByPossibleCapturesContaining(\r\n                                    move.substring(move.indexOf('x') + 1),\r\n                                    engineFacade.board,\r\n                                    color\r\n                                ).filter(piece => piece instanceof Pawn);\r\n\r\n                                let piece;\r\n                                if (pieces.length > 1) {\r\n                                    piece = this.resolveByCol(\r\n                                        pieces,\r\n                                        move.substring(0, 1)\r\n                                    );\r\n                                } else {\r\n                                    piece = pieces[0];\r\n                                }\r\n\r\n                                if (piece) {\r\n                                    engineFacade.move(MoveUtils.formatSingle(\r\n                                        piece.point,\r\n                                        false\r\n                                    ) + move.substring(move.indexOf('x') + 1) + promotionIndex);\r\n                                } else {\r\n                                }\r\n                            } else {\r\n                                if (/^[A-Z]x[a-z]\\d$/g.test(move)) {\r\n                                    let piece = MoveUtils.findPieceByPossibleCapturesContaining(\r\n                                        move.substring(move.indexOf('x') + 1),\r\n                                        engineFacade.board,\r\n                                        color\r\n                                    ).find(piece => this.resolvePieceByFirstChar(\r\n                                        move.substring(0, 1),\r\n                                        piece\r\n                                    ));\r\n                                    if (piece) {\r\n                                        engineFacade.move(MoveUtils.formatSingle(\r\n                                            piece.point,\r\n                                            false\r\n                                        ) + move.substring(move.indexOf('x') + 1) + promotionIndex);\r\n                                    } else {\r\n                                    }\r\n                                } else {\r\n                                    if (move === 'O-O-O') {\r\n                                        engineFacade.move(color === Color.WHITE ? 'e1c1' : 'e8c8');\r\n                                    } else {\r\n                                        if (/^[A-Z]\\dx[a-z]\\d$/g.test(move)) {  //Ngxe4 sytuacja 2 skoczkow pion bicie\r\n                                            let pieces = MoveUtils.findPieceByPossibleCapturesContaining(\r\n                                                move.substring(move.indexOf('x') + 1),\r\n                                                engineFacade.board,\r\n                                                color\r\n                                            ).filter(piece => this.resolvePieceByFirstChar(\r\n                                                move.charAt(0),\r\n                                                piece\r\n                                            ));\r\n\r\n                                            let piece = this.resolveByRow(\r\n                                                pieces,\r\n                                                move.substring(1, 2)\r\n                                            );\r\n\r\n                                            if (piece) {\r\n                                                engineFacade.move(MoveUtils.formatSingle(\r\n                                                    piece.point,\r\n                                                    false\r\n                                                ) + move.substring(move.indexOf(\r\n                                                    'x') + 1) + promotionIndex);\r\n                                            }\r\n                                        } else {\r\n                                            if (/^[A-Z][a-z][a-z]\\d$/g.test(move)) { // dwie wieze bez bicia Rac1 pion\r\n                                                let pieces = MoveUtils.findPieceByPossibleMovesContaining(\r\n                                                    move.substring(2, 4),\r\n                                                    engineFacade.board,\r\n                                                    color\r\n                                                ).filter(piece => this.resolvePieceByFirstChar(\r\n                                                    move.charAt(0),\r\n                                                    piece\r\n                                                ));\r\n\r\n                                                let piece = this.resolveByCol(\r\n                                                    pieces,\r\n                                                    move.substring(1, 2)\r\n                                                );\r\n\r\n                                                if (piece) {\r\n                                                    engineFacade.move(MoveUtils.formatSingle(\r\n                                                        piece.point,\r\n                                                        false\r\n                                                    ) + move.substring(\r\n                                                        2,\r\n                                                        4\r\n                                                    ) + promotionIndex);\r\n                                                }\r\n                                            } else {\r\n                                                if (/^[A-Z][a-z]x[a-z]\\d$/g.test(\r\n                                                    move)) {\r\n                                                    let pieces = MoveUtils.findPieceByPossibleCapturesContaining(\r\n                                                        move.substring(move.indexOf(\r\n                                                            'x') + 1),\r\n                                                        engineFacade.board,\r\n                                                        color\r\n                                                    ).filter(piece => this.resolvePieceByFirstChar(\r\n                                                        move.charAt(0),\r\n                                                        piece\r\n                                                    ));\r\n\r\n                                                    let piece = this.resolveByCol(\r\n                                                        pieces,\r\n                                                        move.substring(1, 2)\r\n                                                    );\r\n\r\n                                                    if (piece) {\r\n                                                        engineFacade.move(\r\n                                                            MoveUtils.formatSingle(\r\n                                                                piece.point,\r\n                                                                false\r\n                                                            ) + move.substring(\r\n                                                            move.indexOf(\r\n                                                                'x') + 1) + promotionIndex);\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected extractMoves(notation: string) {\r\n        return notation.substring(notation.lastIndexOf(']') + 1)\r\n            .replace(/[0-9]+\\./g, '')\r\n            .replace(/\\s+/g, ' ')\r\n            .replace(/{[^}]*}/g, '')\r\n            .trim()\r\n            .split(' ')\r\n            .filter(s => s);\r\n    }\r\n\r\n    protected movePiece(piece: Piece, board: Board, move: string) {\r\n        let indexes = MoveUtils.translateCoordsToIndex(move, board.reverted);\r\n        piece.point.col = indexes.xAxis;\r\n        piece.point.row = indexes.yAxis;\r\n    }\r\n\r\n    hasUpperCase(move: string) {\r\n        return /[A-Z]/.test(move);\r\n    }\r\n\r\n    private resolvePieceByFirstChar(move: string, piece: Piece) {\r\n        let piecesFirstChar = '';\r\n        if (piece instanceof King) {\r\n            piecesFirstChar = 'K';\r\n        } else {\r\n            if (piece instanceof Queen) {\r\n                piecesFirstChar = 'Q';\r\n            } else {\r\n                if (piece instanceof Rook) {\r\n                    piecesFirstChar = 'R';\r\n                } else {\r\n                    if (piece instanceof Bishop) {\r\n                        piecesFirstChar = 'B';\r\n                    } else {\r\n                        if (piece instanceof Knight) {\r\n                            piecesFirstChar = 'N';\r\n                        } else {\r\n                            if (piece instanceof Pawn) {\r\n                                piecesFirstChar = 'P';\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return move === piecesFirstChar;\r\n    }\r\n\r\n    private isShortCastle(move: string) {\r\n        return move === 'O-O';\r\n    }\r\n\r\n    private removePiece(coords: string, board: Board) {\r\n        let indexes = MoveUtils.translateCoordsToIndex(coords, board.reverted);\r\n\r\n        board.pieces = board.pieces.filter(e => !e.point.isEqual(new Point(\r\n            indexes.yAxis,\r\n            indexes.xAxis\r\n        )));\r\n    }\r\n\r\n    private isLongCastle(move: string) {\r\n        return move === 'O-O-O';\r\n    }\r\n\r\n    private resolveByCol(pieces: Piece[], char: string): Piece {\r\n        let firstPieceFormat = MoveUtils.formatSingle(pieces[0].point, false);\r\n        let secondPieceFormat = MoveUtils.formatSingle(pieces[1].point, false);\r\n        return firstPieceFormat.substring(0, 1) === char\r\n            ? pieces[0]\r\n            : pieces[1];\r\n    }\r\n\r\n    private resolveByRow(pieces: Piece[], char: string) {\r\n        let firstPieceFormat = MoveUtils.formatSingle(pieces[0].point, false);\r\n        let secondPieceFormat = MoveUtils.formatSingle(pieces[1].point, false);\r\n        return firstPieceFormat.substring(1, 2) === char\r\n            ? pieces[0]\r\n            : pieces[1];\r\n    }\r\n\r\n    private replacePromotion(move: string) {\r\n        return move\r\n            .replace('=Q', '1')\r\n            .replace('=R', '2')\r\n            .replace('=B', '3')\r\n            .replace('=K', '4');\r\n    }\r\n\r\n    private resolvePromotion(promotionChar: string) {\r\n        switch (promotionChar) {\r\n            case 'Q':\r\n                return '1';\r\n            case 'R':\r\n                return '2';\r\n            case 'B':\r\n                return '3';\r\n            case 'N':\r\n                return '4';\r\n        }\r\n        return '';\r\n    }\r\n}\r\n","export class DrawPoint {\r\n    x: number;\r\n    y: number;\r\n    color: string;\r\n\r\n    constructor(x: number, y: number, color: string) {\r\n        this.x = x + 0.5;\r\n        this.y = y + 0.5;\r\n        this.color = color;\r\n    }\r\n\r\n    isEqual(that: DrawPoint) {\r\n        return that && that.x === this.x && this.y === that.y;\r\n    }\r\n}\r\n","import { Point } from '../../models/pieces/point';\r\nimport { ColorStrategy } from '../drawing-tools/colors/color-strategy';\r\nimport { DrawPoint } from '../drawing-tools/draw-point';\r\n\r\nexport class ClickUtils {\r\n\r\n    static getClickPoint(\r\n        event: any,\r\n        top: number,\r\n        height: number,\r\n        left: number,\r\n        width: number\r\n    ) {\r\n        return new Point(\r\n            Math.floor((event.y - top) / (height / 8)),\r\n            Math.floor((event.x - left) / (width / 8)\r\n            )\r\n        );\r\n    }\r\n\r\n    static getDrawingPoint(\r\n        tileSize: number,\r\n        colorStrategy: ColorStrategy,\r\n        x: number,\r\n        y: number,\r\n        ctrl: boolean,\r\n        alt: boolean,\r\n        shift: boolean,\r\n        xAxis: number,\r\n        yAxis: number\r\n    ) {\r\n        const squareSize = tileSize / 8;\r\n        const xx = Math.floor(\r\n            (x - xAxis) /\r\n            squareSize\r\n        );\r\n        const yy = Math.floor(\r\n            (y - yAxis) /\r\n            squareSize\r\n        );\r\n\r\n        let color = colorStrategy.resolve(ctrl, shift, alt);\r\n\r\n        return new DrawPoint(\r\n            Math.floor(xx * squareSize + squareSize / 2),\r\n            Math.floor(yy * squareSize + squareSize / 2),\r\n            color\r\n        );\r\n    }\r\n\r\n}\r\n","export class HistoryMove {\r\n    move: string;\r\n    piece: string;\r\n    color: string;\r\n    x: boolean;\r\n\r\n    constructor(move: string, piece: string, color: string, captured: boolean) {\r\n        this.move = move;\r\n        this.piece = piece;\r\n        this.color = color;\r\n        this.x = captured;\r\n    }\r\n}\r\n","import { BehaviorSubject } from 'rxjs';\r\nimport { HistoryMove } from './history-move';\r\n\r\nexport class HistoryMoveProvider {\r\n    historyMovesSubject$ = new BehaviorSubject<HistoryMove[]>([]);\r\n\r\n    get historyMoves(): HistoryMove[] {\r\n        return this.historyMovesSubject$.value;\r\n    }\r\n\r\n    set historyMoves(states: HistoryMove[]) {\r\n        this.historyMovesSubject$.next(states);\r\n    }\r\n\r\n    addMove(historyMove: HistoryMove) {\r\n        this.historyMoves = [...this.historyMoves, historyMove];\r\n    }\r\n\r\n    pop(): HistoryMove {\r\n        const lastHistoryMove = this.getLastMove();\r\n        this.historyMoves = this.historyMoves.filter(\r\n            (state) => state !== lastHistoryMove\r\n        );\r\n        return lastHistoryMove;\r\n    }\r\n\r\n    getAll() {\r\n        return this.historyMoves;\r\n    }\r\n\r\n    clear() {\r\n        this.historyMoves = [];\r\n    }\r\n\r\n    getLastMove() {\r\n        return this.historyMoves[this.getLastMoveIndex()];\r\n    }\r\n\r\n    getLastMoveIndex() {\r\n        return this.historyMoves.length - 1;\r\n    }\r\n}\r\n","export class Constants {\n    static readonly DEFAULT_DARK_TILE_COLOR = 'rgb(97, 84, 61)';\n    static readonly DEFAULT_LIGHT_TILE_COLOR = '#BAA378';\n\n    static readonly DEFAULT_SIZE = 500;\n    static readonly MIN_BOARD_SIZE = 100;\n    static readonly MAX_BOARD_SIZE = 4000;\n\n}\n","import { Bishop } from '../../models/pieces/bishop';\r\nimport { Color } from '../../models/pieces/color';\r\nimport { King } from '../../models/pieces/king';\r\nimport { Knight } from '../../models/pieces/knight';\r\nimport { Pawn } from '../../models/pieces/pawn';\r\nimport { Piece } from '../../models/pieces/piece';\r\nimport { Queen } from '../../models/pieces/queen';\r\nimport { Rook } from '../../models/pieces/rook';\r\nimport { PieceIconInput } from './piece-icon-input';\r\n\r\nexport class PieceIconInputManager {\r\n\r\n    private _defaultIcons: boolean = false;\r\n    private _pieceIconInput: PieceIconInput;\r\n\r\n    get pieceIconInput(): PieceIconInput {\r\n        return this._pieceIconInput;\r\n    }\r\n\r\n    set pieceIconInput(value: PieceIconInput) {\r\n        this._pieceIconInput = value;\r\n    }\r\n\r\n\r\n    get defaultIcons(): boolean {\r\n        return this._defaultIcons;\r\n    }\r\n\r\n    set defaultIcons(value: boolean) {\r\n        this._defaultIcons = value;\r\n    }\r\n\r\n    isDefaultIcons(): boolean {\r\n        return this.pieceIconInput === undefined || this.pieceIconInput === null;\r\n    }\r\n\r\n    getPieceIcon(piece: Piece): string {\r\n        let isWhite = (piece.color === Color.WHITE);\r\n        switch (piece.constructor) {\r\n            case King:\r\n                return isWhite ? this.pieceIconInput.whiteKingUrl : this.pieceIconInput.blackKingUrl;\r\n            case Queen:\r\n                return isWhite ? this.pieceIconInput.whiteQueenUrl : this.pieceIconInput.blackQueenUrl;\r\n            case Rook:\r\n                return isWhite ? this.pieceIconInput.whiteRookUrl : this.pieceIconInput.blackRookUrl;\r\n            case Bishop:\r\n                return isWhite ? this.pieceIconInput.whiteBishopUrl : this.pieceIconInput.blackBishopUrl;\r\n            case Knight:\r\n                return isWhite ? this.pieceIconInput.whiteKnightUrl : this.pieceIconInput.blackKnightUrl;\r\n            case Pawn:\r\n                return isWhite ? this.pieceIconInput.whitePawnUrl : this.pieceIconInput.blackPawnUrl;\r\n        }\r\n    }\r\n\r\n    loadDefaultData(){\r\n        this.pieceIconInput = {\r\n            blackBishopUrl: '',\r\n            blackKingUrl: '',\r\n            blackKnightUrl: '',\r\n            blackQueenUrl: '',\r\n            blackRookUrl: '',\r\n            whiteBishopUrl: '',\r\n            whiteKingUrl: '',\r\n            whiteKnightUrl: '',\r\n            whitePawnUrl: '',\r\n            whiteQueenUrl: '',\r\n            whiteRookUrl: '',\r\n            blackPawnUrl: 'a'\r\n        }\r\n    }\r\n\r\n}\r\n","export enum PieceTypeInput {\r\n\r\n    KING = 1,\r\n    QUEEN = 2,\r\n    BISHOP = 3,\r\n    KNIGHT = 4,\r\n    ROOK = 5,\r\n    PAWN = 6\r\n\r\n}\r\n\r\nexport enum ColorInput {\r\n\r\n    LIGHT = 1,\r\n    DARK = 2\r\n\r\n}\r\n","export class CoordsProvider {\r\n    private readonly defaultXCoords: string[] = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\r\n\r\n    private readonly defaultYCoords: number[] = [8, 7, 6, 5, 4, 3, 2, 1];\r\n\r\n    private currentXCoords: string[] = [...this.defaultXCoords];\r\n    private currentYCoords: number[] = [...this.defaultYCoords];\r\n\r\n    get xCoords(): string[] {\r\n        return this.currentXCoords;\r\n    }\r\n\r\n    get yCoords(): number[] {\r\n        return this.currentYCoords;\r\n    }\r\n\r\n    reverse() {\r\n        this.currentXCoords = this.currentXCoords.reverse();\r\n        this.currentYCoords = this.currentYCoords.reverse();\r\n    }\r\n\r\n    reset() {\r\n        this.init();\r\n    }\r\n\r\n    private init() {\r\n        this.currentXCoords = [...this.defaultXCoords];\r\n        this.currentYCoords = [...this.defaultYCoords];\r\n    }\r\n}\r\n","import { CdkDragEnd, CdkDragStart } from '@angular/cdk/drag-drop';\r\nimport { DragEndProcessor } from './drag-end-processor';\r\n\r\nexport class DefaultDragEndProcessor implements DragEndProcessor {\r\n\r\n    dragEnded(event: CdkDragEnd) {\r\n        event.source.reset();\r\n        event.source.element.nativeElement.style.zIndex = '0';\r\n        event.source.element.nativeElement.style.pointerEvents = 'auto';\r\n        event.source.element.nativeElement.style.touchAction = 'auto';\r\n    }\r\n\r\n}\r\n","import { CdkDragEnd } from '@angular/cdk/drag-drop';\r\nimport { DefaultDragEndProcessor } from './default-drag-end-processor';\r\nimport { DragEndProcessor } from './drag-end-processor';\r\n\r\nexport class DragEndStrategy {\r\n\r\n    private dragEndProcessor: DragEndProcessor;\r\n\r\n    constructor() {\r\n        this.dragEndProcessor = new DefaultDragEndProcessor();\r\n    }\r\n\r\n    public process(event: CdkDragEnd): void {\r\n        this.dragEndProcessor.dragEnded(event);\r\n    }\r\n\r\n    setDragEndProcessor(processor: DragEndProcessor) {\r\n        this.dragEndProcessor = processor;\r\n    }\r\n\r\n}\r\n","import { CdkDragStart } from '@angular/cdk/drag-drop';\nimport { DragStartProcessor } from './drag-start-processor';\n\nexport class DefaultDragStartProcessor implements DragStartProcessor {\n\n    dragStarted(event: CdkDragStart) {\n        const style = event.source.element.nativeElement.style;\n        style.position = 'relative';\n        style.zIndex = '1000';\n        style.touchAction = 'none';\n        style.pointerEvents = 'none';\n    }\n\n}\n","import { CdkDragStart } from '@angular/cdk/drag-drop';\r\nimport { DefaultDragStartProcessor } from './default-drag-start-processor';\r\nimport { DragStartProcessor } from './drag-start-processor';\r\n\r\nexport class DragStartStrategy {\r\n\r\n    private dragStartProcessor: DragStartProcessor;\r\n\r\n    constructor() {\r\n        this.dragStartProcessor = new DefaultDragStartProcessor();\r\n    }\r\n\r\n    public process(event: CdkDragStart): void {\r\n        this.dragStartProcessor.dragStarted(event);\r\n    }\r\n\r\n    setDragStartProcessor(processor: DragStartProcessor) {\r\n        this.dragStartProcessor = processor;\r\n    }\r\n\r\n}\r\n","import { ColorProcessor } from './color-processor';\r\n\r\nexport class DefaultColorProcessor implements ColorProcessor{\r\n\r\n    resolve(ctrl: any, shift: any, alt: any): string{\r\n        let color = 'green';\r\n\r\n        if (ctrl || shift) {\r\n            color = 'red';\r\n        }\r\n        if (alt) {\r\n            color = 'blue';\r\n        }\r\n        if ((shift || ctrl) && alt) {\r\n            color = 'orange';\r\n        }\r\n\r\n        return color;\r\n    }\r\n\r\n}\r\n","import { ColorProcessor } from './color-processor';\r\nimport { DefaultColorProcessor } from './default-color-processor';\r\n\r\nexport class ColorStrategy {\r\n\r\n    colorProcessor: ColorProcessor;\r\n\r\n    constructor() {\r\n        this.colorProcessor = new DefaultColorProcessor();\r\n    }\r\n\r\n    resolve(ctrl: any, shift: any, alt: any) {\r\n        return this.colorProcessor.resolve(ctrl, shift, alt);\r\n    }\r\n\r\n    setColorProcessor(colorProcessor: ColorProcessor) {\r\n        this.colorProcessor = colorProcessor;\r\n    }\r\n\r\n}\r\n","import { BehaviorSubject } from 'rxjs';\r\nimport { Arrow } from './shapes/arrow';\r\nimport { Circle } from './shapes/circle';\r\n\r\nexport class DrawProvider {\r\n    private arrowsSubject$ = new BehaviorSubject<Arrow[]>([]);\r\n    private circlesSubject$ = new BehaviorSubject<Circle[]>([]);\r\n\r\n    public arrows$ = this.arrowsSubject$.asObservable();\r\n    public circles$ = this.circlesSubject$.asObservable();\r\n\r\n    private get circles(): Circle[] {\r\n        return this.circlesSubject$.value;\r\n    }\r\n\r\n    private set circles(circles: Circle[]) {\r\n        this.circlesSubject$.next(circles);\r\n    }\r\n\r\n    private get arrows(): Arrow[] {\r\n        return this.arrowsSubject$.value;\r\n    }\r\n\r\n    private set arrows(arrows: Arrow[]) {\r\n        this.arrowsSubject$.next(arrows);\r\n    }\r\n\r\n    addCircle(circle: Circle) {\r\n        this.circles = [...this.circles, circle];\r\n    }\r\n\r\n    reomveCircle(removeCircle: Circle) {\r\n        this.circles = this.circles.filter((circle) => !circle.isEqual(removeCircle));\r\n    }\r\n\r\n    addArrow(arrow: Arrow) {\r\n        this.arrows = [...this.arrows, arrow];\r\n    }\r\n\r\n    removeArrow(removeArrow: Arrow) {\r\n        this.arrows = this.arrows.filter((arrow) => !arrow.isEqual(removeArrow));\r\n    }\r\n\r\n    containsCircle(checkCircle: Circle) {\r\n        return this.circles.some((circle) => circle.isEqual(checkCircle));\r\n    }\r\n\r\n    containsArrow(checkArrow: Arrow) {\r\n        return this.arrows.some((arrow: Arrow) => arrow.isEqual(checkArrow));\r\n    }\r\n\r\n    clear() {\r\n        this.arrows = [];\r\n        this.circles = [];\r\n    }\r\n}\r\n","import { PiecePromotionModalComponent } from '../piece-promotion/piece-promotion-modal/piece-promotion-modal.component';\r\nimport { HistoryMove } from '../history-move-provider/history-move';\r\nimport { HistoryMoveProvider } from '../history-move-provider/history-move-provider';\r\nimport { Board } from '../models/board';\r\nimport { King } from '../models/pieces/king';\r\nimport { Pawn } from '../models/pieces/pawn';\r\nimport { Piece } from '../models/pieces/piece';\r\nimport { Point } from '../models/pieces/point';\r\nimport { Rook } from '../models/pieces/rook';\r\nimport { Constants } from '../utils/constants';\r\nimport { PieceIconInputManager } from '../utils/inputs/piece-icon-input-manager';\r\nimport { ColorInput, PieceTypeInput } from '../utils/inputs/piece-type-input';\r\nimport { BoardLoader } from './board-state-provider/board-loader/board-loader';\r\nimport { CoordsProvider } from './coords/coords-provider';\r\nimport { DragEndStrategy } from './drag/end/drag-end-strategy';\r\nimport { DragStartStrategy } from './drag/start/drag-start-strategy';\r\nimport { ColorStrategy } from './drawing-tools/colors/color-strategy';\r\nimport { DrawProvider } from './drawing-tools/draw-provider';\r\n\r\nexport abstract class AbstractEngineFacade {\r\n\r\n    public dragStartStrategy: DragStartStrategy = new DragStartStrategy();\r\n    public dragEndStrategy: DragEndStrategy = new DragEndStrategy();\r\n    protected colorStrategy: ColorStrategy = new ColorStrategy();\r\n\r\n    public coords: CoordsProvider = new CoordsProvider();\r\n    public heightAndWidth: number = Constants.DEFAULT_SIZE;\r\n\r\n    public freeMode = false;\r\n    public dragDisabled: boolean;\r\n    public drawDisabled: boolean;\r\n    public lightDisabled: boolean;\r\n    public darkDisabled: boolean;\r\n    public board: Board;\r\n    public modal: PiecePromotionModalComponent;\r\n    public boardLoader: BoardLoader;\r\n    public drawProvider: DrawProvider = new DrawProvider();\r\n    public pieceIconManager: PieceIconInputManager = new PieceIconInputManager();\r\n    public moveHistoryProvider: HistoryMoveProvider = new HistoryMoveProvider();\r\n\r\n    protected constructor(board: Board) {\r\n        this.board = board;\r\n    }\r\n\r\n    public abstract reset(): void;\r\n\r\n    public abstract undo(): void;\r\n\r\n    public abstract move(coords: string): void;\r\n\r\n    public abstract addPiece(\r\n        pieceTypeInput: PieceTypeInput,\r\n        colorInput: ColorInput,\r\n        coords: string\r\n    ): void;\r\n\r\n    public abstract onMouseUp(\r\n        event: MouseEvent,\r\n        pointClicked: Point,\r\n        left: number,\r\n        top: number\r\n    ): void;\r\n\r\n    public abstract onMouseDown(\r\n        event: MouseEvent,\r\n        pointClicked: Point,\r\n        left?: number,\r\n        top?: number\r\n    ): void;\r\n\r\n    public checkIfPawnFirstMove(piece: Piece) {\r\n        if (piece instanceof Pawn) {\r\n            piece.isMovedAlready = true;\r\n        }\r\n    }\r\n\r\n    public checkIfRookMoved(piece: Piece) {\r\n        if (piece instanceof Rook) {\r\n            piece.isMovedAlready = true;\r\n        }\r\n    }\r\n\r\n    public checkIfKingMoved(piece: Piece) {\r\n        if (piece instanceof King) {\r\n            piece.isMovedAlready = true;\r\n        }\r\n    }\r\n\r\n    public getMoveHistory(): HistoryMove[] {\r\n        return this.moveHistoryProvider.getAll();\r\n    }\r\n\r\n}\r\n","import { Board } from '../../../models/board';\r\nimport { Bishop } from '../../../models/pieces/bishop';\r\nimport { Color } from '../../../models/pieces/color';\r\nimport { King } from '../../../models/pieces/king';\r\nimport { Knight } from '../../../models/pieces/knight';\r\nimport { Pawn } from '../../../models/pieces/pawn';\r\nimport { Point } from '../../../models/pieces/point';\r\nimport { Queen } from '../../../models/pieces/queen';\r\nimport { Rook } from '../../../models/pieces/rook';\r\nimport { UnicodeConstants } from '../../../utils/unicode-constants';\r\nimport { AbstractEngineFacade } from '../../abstract-engine-facade';\r\nimport { DefaultPiecesLoader } from './default-pieces-loader';\r\nimport { NotationProcessor } from './notation-processors/notation-processor';\r\nimport { NotationProcessorFactory } from './notation-processors/notation-processor-factory';\r\n\r\nexport class BoardLoader {\r\n\r\n    private engineFacade: AbstractEngineFacade;\r\n    private notationProcessor: NotationProcessor;\r\n\r\n    constructor(engineFacade: AbstractEngineFacade, notationProcessor?: NotationProcessor) {\r\n        this.engineFacade = engineFacade;\r\n\r\n        if (notationProcessor) {\r\n            this.notationProcessor = notationProcessor;\r\n        } else {\r\n            this.notationProcessor = NotationProcessorFactory.getDefaultProcessor();\r\n        }\r\n\r\n    }\r\n\r\n    addPieces() {\r\n        DefaultPiecesLoader.loadDefaultPieces(this.engineFacade.board);\r\n    }\r\n\r\n    loadFEN(fen: string) {\r\n        this.notationProcessor.process(fen, this.engineFacade);\r\n    }\r\n\r\n    loadPGN(pgn: string) {\r\n        this.notationProcessor.process(pgn, this.engineFacade)\r\n    }\r\n\r\n    setEngineFacade(engineFacade: AbstractEngineFacade) {\r\n        this.engineFacade = engineFacade;\r\n    }\r\n\r\n    setNotationProcessor(notationProcessor: NotationProcessor) {\r\n        this.notationProcessor = notationProcessor;\r\n    }\r\n\r\n}\r\n","import { Board } from '../../../models/board';\r\n\r\nexport class BoardState {\r\n\r\n    board: Board;\r\n\r\n    constructor(board: Board) {\r\n        this.board = board;\r\n    }\r\n\r\n}\r\n","import { BehaviorSubject } from 'rxjs';\r\nimport { BoardState } from './board-state';\r\n\r\nexport class BoardStateProvider {\r\n    statesSubject$ = new BehaviorSubject<BoardState[]>([]);\r\n\r\n    get states(): BoardState[] {\r\n        return this.statesSubject$.value;\r\n    }\r\n\r\n    set states(states: BoardState[]) {\r\n        this.statesSubject$.next(states);\r\n    }\r\n\r\n    addMove(state: BoardState) {\r\n        this.states = [...this.states, state];\r\n    }\r\n\r\n    getStates(): BoardState[] {\r\n        return this.states;\r\n    }\r\n\r\n    pop(): BoardState {\r\n        const lastState = this.getLastState();\r\n        this.states = this.states.filter((state) => state !== lastState);\r\n        return lastState;\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.states.length === 0;\r\n    }\r\n\r\n    clear() {\r\n        this.states = [];\r\n    }\r\n\r\n    getLastState() {\r\n        return this.states[this.getLastStateIndex()];\r\n    }\r\n\r\n    getLastStateIndex(): number {\r\n        return this.states.length - 1;\r\n    }\r\n}\r\n","import { DrawPoint } from '../draw-point';\r\n\r\nexport class Arrow {\r\n    start: DrawPoint;\r\n    end: DrawPoint;\r\n\r\n    isEqual(arrow: Arrow) {\r\n        return arrow && this.start.isEqual(arrow.start) && this.end.isEqual(arrow.end);\r\n    }\r\n}\r\n","import { DrawPoint } from '../draw-point';\r\n\r\nexport class Circle {\r\n    drawPoint: DrawPoint;\r\n\r\n    isEqual(circle: Circle) {\r\n        return circle && this.drawPoint.isEqual(circle.drawPoint);\r\n    }\r\n}\r\n","import { Board } from '../../models/board';\nimport { King } from '../../models/pieces/king';\nimport { Pawn } from '../../models/pieces/pawn';\nimport { Piece } from '../../models/pieces/piece';\nimport { Point } from '../../models/pieces/point';\nimport { MoveUtils } from '../../utils/move-utils';\nimport { AbstractPgnProcessor } from './pgn-processor';\n\nexport class DefaultPgnProcessor extends AbstractPgnProcessor {\n\n    public process(\n        board: Board,\n        sourcePiece: Piece,\n        destPoint: Point,\n        destPiece?: Piece\n    ): void {\n        this.currentIndex += 0.5;\n        this.pgn += (this.currentIndex % Math.floor(this.currentIndex) === 0) ? (' ' + this.currentIndex + '. ') : ' ';\n\n        let possibleCaptures = [];\n        let possibleMoves = [];\n\n        if (destPiece) {\n            console.log('dest');\n            possibleCaptures = MoveUtils.findPieceByPossibleCapturesContaining(\n                MoveUtils.formatSingle(destPoint, board.reverted),\n                board,\n                sourcePiece.color\n            ).filter(piece => piece.constructor.name === sourcePiece.constructor.name);\n        }\n        possibleMoves = MoveUtils.findPieceByPossibleMovesContaining(\n            MoveUtils.formatSingle(destPoint, board.reverted),\n            board,\n            sourcePiece.color\n        ).filter(piece => piece.constructor.name === sourcePiece.constructor.name);\n\n        if (sourcePiece instanceof Pawn && !destPiece && possibleCaptures.length === 0) {\n            this.pgn += MoveUtils.formatSingle(destPoint, board.reverted);\n        } else {\n            if (sourcePiece instanceof Pawn && destPiece) {\n                this.pgn += MoveUtils.formatSingle(\n                    sourcePiece.point,\n                    board.reverted\n                ).substring(0, 1) + 'x' + MoveUtils.formatSingle(\n                    destPoint,\n                    board.reverted\n                );\n            } else {\n                if (sourcePiece instanceof King && (Math.abs(sourcePiece.point.col - destPoint.col) === 2)) {\n                    if (board.reverted) {\n                        this.pgn += destPoint.col < 2\n                            ? 'O-O'\n                            : 'O-O-O';\n                    } else {\n                        this.pgn += destPoint.col < 3\n                            ? 'O-O-O'\n                            : 'O-O';\n                    }\n                } else {\n                    if (!(sourcePiece instanceof Pawn) && possibleCaptures.length === 0 && possibleMoves.length < 2) {     // Nf3\n                        this.pgn += MoveUtils.getFirstLetterPiece(sourcePiece) + MoveUtils.formatSingle(\n                            destPoint,\n                            board.reverted\n                        );\n                    } else {\n                        if (possibleMoves && possibleMoves.length === 2 && possibleCaptures.length === 0) {    // Nbd7\n                            if (this.isEqualByCol(\n                                possibleMoves[0],\n                                possibleMoves[1]\n                            )) {\n                                this.pgn += MoveUtils.getFirstLetterPiece(\n                                    sourcePiece) + sourcePiece.point.row + MoveUtils.formatSingle(\n                                    destPoint,\n                                    board.reverted\n                                );\n                            } else {\n                                this.pgn += MoveUtils.getFirstLetterPiece(\n                                    sourcePiece) + sourcePiece.point.col + MoveUtils.formatSingle(\n                                    destPoint,\n                                    board.reverted\n                                );\n                            }\n                        } else {\n                            if (possibleCaptures.length > 1) {\n                                if (this.isEqualByCol(\n                                    possibleCaptures[0],\n                                    possibleCaptures[1]\n                                )) {\n                                    this.pgn += MoveUtils.getFirstLetterPiece(\n                                        sourcePiece) + sourcePiece.point.row + 'x' + MoveUtils.formatSingle(\n                                        destPoint,\n                                        board.reverted\n                                    );\n                                } else {\n                                    this.pgn += MoveUtils.getFirstLetterPiece(\n                                        sourcePiece) + sourcePiece.point.col + 'x' + MoveUtils.formatSingle(\n                                        destPoint,\n                                        board.reverted\n                                    );\n                                }\n                            } else {\n                                this.pgn += MoveUtils.getFirstLetterPiece(\n                                    sourcePiece) + 'x' + MoveUtils.formatSingle(\n                                    destPoint, board.reverted\n                                );\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        this.pgn = this.pgn.trim();\n        console.log(this.pgn);\n    }\n\n    private resolvePieceByFirstChar(move: string, piece: Piece) {\n        return MoveUtils.getFirstLetterPiece(piece) === move;\n    }\n\n    private isEqualByCol(aPiece: Piece, bPiece: Piece) {\n        return aPiece.point.col === bPiece.point.col;\n    }\n\n}\n","import { Board } from '../../models/board';\r\nimport { Piece } from '../../models/pieces/piece';\r\nimport { Point } from '../../models/pieces/point';\r\n\r\nexport abstract class AbstractPgnProcessor {\r\n\r\n    protected pgn = '';\r\n    protected currentIndex = 0.5;\r\n\r\n    public abstract process(\r\n        board: Board,\r\n        sourcePiece: Piece,\r\n        destPoint: Point,\r\n        destPiece?: Piece\r\n    ): void;\r\n\r\n    public getPGN() {\r\n        return this.pgn;\r\n    }\r\n\r\n}\r\n","import { Board } from '../../models/board';\r\nimport { Color } from '../../models/pieces/color';\r\nimport { Point } from '../../models/pieces/point';\r\nimport { MoveUtils } from '../../utils/move-utils';\r\nimport { AbstractPiece } from './abstract-piece';\r\nimport { PieceAbstractDecorator } from './piece-abstract-decorator';\r\n\r\nexport class AvailableMoveDecorator extends PieceAbstractDecorator {\r\n    private pointClicked: Point;\r\n    private color: Color;\r\n    private board: Board;\r\n\r\n    constructor(piece: AbstractPiece, pointClicked: Point, color: Color, board: Board) {\r\n        super(piece);\r\n        this.pointClicked = pointClicked;\r\n        this.color = color;\r\n        this.board = board;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        return this.piece\r\n            .getPossibleCaptures()\r\n            .filter(\r\n                (point) =>\r\n                    !MoveUtils.willMoveCauseCheck(\r\n                        this.color,\r\n                        this.pointClicked.row,\r\n                        this.pointClicked.col,\r\n                        point.row,\r\n                        point.col,\r\n                        this.board\r\n                    )\r\n            );\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        return this.piece\r\n            .getPossibleMoves()\r\n            .filter(\r\n                (point) =>\r\n                    !MoveUtils.willMoveCauseCheck(\r\n                        this.color,\r\n                        this.pointClicked.row,\r\n                        this.pointClicked.col,\r\n                        point.row,\r\n                        point.col,\r\n                        this.board\r\n                    )\r\n            );\r\n    }\r\n}\r\n","import { Point } from '../../models/pieces/point';\r\nimport { AbstractPiece } from './abstract-piece';\r\n\r\nexport abstract class PieceAbstractDecorator implements AbstractPiece {\r\n\r\n    piece: AbstractPiece;\r\n\r\n    protected constructor(piece: AbstractPiece) {\r\n        this.piece = piece;\r\n    }\r\n\r\n    abstract getPossibleCaptures(): Point[];\r\n\r\n    abstract getPossibleMoves(): Point[];\r\n\r\n}\r\n","import { Board } from '../models/board';\r\nimport { Bishop } from '../models/pieces/bishop';\r\nimport { Color } from '../models/pieces/color';\r\nimport { Knight } from '../models/pieces/knight';\r\nimport { Piece } from '../models/pieces/piece';\r\nimport { Queen } from '../models/pieces/queen';\r\nimport { Rook } from '../models/pieces/rook';\r\nimport { UnicodeConstants } from '../utils/unicode-constants';\r\n\r\nexport class PiecePromotionResolver {\r\n\r\n    static resolvePromotionChoice(board: Board, piece: Piece, index: number) {\r\n        const isWhite = piece.color === Color.WHITE;\r\n        switch (index) {\r\n            case 1:\r\n                board.pieces.push(\r\n                    new Queen(\r\n                        piece.point,\r\n                        piece.color,\r\n                        isWhite\r\n                            ? UnicodeConstants.WHITE_QUEEN\r\n                            : UnicodeConstants.BLACK_QUEEN,\r\n                        board\r\n                    )\r\n                );\r\n                break;\r\n            case 2:\r\n                board.pieces.push(\r\n                    new Rook(\r\n                        piece.point,\r\n                        piece.color,\r\n                        isWhite\r\n                            ? UnicodeConstants.WHITE_ROOK\r\n                            : UnicodeConstants.BLACK_ROOK,\r\n                        board\r\n                    )\r\n                );\r\n                break;\r\n            case 3:\r\n                board.pieces.push(\r\n                    new Bishop(\r\n                        piece.point,\r\n                        piece.color,\r\n                        isWhite\r\n                            ? UnicodeConstants.WHITE_BISHOP\r\n                            : UnicodeConstants.BLACK_BISHOP,\r\n                        board\r\n                    )\r\n                );\r\n                break;\r\n            case 4:\r\n                board.pieces.push(\r\n                    new Knight(\r\n                        piece.point,\r\n                        piece.color,\r\n                        isWhite\r\n                            ? UnicodeConstants.WHITE_KNIGHT\r\n                            : UnicodeConstants.BLACK_KNIGHT,\r\n                        board\r\n                    )\r\n                );\r\n                break;\r\n        }\r\n    }\r\n\r\n}\r\n","import { Board } from '../../models/board';\r\nimport { MoveTranslation } from '../../models/move-translation';\r\nimport { Bishop } from '../../models/pieces/bishop';\r\nimport { Color } from '../../models/pieces/color';\r\nimport { King } from '../../models/pieces/king';\r\nimport { Knight } from '../../models/pieces/knight';\r\nimport { Pawn } from '../../models/pieces/pawn';\r\nimport { Piece } from '../../models/pieces/piece';\r\nimport { Point } from '../../models/pieces/point';\r\nimport { Queen } from '../../models/pieces/queen';\r\nimport { Rook } from '../../models/pieces/rook';\r\nimport {\r\n    ColorInput,\r\n    PieceTypeInput\r\n} from '../../utils/inputs/piece-type-input';\r\nimport { UnicodeConstants } from '../../utils/unicode-constants';\r\n\r\nexport class PieceFactory {\r\n\r\n    static create(\r\n        indexes: MoveTranslation,\r\n        pieceTypeInput: PieceTypeInput,\r\n        colorInput: ColorInput,\r\n        board: Board\r\n    ): Piece {\r\n        let piece;\r\n        let color = colorInput === ColorInput.LIGHT\r\n            ? Color.WHITE\r\n            : Color.BLACK;\r\n\r\n        switch (pieceTypeInput) {\r\n            case PieceTypeInput.QUEEN:\r\n                piece = new Queen(\r\n                    new Point(indexes.yAxis, indexes.xAxis),\r\n                    color,\r\n                    color === Color.WHITE ? UnicodeConstants.WHITE_QUEEN : UnicodeConstants.BLACK_QUEEN,\r\n                    board\r\n                );\r\n                break;\r\n            case PieceTypeInput.KING:\r\n                piece = new King(\r\n                    new Point(indexes.yAxis, indexes.xAxis),\r\n                    color,\r\n                    color === Color.WHITE ? UnicodeConstants.WHITE_KING : UnicodeConstants.BLACK_KING,\r\n                    board\r\n                );\r\n\r\n                break;\r\n            case PieceTypeInput.KNIGHT:\r\n                piece = new Knight(\r\n                    new Point(indexes.yAxis, indexes.xAxis),\r\n                    color,\r\n                    color === Color.WHITE ? UnicodeConstants.WHITE_KNIGHT : UnicodeConstants.BLACK_KNIGHT,\r\n                    board\r\n                );\r\n                break;\r\n            case PieceTypeInput.BISHOP:\r\n                piece = new Bishop(\r\n                    new Point(indexes.yAxis, indexes.xAxis),\r\n                    color,\r\n                    color === Color.WHITE ? UnicodeConstants.WHITE_BISHOP : UnicodeConstants.BLACK_BISHOP,\r\n                    board\r\n                );\r\n                break;\r\n            case PieceTypeInput.ROOK:\r\n                piece = new Rook(\r\n                    new Point(indexes.yAxis, indexes.xAxis),\r\n                    color,\r\n                    color === Color.WHITE ? UnicodeConstants.WHITE_ROOK : UnicodeConstants.BLACK_ROOK,\r\n                    board\r\n                );\r\n                break;\r\n            case PieceTypeInput.PAWN:\r\n                piece = new Pawn(\r\n                    new Point(indexes.yAxis, indexes.xAxis),\r\n                    color,\r\n                    color === Color.WHITE ? UnicodeConstants.WHITE_PAWN : UnicodeConstants.BLACK_PAWN,\r\n                    board\r\n                );\r\n                break;\r\n        }\r\n\r\n        return piece;\r\n    }\r\n}\r\n","import { EventEmitter } from '@angular/core';\r\nimport { HistoryMove } from '../history-move-provider/history-move';\r\nimport { ColorInput, PieceTypeInput } from '../utils/inputs/piece-type-input';\r\nimport { AbstractEngineFacade } from './abstract-engine-facade';\r\n\r\nimport { BoardLoader } from './board-state-provider/board-loader/board-loader';\r\nimport { BoardState } from './board-state-provider/board-state/board-state';\r\nimport { BoardStateProvider } from './board-state-provider/board-state/board-state-provider';\r\nimport { MoveStateProvider } from './board-state-provider/board-state/move-state-provider';\r\nimport { ClickUtils } from './click/click-utils';\r\nimport { Arrow } from './drawing-tools/shapes/arrow';\r\nimport { Circle } from './drawing-tools/shapes/circle';\r\nimport { DrawPoint } from './drawing-tools/draw-point';\r\nimport { DrawProvider } from './drawing-tools/draw-provider';\r\nimport { Board } from '../models/board';\r\nimport { Color } from '../models/pieces/color';\r\nimport { King } from '../models/pieces/king';\r\nimport { Pawn } from '../models/pieces/pawn';\r\nimport { Piece } from '../models/pieces/piece';\r\nimport { Point } from '../models/pieces/point';\r\nimport { DefaultPgnProcessor } from './pgn/default-pgn-processor';\r\nimport { AvailableMoveDecorator } from './piece-decorator/available-move-decorator';\r\nimport { PiecePromotionResolver } from '../piece-promotion/piece-promotion-resolver';\r\nimport { MoveUtils } from '../utils/move-utils';\r\nimport { MoveChange } from './move-change/move-change';\r\nimport { PieceFactory } from './utils/piece-factory';\r\n\r\nexport class EngineFacade extends AbstractEngineFacade {\r\n\r\n    _selected = false;\r\n    drawPoint: DrawPoint;\r\n    drawProvider: DrawProvider;\r\n    disabling = false;\r\n    boardStateProvider: BoardStateProvider;\r\n    moveStateProvider: MoveStateProvider;\r\n    moveChange: EventEmitter<MoveChange>;\r\n    pgnProcessor: DefaultPgnProcessor = new DefaultPgnProcessor();\r\n\r\n    constructor(\r\n        board: Board,\r\n        moveChange: EventEmitter<MoveChange>\r\n    ) {\r\n        super(board);\r\n        this.moveChange = moveChange;\r\n        this.boardLoader = new BoardLoader(this);\r\n        this.boardLoader.addPieces();\r\n        this.boardStateProvider = new BoardStateProvider();\r\n    }\r\n\r\n    public reset(): void {\r\n        this.boardStateProvider.clear();\r\n        this.moveHistoryProvider.clear();\r\n        this.boardLoader.addPieces();\r\n        this.board.reset();\r\n        this.coords.reset();\r\n        this.drawProvider.clear();\r\n        this.freeMode = false;\r\n    }\r\n\r\n    public undo(): void {\r\n        if (!this.boardStateProvider.isEmpty()) {\r\n            const lastBoard = this.boardStateProvider.pop().board;\r\n            if (this.board.reverted) {\r\n                lastBoard.reverse();\r\n            }\r\n            this.board = lastBoard;\r\n            this.board.possibleCaptures = [];\r\n            this.board.possibleMoves = [];\r\n            this.moveHistoryProvider.pop();\r\n        }\r\n    }\r\n\r\n    saveMoveClone() {\r\n        const clone = this.board.clone();\r\n\r\n        if (this.board.reverted) {\r\n            clone.reverse();\r\n        }\r\n        this.moveStateProvider.addMove(new BoardState(clone));\r\n    }\r\n\r\n    public move(coords: string) {\r\n        if (coords) {\r\n            const sourceIndexes = MoveUtils.translateCoordsToIndex(\r\n                coords.substring(0, 2),\r\n                this.board.reverted\r\n            );\r\n\r\n            const destIndexes = MoveUtils.translateCoordsToIndex(\r\n                coords.substring(2, 4),\r\n                this.board.reverted\r\n            );\r\n\r\n            const srcPiece = this.board.getPieceByPoint(\r\n                sourceIndexes.yAxis,\r\n                sourceIndexes.xAxis\r\n            );\r\n\r\n            if (srcPiece) {\r\n                if (\r\n                    (this.board.currentWhitePlayer &&\r\n                        srcPiece.color === Color.BLACK) ||\r\n                    (!this.board.currentWhitePlayer &&\r\n                        srcPiece.color === Color.WHITE)\r\n                ) {\r\n                    return;\r\n                }\r\n\r\n                this.prepareActivePiece(srcPiece, srcPiece.point);\r\n\r\n                if (\r\n                    this.board.isPointInPossibleMoves(\r\n                        new Point(destIndexes.yAxis, destIndexes.xAxis)\r\n                    ) ||\r\n                    this.board.isPointInPossibleCaptures(\r\n                        new Point(destIndexes.yAxis, destIndexes.xAxis)\r\n                    )\r\n                ) {\r\n                    this.saveClone();\r\n                    this.movePiece(\r\n                        srcPiece,\r\n                        new Point(destIndexes.yAxis, destIndexes.xAxis),\r\n                        coords.length === 5 ? +coords.substring(4, 5) : 0\r\n                    );\r\n\r\n                    this.board.lastMoveSrc = new Point(\r\n                        sourceIndexes.yAxis,\r\n                        sourceIndexes.xAxis\r\n                    );\r\n                    this.board.lastMoveDest = new Point(\r\n                        destIndexes.yAxis,\r\n                        destIndexes.xAxis\r\n                    );\r\n\r\n                    this.disableSelection();\r\n                } else {\r\n                    this.disableSelection();\r\n                }\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    prepareActivePiece(pieceClicked: Piece, pointClicked: Point) {\r\n        this.board.activePiece = pieceClicked;\r\n        this._selected = true;\r\n        this.board.possibleCaptures = new AvailableMoveDecorator(\r\n            pieceClicked,\r\n            pointClicked,\r\n            this.board.currentWhitePlayer ? Color.WHITE : Color.BLACK,\r\n            this.board\r\n        ).getPossibleCaptures();\r\n        this.board.possibleMoves = new AvailableMoveDecorator(\r\n            pieceClicked,\r\n            pointClicked,\r\n            this.board.currentWhitePlayer ? Color.WHITE : Color.BLACK,\r\n            this.board\r\n        ).getPossibleMoves();\r\n    }\r\n\r\n    onPieceClicked(pieceClicked, pointClicked) {\r\n        if (\r\n            (this.board.currentWhitePlayer && pieceClicked.color === Color.BLACK) ||\r\n            (!this.board.currentWhitePlayer && pieceClicked.color === Color.WHITE)\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        this.prepareActivePiece(pieceClicked, pointClicked);\r\n    }\r\n\r\n    public handleClickEvent(pointClicked: Point, isMouseDown: boolean) {\r\n        let moving = false;\r\n\r\n        if ((\r\n            this.board.isPointInPossibleMoves(pointClicked) ||\r\n            this.board.isPointInPossibleCaptures(pointClicked)\r\n        ) || this.freeMode) {\r\n            this.saveClone();\r\n            this.board.lastMoveSrc = new Point(\r\n                this.board.activePiece.point.row,\r\n                this.board.activePiece.point.col\r\n            );\r\n            this.board.lastMoveDest = pointClicked.clone();\r\n            this.movePiece(this.board.activePiece, pointClicked);\r\n\r\n            if (!this.board.activePiece.point.isEqual(this.board.lastMoveSrc)) {\r\n                moving = true;\r\n            }\r\n        }\r\n\r\n        if (isMouseDown || moving) {\r\n            this.disableSelection();\r\n        }\r\n        this.disableSelection();\r\n        const pieceClicked = this.board.getPieceByPoint(\r\n            pointClicked.row,\r\n            pointClicked.col\r\n        );\r\n        if (pieceClicked && !moving) {\r\n            this.onFreeMode(pieceClicked);\r\n            this.onPieceClicked(pieceClicked, pointClicked);\r\n        }\r\n    }\r\n\r\n    onMouseDown(\r\n        event: MouseEvent,\r\n        pointClicked: Point,\r\n        left?: number,\r\n        top?: number\r\n    ) {\r\n        if (event.button !== 0) {\r\n            this.drawPoint = ClickUtils.getDrawingPoint(\r\n                this.heightAndWidth,\r\n                this.colorStrategy,\r\n                event.x,\r\n                event.y,\r\n                event.ctrlKey,\r\n                event.altKey,\r\n                event.shiftKey,\r\n                left,\r\n                top\r\n            );\r\n            return;\r\n        }\r\n\r\n        this.drawProvider.clear();\r\n\r\n        if (\r\n            this.board.activePiece &&\r\n            pointClicked.isEqual(this.board.activePiece.point)\r\n        ) {\r\n            this.disabling = true;\r\n            return;\r\n        }\r\n\r\n        const pieceClicked = this.board.getPieceByPoint(\r\n            pointClicked.row,\r\n            pointClicked.col\r\n        );\r\n\r\n        if (this.freeMode) {\r\n            if (pieceClicked) {\r\n                if (event.ctrlKey) {\r\n                    this.board.pieces = this.board.pieces.filter(e => e !== pieceClicked);\r\n                    return;\r\n                }\r\n                this.board.currentWhitePlayer = (pieceClicked.color === Color.WHITE);\r\n            }\r\n        }\r\n\r\n        if (this.isPieceDisabled(pieceClicked)) {\r\n            return;\r\n        }\r\n\r\n        if (this._selected) {\r\n            this.handleClickEvent(pointClicked, true);\r\n        } else {\r\n            if (pieceClicked) {\r\n                this.onFreeMode(pieceClicked);\r\n                this.onPieceClicked(pieceClicked, pointClicked);\r\n            }\r\n        }\r\n    }\r\n\r\n    onMouseUp(\r\n        event: MouseEvent,\r\n        pointClicked: Point,\r\n        left: number,\r\n        top: number\r\n    ) {\r\n        if (event.button !== 0 && !this.drawDisabled) {\r\n            this.addDrawPoint(\r\n                event.x,\r\n                event.y,\r\n                event.ctrlKey,\r\n                event.altKey,\r\n                event.shiftKey,\r\n                left, top\r\n            );\r\n            return;\r\n        }\r\n\r\n        this.drawProvider.clear();\r\n\r\n        if (this.dragDisabled) {\r\n            return;\r\n        }\r\n\r\n        if (\r\n            this.board.activePiece &&\r\n            pointClicked.isEqual(this.board.activePiece.point) &&\r\n            this.disabling\r\n        ) {\r\n            this.disableSelection();\r\n            this.disabling = false;\r\n            return;\r\n        }\r\n        const pieceClicked = this.board.getPieceByPoint(\r\n            pointClicked.row,\r\n            pointClicked.col\r\n        );\r\n\r\n        if (this.isPieceDisabled(pieceClicked)) {\r\n            return;\r\n        }\r\n\r\n        if (this._selected) {\r\n            this.handleClickEvent(pointClicked, false);\r\n            //   this.possibleMoves = activePiece.getPossibleMoves();\r\n        }\r\n    }\r\n\r\n    saveClone() {\r\n        const clone = this.board.clone();\r\n\r\n        if (this.board.reverted) {\r\n            clone.reverse();\r\n        }\r\n        this.boardStateProvider.addMove(new BoardState(clone));\r\n    }\r\n\r\n    movePiece(toMovePiece: Piece, newPoint: Point, promotionIndex?: number) {\r\n        const destPiece = this.board.pieces.find(\r\n            (piece) =>\r\n                piece.point.col === newPoint.col &&\r\n                piece.point.row === newPoint.row\r\n        );\r\n\r\n        this.pgnProcessor.process(\r\n            this.board,\r\n            toMovePiece,\r\n            newPoint,\r\n            destPiece\r\n        );\r\n\r\n        if (destPiece && toMovePiece.color !== destPiece.color) {\r\n            this.board.pieces = this.board.pieces.filter(\r\n                (piece) => piece !== destPiece\r\n            );\r\n        } else {\r\n            if (destPiece && toMovePiece.color === destPiece.color) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        const move = new HistoryMove(\r\n            MoveUtils.format(toMovePiece.point, newPoint, this.board.reverted),\r\n            toMovePiece.constant.name,\r\n            toMovePiece.color === Color.WHITE ? 'white' : 'black',\r\n            !!destPiece\r\n        );\r\n        this.moveHistoryProvider.addMove(move);\r\n\r\n        if (toMovePiece instanceof King) {\r\n            const squaresMoved = Math.abs(newPoint.col - toMovePiece.point.col);\r\n            if (squaresMoved > 1) {\r\n                if (newPoint.col < 3) {\r\n                    const leftRook = this.board.getPieceByField(\r\n                        toMovePiece.point.row,\r\n                        0\r\n                    );\r\n                    if (!this.freeMode) {\r\n                        leftRook.point.col = this.board.reverted ? 2 : 3;\r\n                    }\r\n                } else {\r\n                    const rightRook = this.board.getPieceByField(\r\n                        toMovePiece.point.row,\r\n                        7\r\n                    );\r\n                    if (!this.freeMode) {\r\n                        rightRook.point.col = this.board.reverted ? 4 : 5;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (toMovePiece instanceof Pawn) {\r\n            this.board.checkIfPawnTakesEnPassant(newPoint);\r\n            this.board.checkIfPawnEnpassanted(toMovePiece, newPoint);\r\n        } else {\r\n            this.board.enPassantPoint = null;\r\n            this.board.enPassantPiece = null;\r\n        }\r\n\r\n        toMovePiece.point = newPoint;\r\n        this.increaseFullMoveCount();\r\n        this.board.currentWhitePlayer = !this.board.currentWhitePlayer;\r\n\r\n        if (!this.checkForPawnPromote(toMovePiece, promotionIndex)) {\r\n            this.afterMoveActions();\r\n        }\r\n    }\r\n\r\n    checkForPawnPromote(toPromotePiece: Piece, promotionIndex?: number) {\r\n        if (!(toPromotePiece instanceof Pawn)) {\r\n            return;\r\n        }\r\n\r\n        if (toPromotePiece.point.row === 0 || toPromotePiece.point.row === 7) {\r\n            this.board.pieces = this.board.pieces.filter(\r\n                (piece) => piece !== toPromotePiece\r\n            );\r\n\r\n            // When we make move manually, we pass promotion index already, so we don't need\r\n            // to acquire it from promote dialog\r\n            if (!promotionIndex) {\r\n                this.openPromoteDialog(toPromotePiece);\r\n            } else {\r\n                PiecePromotionResolver.resolvePromotionChoice(\r\n                    this.board,\r\n                    toPromotePiece,\r\n                    promotionIndex\r\n                );\r\n                this.afterMoveActions(promotionIndex);\r\n            }\r\n\r\n            return true;\r\n        }\r\n    }\r\n\r\n    afterMoveActions(promotionIndex?: number) {\r\n        this.checkIfPawnFirstMove(this.board.activePiece);\r\n        this.checkIfRookMoved(this.board.activePiece);\r\n        this.checkIfKingMoved(this.board.activePiece);\r\n\r\n        this.board.blackKingChecked = this.board.isKingInCheck(\r\n            Color.BLACK,\r\n            this.board.pieces\r\n        );\r\n        this.board.whiteKingChecked = this.board.isKingInCheck(\r\n            Color.WHITE,\r\n            this.board.pieces\r\n        );\r\n        const check =\r\n            this.board.blackKingChecked || this.board.whiteKingChecked;\r\n        const checkmate =\r\n            this.checkForPossibleMoves(Color.BLACK) ||\r\n            this.checkForPossibleMoves(Color.WHITE);\r\n        const stalemate =\r\n            this.checkForPat(Color.BLACK) || this.checkForPat(Color.WHITE);\r\n\r\n        this.disabling = false;\r\n        this.board.calculateFEN();\r\n\r\n        const lastMove = this.moveHistoryProvider.getLastMove();\r\n        if (lastMove && promotionIndex) {\r\n            lastMove.move += promotionIndex;\r\n        }\r\n\r\n        this.moveChange.emit({\r\n            ...lastMove,\r\n            check,\r\n            checkmate,\r\n            stalemate,\r\n            fen: this.board.fen,\r\n            freeMode: this.freeMode\r\n        });\r\n    }\r\n\r\n    checkForPat(color: Color) {\r\n        if (color === Color.WHITE && !this.board.whiteKingChecked) {\r\n            return this.checkForPossibleMoves(color);\r\n        } else {\r\n            if (color === Color.BLACK && !this.board.blackKingChecked) {\r\n                return this.checkForPossibleMoves(color);\r\n            }\r\n        }\r\n    }\r\n\r\n    openPromoteDialog(piece: Piece) {\r\n        this.modal.open((index) => {\r\n            PiecePromotionResolver.resolvePromotionChoice(\r\n                this.board,\r\n                piece,\r\n                index\r\n            );\r\n            this.afterMoveActions(index);\r\n        });\r\n    }\r\n\r\n    checkForPossibleMoves(color: Color): boolean {\r\n        return !this.board.pieces\r\n            .filter((piece) => piece.color === color)\r\n            .some(\r\n                (piece) =>\r\n                    piece\r\n                        .getPossibleMoves()\r\n                        .some(\r\n                            (move) =>\r\n                                !MoveUtils.willMoveCauseCheck(\r\n                                    color,\r\n                                    piece.point.row,\r\n                                    piece.point.col,\r\n                                    move.row,\r\n                                    move.col,\r\n                                    this.board\r\n                                )\r\n                        ) ||\r\n                    piece\r\n                        .getPossibleCaptures()\r\n                        .some(\r\n                            (capture) =>\r\n                                !MoveUtils.willMoveCauseCheck(\r\n                                    color,\r\n                                    piece.point.row,\r\n                                    piece.point.col,\r\n                                    capture.row,\r\n                                    capture.col,\r\n                                    this.board\r\n                                )\r\n                        )\r\n            );\r\n    }\r\n\r\n    disableSelection() {\r\n        this._selected = false;\r\n        this.board.possibleCaptures = [];\r\n        this.board.activePiece = null;\r\n        this.board.possibleMoves = [];\r\n    }\r\n\r\n    /**\r\n     * Processes logic to allow freeMode based logic processing\r\n     */\r\n    onFreeMode(pieceClicked) {\r\n        if (\r\n            !this.freeMode ||\r\n            pieceClicked === undefined ||\r\n            pieceClicked === null\r\n        ) {\r\n            return;\r\n        }\r\n        // sets player as white in-case white pieces are selected, and vice-versa when black is selected\r\n        this.board.currentWhitePlayer = pieceClicked.color === Color.WHITE;\r\n    }\r\n\r\n    isPieceDisabled(pieceClicked: Piece) {\r\n        if (pieceClicked && pieceClicked.point) {\r\n            const foundCapture = this.board.possibleCaptures.find(\r\n                (capture) =>\r\n                    capture.col === pieceClicked.point.col &&\r\n                    capture.row === pieceClicked.point.row\r\n            );\r\n\r\n            if (foundCapture) {\r\n                return false;\r\n            }\r\n        }\r\n        return (\r\n            pieceClicked &&\r\n            ((this.lightDisabled && pieceClicked.color === Color.WHITE) ||\r\n                (this.darkDisabled && pieceClicked.color === Color.BLACK))\r\n        );\r\n    }\r\n\r\n    addDrawPoint(\r\n        x: number,\r\n        y: number,\r\n        crtl: boolean,\r\n        alt: boolean,\r\n        shift: boolean,\r\n        left: number,\r\n        top: number\r\n    ) {\r\n        const upPoint = ClickUtils.getDrawingPoint(\r\n            this.heightAndWidth,\r\n            this.colorStrategy,\r\n            x,\r\n            y,\r\n            crtl,\r\n            alt,\r\n            shift,\r\n            left,\r\n            top\r\n        );\r\n\r\n        if (this.drawPoint.isEqual(upPoint)) {\r\n            const circle = new Circle();\r\n            circle.drawPoint = upPoint;\r\n            if (!this.drawProvider.containsCircle(circle)) {\r\n                this.drawProvider.addCircle(circle);\r\n            } else {\r\n                this.drawProvider.reomveCircle(circle);\r\n            }\r\n        } else {\r\n            const arrow = new Arrow();\r\n            arrow.start = this.drawPoint;\r\n            arrow.end = upPoint;\r\n\r\n            if (!this.drawProvider.containsArrow(arrow)) {\r\n                this.drawProvider.addArrow(arrow);\r\n            } else {\r\n                this.drawProvider.removeArrow(arrow);\r\n            }\r\n        }\r\n    }\r\n\r\n    increaseFullMoveCount() {\r\n        if (!this.board.currentWhitePlayer) {\r\n            ++this.board.fullMoveCount;\r\n        }\r\n    }\r\n\r\n    addPiece(\r\n        pieceTypeInput: PieceTypeInput,\r\n        colorInput: ColorInput,\r\n        coords: string\r\n    ) {\r\n        if (this.freeMode && coords && pieceTypeInput > 0 && colorInput > 0) {\r\n            let indexes = MoveUtils.translateCoordsToIndex(\r\n                coords,\r\n                this.board.reverted\r\n            );\r\n            let existing = this.board.getPieceByPoint(\r\n                indexes.yAxis,\r\n                indexes.xAxis\r\n            );\r\n            if (existing) {\r\n                this.board.pieces = this.board.pieces.filter(e => e !== existing);\r\n            }\r\n            let createdPiece = PieceFactory.create(\r\n                indexes,\r\n                pieceTypeInput,\r\n                colorInput,\r\n                this.board\r\n            );\r\n            this.saveClone();\r\n            this.board.pieces.push(createdPiece);\r\n            this.afterMoveActions();\r\n        }\r\n    }\r\n}\r\n","import { cloneDeep } from 'lodash';\r\nimport { Bishop } from './pieces/bishop';\r\nimport { Color } from './pieces/color';\r\nimport { King } from './pieces/king';\r\nimport { Knight } from './pieces/knight';\r\nimport { Pawn } from './pieces/pawn';\r\nimport { Piece } from './pieces/piece';\r\nimport { Point } from './pieces/point';\r\nimport { Queen } from './pieces/queen';\r\nimport { Rook } from './pieces/rook';\r\n\r\nexport class Board {\r\n    board: number[][] = [];\r\n    pieces: Piece[] = [];\r\n\r\n    enPassantPoint: Point = null;\r\n    enPassantPiece: Piece = null;\r\n    lastMoveSrc: Point = null;\r\n    lastMoveDest: Point = null;\r\n    activePiece: Piece;\r\n\r\n    blackKingChecked: boolean;\r\n    possibleCaptures: any[] = [];\r\n    possibleMoves: Point[] = [];\r\n    whiteKingChecked: boolean;\r\n\r\n    currentWhitePlayer = true;\r\n    reverted = false;\r\n    fullMoveCount = 1;\r\n    fen: string;\r\n\r\n    constructor() {\r\n        for (let i = 0; i < 8; ++i) {\r\n            this.board[i] = [];\r\n            for (let j = 0; j < 8; ++j) {\r\n                this.board[i][j] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    isXYInPossibleMoves(row: number, col: number): boolean {\r\n        return this.possibleMoves.some((move) => move.row === row && move.col === col);\r\n    }\r\n\r\n    isXYInPossibleCaptures(row: number, col: number): boolean {\r\n        return this.possibleCaptures.some((capture) => capture.row === row && capture.col === col);\r\n    }\r\n\r\n    isXYInSourceMove(i: number, j: number) {\r\n        return this.lastMoveSrc && this.lastMoveSrc.row === i && this.lastMoveSrc.col === j;\r\n    }\r\n\r\n    isXYInDestMove(i: number, j: number) {\r\n        return this.lastMoveDest && this.lastMoveDest.row === i && this.lastMoveDest.col === j;\r\n    }\r\n\r\n    isXYInActiveMove(i: number, j: number) {\r\n        return this.activePiece && this.activePiece.point.row === i && this.activePiece.point.col === j;\r\n    }\r\n\r\n    isPointInPossibleMoves(point: Point): boolean {\r\n        return this.possibleMoves.some((move) => move.row === point.row && move.col === point.col);\r\n    }\r\n\r\n    isPointInPossibleCaptures(point: Point): boolean {\r\n        return this.possibleCaptures.some((capture) => capture.row === point.row && capture.col === point.col);\r\n    }\r\n\r\n    reset() {\r\n        this.lastMoveDest = null;\r\n        this.lastMoveSrc = null;\r\n        this.whiteKingChecked = false;\r\n        this.blackKingChecked = false;\r\n        this.possibleCaptures = [];\r\n        this.possibleMoves = [];\r\n        this.activePiece = null;\r\n        this.reverted = false;\r\n        this.currentWhitePlayer = true;\r\n        this.enPassantPoint = null;\r\n        this.enPassantPiece = null;\r\n        this.fullMoveCount = 1;\r\n        this.calculateFEN();\r\n    }\r\n\r\n        reverse() {\r\n        this.reverted = !this.reverted;\r\n        this.activePiece = null;\r\n        this.possibleMoves = [];\r\n        this.possibleCaptures = [];\r\n\r\n        this.pieces.forEach((piece: Piece) => this.reversePoint(piece.point));\r\n\r\n        this.reversePoint(this.lastMoveSrc);\r\n        this.reversePoint(this.lastMoveDest);\r\n\r\n        if (this.enPassantPoint && this.enPassantPiece) {\r\n            this.reversePoint(this.enPassantPoint);\r\n        }\r\n    }\r\n\r\n    clone(): Board {\r\n        return cloneDeep(this);\r\n    }\r\n\r\n    isFieldTakenByEnemy(row: number, col: number, enemyColor: Color): boolean {\r\n        if (row > 7 || row < 0 || col > 7 || col < 0) {\r\n            return false;\r\n        }\r\n        return this.pieces.some(\r\n            (piece) => piece.point.col === col && piece.point.row === row && piece.color === enemyColor\r\n        );\r\n    }\r\n\r\n    isFieldEmpty(row: number, col: number): boolean {\r\n        if (row > 7 || row < 0 || col > 7 || col < 0) {\r\n            return false;\r\n        }\r\n        return !this.pieces.some((piece) => piece.point.col === col && piece.point.row === row);\r\n    }\r\n\r\n    isFieldUnderAttack(row: number, col: number, color: Color) {\r\n        return this.pieces\r\n            .filter((piece) => piece.color === color)\r\n            .some((piece) => piece.getCoveredFields().some((field) => field.col === col && field.row === row));\r\n    }\r\n\r\n    getPieceByField(row: number, col: number): Piece {\r\n        if (this.isFieldEmpty(row, col)) {\r\n            //   throw new Error('Piece not found');\r\n            return undefined;\r\n        }\r\n\r\n        return this.pieces.find((piece) => piece.point.col === col && piece.point.row === row);\r\n    }\r\n\r\n    isKingInCheck(color: Color, pieces: Piece[]): boolean {\r\n        const king = pieces.find((piece) => piece.color === color && piece instanceof King);\r\n\r\n        if (king) {\r\n            return pieces.some(\r\n                (piece) =>\r\n                    piece\r\n                        .getPossibleCaptures()\r\n                        .some((point) => point.col === king.point.col && point.row === king.point.row) &&\r\n                    piece.color !== color\r\n            );\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getKingByColor(color: Color): King {\r\n        return this.pieces.find((piece) => piece instanceof King && piece.color === color) as King;\r\n    }\r\n\r\n    getCastleFENString(color: Color) {\r\n        const king = this.getKingByColor(color);\r\n\r\n        if (!king || king.isMovedAlready) {\r\n            return '';\r\n        }\r\n\r\n        let fen = '';\r\n        const leftRook = this.getPieceByField(king.point.row, 0);\r\n        const rightRook = this.getPieceByField(king.point.row, 7);\r\n\r\n        if (rightRook instanceof Rook && rightRook.color === color) {\r\n            if (!rightRook.isMovedAlready) {\r\n                fen += this.reverted ? 'q' : 'k';\r\n            }\r\n        }\r\n\r\n        if (leftRook instanceof Rook && leftRook.color === color) {\r\n            if (!leftRook.isMovedAlready) {\r\n                fen += this.reverted ? 'k' : 'q';\r\n            }\r\n        }\r\n\r\n        fen = fen.split('').sort().join('');\r\n        return color === Color.BLACK ? fen : fen.toUpperCase();\r\n    }\r\n\r\n    getEnPassantFENString() {\r\n        if (this.enPassantPoint) {\r\n            if (this.reverted) {\r\n                return String.fromCharCode(104 - this.enPassantPoint.col) + (this.enPassantPoint.row + 1);\r\n            } else {\r\n                return String.fromCharCode(97 + this.enPassantPoint.col) + (Math.abs(this.enPassantPoint.row - 7) + 1);\r\n            }\r\n        } else {\r\n            return '-';\r\n        }\r\n    }\r\n\r\n    calculateFEN() {\r\n        let fen = '';\r\n        for (let i = 0; i < 8; ++i) {\r\n            let emptyFields = 0;\r\n            for (let j = 0; j < 8; ++j) {\r\n                const foundPiece = this.pieces.find((piece) => piece.point.col === j && piece.point.row === i);\r\n                if (foundPiece) {\r\n                    if (emptyFields > 0) {\r\n                        fen += emptyFields;\r\n                        emptyFields = 0;\r\n                    }\r\n\r\n                    if (foundPiece instanceof Rook) {\r\n                        fen += foundPiece.color === Color.BLACK ? 'r' : 'R';\r\n                    } else {\r\n                        if (foundPiece instanceof Knight) {\r\n                            fen += foundPiece.color === Color.BLACK ? 'n' : 'N';\r\n                        } else {\r\n                            if (foundPiece instanceof Bishop) {\r\n                                fen += foundPiece.color === Color.BLACK ? 'b' : 'B';\r\n                            } else {\r\n                                if (foundPiece instanceof Queen) {\r\n                                    fen += foundPiece.color === Color.BLACK ? 'q' : 'Q';\r\n                                } else {\r\n                                    if (foundPiece instanceof King) {\r\n                                        fen += foundPiece.color === Color.BLACK ? 'k' : 'K';\r\n                                    } else {\r\n                                        if (foundPiece instanceof Pawn) {\r\n                                            fen += foundPiece.color === Color.BLACK ? 'p' : 'P';\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    ++emptyFields;\r\n                }\r\n            }\r\n\r\n            if (emptyFields > 0) {\r\n                fen += emptyFields;\r\n            }\r\n\r\n            fen += '/';\r\n        }\r\n\r\n        fen = fen.substr(0, fen.length - 1);\r\n\r\n        if (this.reverted) {\r\n            fen = fen.split('').reverse().join('');\r\n        }\r\n\r\n        fen += ' ' + (this.currentWhitePlayer ? 'w' : 'b');\r\n        const whiteEnPassant = this.getCastleFENString(Color.WHITE);\r\n        const blackEnPassant = this.getCastleFENString(Color.BLACK);\r\n        let concatedEnPassant = whiteEnPassant + blackEnPassant;\r\n        if (!concatedEnPassant) {\r\n            concatedEnPassant = '-';\r\n        }\r\n\r\n        fen += ' ' + concatedEnPassant;\r\n        fen += ' ' + this.getEnPassantFENString();\r\n        fen += ' ' + 0;\r\n        fen += ' ' + this.fullMoveCount;\r\n        this.fen = fen;\r\n    }\r\n\r\n    isXYInPointSelection(i: number, j: number) {\r\n        return false;\r\n    }\r\n\r\n    private reversePoint(point: Point) {\r\n        if (point) {\r\n            point.row = Math.abs(point.row - 7);\r\n            point.col = Math.abs(point.col - 7);\r\n        }\r\n    }\r\n\r\n    public getPieceByPoint(row: number, col: number): Piece {\r\n        row = Math.floor(row);\r\n        col = Math.floor(col);\r\n        return this.pieces.find(\r\n            (piece) => piece.point.col === col && piece.point.row === row\r\n        );\r\n    }\r\n\r\n    public checkIfPawnTakesEnPassant(newPoint: Point) {\r\n        if (newPoint.isEqual(this.enPassantPoint)) {\r\n            console.log('usuwam');\r\n            this.pieces = this.pieces.filter(\r\n                (piece) => piece !== this.enPassantPiece\r\n            );\r\n            this.enPassantPoint = null;\r\n            this.enPassantPiece = null;\r\n        }\r\n    }\r\n\r\n    public checkIfPawnEnpassanted(piece: Pawn, newPoint: Point) {\r\n        if (Math.abs(piece.point.row - newPoint.row) > 1) {\r\n            this.enPassantPiece = piece;\r\n            this.enPassantPoint = new Point(\r\n                (piece.point.row + newPoint.row) / 2,\r\n                piece.point.col\r\n            );\r\n        } else {\r\n            this.enPassantPoint = null;\r\n            this.enPassantPiece = null;\r\n        }\r\n    }\r\n\r\n    isKingChecked(piece: Piece) {\r\n        if (piece instanceof King) {\r\n            return piece.color === Color.WHITE\r\n                ? this.whiteKingChecked\r\n                : this.blackKingChecked;\r\n        }\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class NgxChessBoardService {\r\n    private componentMethodCallSource = new Subject<any>();\r\n\r\n    componentMethodCalled$ = this.componentMethodCallSource.asObservable();\r\n\r\n    reset() {\r\n        this.componentMethodCallSource.next();\r\n    }\r\n}\r\n","import {Component, ElementRef, OnInit, ViewChild} from '@angular/core';\r\nimport {Piece} from '../../models/pieces/piece';\r\nimport {Observable} from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'app-piece-promotion-modal',\r\n    templateUrl: './piece-promotion-modal.component.html',\r\n    styleUrls: ['./piece-promotion-modal.component.scss']\r\n})\r\nexport class PiecePromotionModalComponent {\r\n\r\n    @ViewChild('myModal', {static: false}) modal: ElementRef;\r\n\r\n    opened = false;\r\n    private onCloseCallback: (index: number) => void;\r\n\r\n    open(closeCallback: (index: number) => void) {\r\n        this.opened = true;\r\n        this.onCloseCallback = closeCallback;\r\n        this.modal.nativeElement.style.display = 'block';\r\n    }\r\n\r\n    changeSelection(index: number){\r\n        this.modal.nativeElement.style.display = 'none';\r\n        this.opened = false;\r\n        this.onCloseCallback(index);\r\n    }\r\n\r\n}\r\n","<div #myModal class=\"container\">\r\n    <div class=\"wrapper\">\r\n        <div class=\"content\">\r\n            <div class=\"piece-wrapper\">\r\n                <div class=\"piece\" (click)=\"changeSelection(1)\">&#x265B;</div>\r\n                <div class=\"piece\" (click)=\"changeSelection(2)\">&#x265C;</div>\r\n                <div class=\"piece\" (click)=\"changeSelection(3)\">&#x265D;</div>\r\n                <div class=\"piece\" (click)=\"changeSelection(4)\">&#x265E;</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","<div\r\n    id=\"board\"\r\n    [style.height.px]=\"engineFacade.heightAndWidth\"\r\n    [style.width.px]=\"engineFacade.heightAndWidth\"\r\n    (pointerdown)=\"!modal.opened && onMouseDown($event)\"\r\n    (pointerup)=\"!modal.opened && onMouseUp($event)\"\r\n    #boardRef\r\n>\r\n    <div id=\"drag\">\r\n        <div\r\n            class=\"board-row\"\r\n            *ngFor=\"let row of engineFacade.board.board; let i = index\"\r\n        >\r\n            <div\r\n                class=\"board-col\"\r\n                [class.current-selection]=\"engineFacade.board.isXYInActiveMove(i,j)\"\r\n                [class.dest-move]=\"engineFacade.board.isXYInDestMove(i,j)\"\r\n                [class.king-check]=\" engineFacade.board.isKingChecked(engineFacade.board.getPieceByPoint(i,j))\"\r\n                [class.point-circle]=\"engineFacade.board.isXYInPointSelection(i, j)\"\r\n                [class.possible-capture]=\"engineFacade.board.isXYInPossibleCaptures(i, j)\"\r\n                [class.possible-point]=\"engineFacade.board.isXYInPossibleMoves(i, j)\"\r\n                [class.source-move]=\"engineFacade.board.isXYInSourceMove(i, j)\"\r\n                [style.background-color]=\"((i + j) % 2 === 0 ) ? lightTileColor : darkTileColor\"\r\n                *ngFor=\"let col of row; let j = index\"\r\n            >\r\n                <span\r\n                    class=\"yCoord\"\r\n                    [style.color]=\"(i % 2 === 0) ? lightTileColor : darkTileColor\"\r\n                    [style.font-size.px]=\"pieceSize / 4\"\r\n                    *ngIf=\"showCoords && j === 7\"\r\n                >\r\n                    {{engineFacade.coords.yCoords[i]}}\r\n                </span>\r\n                <span\r\n                    class=\"xCoord\"\r\n                    [style.color]=\"(j % 2 === 0) ? lightTileColor : darkTileColor\"\r\n                    [style.font-size.px]=\"pieceSize / 4\"\r\n                    *ngIf=\"showCoords && i === 7\"\r\n                >\r\n                    {{engineFacade.coords.xCoords[j]}}\r\n                </span>\r\n                <div\r\n                    *ngIf=\"engineFacade.board.getPieceByPoint(i, j) as piece\"\r\n                    style=\"height:100%; width:100%\"\r\n                >\r\n                    <div\r\n                        [cdkDragDisabled]=\"engineFacade.dragDisabled\"\r\n                        [innerHTML]=\"engineFacade.pieceIconManager.isDefaultIcons() ? engineFacade.board.getPieceByPoint(i,j).constant.icon : ''\"\r\n                        [ngClass]=\"'piece'\"\r\n                        [style.font-size]=\"pieceSize + 'px'\"\r\n                        [ngStyle]=\"engineFacade.pieceIconManager.isDefaultIcons() ? '' : getCustomPieceIcons(engineFacade.board.getPieceByPoint(i,j))\"\r\n                        (cdkDragEnded)=\"dragEnded($event)\"\r\n                        (cdkDragStarted)=\"dragStart($event)\"\r\n                        cdkDrag\r\n                    >\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <svg\r\n        [attr.height]=\"engineFacade.heightAndWidth\"\r\n        [attr.width]=\"engineFacade.heightAndWidth\"\r\n        style=\"position:absolute; top:0; pointer-events: none\"\r\n    >\r\n        <defs *ngFor=\"let color of ['red', 'green', 'blue', 'orange']\">\r\n            <marker\r\n                [id]=\"color + 'Arrow'\"\r\n                markerHeight=\"13\"\r\n                markerWidth=\"13\"\r\n                orient=\"auto\"\r\n                refX=\"9\"\r\n                refY=\"6\"\r\n            >\r\n                <path\r\n                    [style.fill]=\"color\"\r\n                    d=\"M2,2 L2,11 L10,6 L2,2\"\r\n                ></path>\r\n            </marker>\r\n        </defs>\r\n        <line\r\n            class=\"arrow\"\r\n            [attr.marker-end]=\"'url(#' + arrow.end.color + 'Arrow)'\"\r\n            [attr.stroke]=\"arrow.end.color\"\r\n            [attr.x1]=\"arrow.start.x\"\r\n            [attr.x2]=\"arrow.end.x\"\r\n            [attr.y1]=\"arrow.start.y\"\r\n            [attr.y2]=\"arrow.end.y\"\r\n            *ngFor=\"let arrow of engineFacade.drawProvider.arrows$ | async\"\r\n        ></line>\r\n        <circle\r\n            [attr.cx]=\"circle.drawPoint.x\"\r\n            [attr.cy]=\"circle.drawPoint.y\"\r\n            [attr.r]=\"engineFacade.heightAndWidth / 18\"\r\n            [attr.stroke]=\"circle.drawPoint.color\"\r\n            *ngFor=\"let circle of engineFacade.drawProvider.circles$ | async\"\r\n            fill-opacity=\"0.0\"\r\n            stroke-width=\"2\"\r\n        ></circle>\r\n    </svg>\r\n    <app-piece-promotion-modal #modal></app-piece-promotion-modal>\r\n</div>\r\n","import { CdkDragEnd, CdkDragStart } from '@angular/cdk/drag-drop';\r\nimport {\r\n    AfterViewInit,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostListener,\r\n    Input,\r\n    OnChanges,\r\n    OnInit,\r\n    Output,\r\n    SimpleChanges,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { AbstractEngineFacade } from './engine/abstract-engine-facade';\r\nimport { BoardLoader } from './engine/board-state-provider/board-loader/board-loader';\r\nimport {\r\n    NotationProcessorFactory, NotationType,\r\n} from './engine/board-state-provider/board-loader/notation-processors/notation-processor-factory';\r\nimport { ClickUtils } from './engine/click/click-utils';\r\nimport { EngineFacade } from './engine/engine-facade';\r\nimport { MoveChange } from './engine/move-change/move-change';\r\nimport { HistoryMove } from './history-move-provider/history-move';\r\nimport { Board } from './models/board';\r\nimport { Piece } from './models/pieces/piece';\r\nimport { NgxChessBoardView } from './ngx-chess-board-view';\r\nimport { PiecePromotionModalComponent } from './piece-promotion/piece-promotion-modal/piece-promotion-modal.component';\r\nimport { NgxChessBoardService } from './service/ngx-chess-board.service';\r\nimport { Constants } from './utils/constants';\r\nimport { PieceIconInput } from './utils/inputs/piece-icon-input';\r\nimport { PieceIconInputManager } from './utils/inputs/piece-icon-input-manager';\r\nimport { ColorInput, PieceTypeInput } from './utils/inputs/piece-type-input';\r\n\r\n\r\n@Component({\r\n    selector: 'ngx-chess-board',\r\n    templateUrl: './ngx-chess-board.component.html',\r\n    styleUrls: ['./ngx-chess-board.component.scss'],\r\n})\r\nexport class NgxChessBoardComponent\r\n    implements OnInit, OnChanges, NgxChessBoardView, AfterViewInit {\r\n\r\n    @Input() darkTileColor = Constants.DEFAULT_DARK_TILE_COLOR;\r\n    @Input() lightTileColor: string = Constants.DEFAULT_LIGHT_TILE_COLOR;\r\n    @Input() showCoords = true;\r\n    /**\r\n     * Enabling free mode removes turn-based restriction and allows to move any piece freely!\r\n     */\r\n    @Output() moveChange = new EventEmitter<MoveChange>();\r\n    @Output() checkmate = new EventEmitter<void>();\r\n    @Output() stalemate = new EventEmitter<void>();\r\n\r\n    @ViewChild('boardRef')\r\n    boardRef: ElementRef;\r\n    @ViewChild('modal')\r\n    modal: PiecePromotionModalComponent;\r\n\r\n    pieceSize: number;\r\n    selected = false;\r\n    boardLoader: BoardLoader;\r\n    pieceIconManager: PieceIconInputManager;\r\n\r\n    engineFacade: AbstractEngineFacade;\r\n\r\n    constructor(private ngxChessBoardService: NgxChessBoardService) {\r\n        this.engineFacade = new EngineFacade(\r\n            new Board(),\r\n            this.moveChange\r\n        );\r\n    }\r\n\r\n    @Input('size')\r\n    public set size(size: number) {\r\n        if (\r\n            size &&\r\n            size >= Constants.MIN_BOARD_SIZE &&\r\n            size <= Constants.MAX_BOARD_SIZE\r\n        ) {\r\n            this.engineFacade.heightAndWidth = size;\r\n        } else {\r\n            this.engineFacade.heightAndWidth = Constants.DEFAULT_SIZE;\r\n        }\r\n        this.engineFacade.drawProvider.clear();\r\n        this.calculatePieceSize();\r\n    }\r\n\r\n    @Input('freeMode')\r\n    public set freeMode(freeMode: boolean) {\r\n        this.engineFacade.freeMode = freeMode;\r\n    }\r\n\r\n    @Input('dragDisabled')\r\n    public set dragDisabled(dragDisabled: boolean) {\r\n        this.engineFacade.dragDisabled = dragDisabled;\r\n    }\r\n\r\n    @Input('drawDisabled')\r\n    public set drawDisabled(drawDisabled: boolean) {\r\n        this.engineFacade.drawDisabled = drawDisabled;\r\n    }\r\n\r\n    @Input('pieceIcons')\r\n    public set pieceIcons(pieceIcons: PieceIconInput) {\r\n        this.pieceIconManager.pieceIconInput = pieceIcons;\r\n    }\r\n\r\n    @Input('lightDisabled')\r\n    public set lightDisabled(lightDisabled: boolean) {\r\n        this.engineFacade.lightDisabled = lightDisabled;\r\n    }\r\n\r\n    @Input('darkDisabled')\r\n    public set darkDisabled(darkDisabled: boolean) {\r\n        this.engineFacade.darkDisabled = darkDisabled;\r\n    }\r\n\r\n    @HostListener('contextmenu', ['$event'])\r\n    onRightClick(event: MouseEvent) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (\r\n            (changes.lightDisabled &&\r\n                this.lightDisabled &&\r\n                this.engineFacade.board.currentWhitePlayer) ||\r\n            (changes.darkDisabled &&\r\n                this.darkDisabled &&\r\n                !this.engineFacade.board.currentWhitePlayer)\r\n        ) {\r\n            this.engineFacade.board.possibleCaptures = [];\r\n            this.engineFacade.board.possibleMoves = [];\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.ngxChessBoardService.componentMethodCalled$.subscribe(() => {\r\n            this.engineFacade.reset();\r\n        });\r\n\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.engineFacade.modal = this.modal;\r\n        this.calculatePieceSize();\r\n    }\r\n\r\n    onMouseUp(event: MouseEvent) {\r\n        this.engineFacade.onMouseUp(\r\n            event,\r\n            this.getClickPoint(event),\r\n            this.boardRef.nativeElement.getBoundingClientRect().left,\r\n            this.boardRef.nativeElement.getBoundingClientRect().top\r\n        );\r\n    }\r\n\r\n    reverse(): void {\r\n        this.selected = false;\r\n        this.engineFacade.board.reverse();\r\n        this.engineFacade.coords.reverse();\r\n    }\r\n\r\n    updateBoard(board: Board) {\r\n        this.engineFacade.board = board;\r\n        this.boardLoader.setEngineFacade(this.engineFacade);\r\n        this.engineFacade.board.possibleCaptures = [];\r\n        this.engineFacade.board.possibleMoves = [];\r\n    }\r\n\r\n    setFEN(fen: string): void {\r\n        try {\r\n            this.engineFacade.boardLoader.setNotationProcessor(\r\n                NotationProcessorFactory.getProcessor(NotationType.FEN)\r\n            );\r\n            this.engineFacade.boardLoader.loadFEN(fen);\r\n            this.engineFacade.board.possibleCaptures = [];\r\n            this.engineFacade.board.possibleMoves = [];\r\n            this.engineFacade.coords.reset();\r\n        } catch (exception) {\r\n            this.engineFacade.boardLoader.addPieces();\r\n        }\r\n    }\r\n\r\n    setPGN(pgn: string): void {\r\n        try {\r\n            this.engineFacade.boardLoader.setNotationProcessor(\r\n                NotationProcessorFactory.getProcessor(NotationType.PGN)\r\n            );\r\n            this.engineFacade.boardLoader.loadPGN(pgn);\r\n            this.engineFacade.board.possibleCaptures = [];\r\n            this.engineFacade.board.possibleMoves = [];\r\n            this.engineFacade.coords.reset();\r\n        } catch (exception) {\r\n            console.log(exception);\r\n            this.engineFacade.boardLoader.addPieces();\r\n        }\r\n    }\r\n\r\n    getFEN(): string {\r\n        return this.engineFacade.board.fen;\r\n    }\r\n\r\n    dragEnded(event: CdkDragEnd): void {\r\n        this.engineFacade.dragEndStrategy.process(event);\r\n    }\r\n\r\n    dragStart(event: CdkDragStart): void {\r\n        this.engineFacade.dragStartStrategy.process(event);\r\n    }\r\n\r\n    onMouseDown(event: MouseEvent) {\r\n        this.engineFacade.onMouseDown(event, this.getClickPoint(event),\r\n            this.boardRef.nativeElement.getBoundingClientRect().left,\r\n            this.boardRef.nativeElement.getBoundingClientRect().top\r\n        );\r\n    }\r\n\r\n    getClickPoint(event) {\r\n        return ClickUtils.getClickPoint(\r\n            event,\r\n            this.boardRef.nativeElement.getBoundingClientRect().top,\r\n            this.boardRef.nativeElement.getBoundingClientRect().height,\r\n            this.boardRef.nativeElement.getBoundingClientRect().left,\r\n            this.boardRef.nativeElement.getBoundingClientRect().width\r\n        );\r\n    }\r\n\r\n    private calculatePieceSize() {\r\n        this.pieceSize = this.engineFacade.heightAndWidth / 10;\r\n    }\r\n\r\n\r\n    getCustomPieceIcons(piece: Piece) {\r\n        return JSON.parse(\r\n            `{ \"background-image\": \"url('${this.engineFacade.pieceIconManager.getPieceIcon(\r\n                piece\r\n            )}')\"}`\r\n        );\r\n    }\r\n\r\n    move(coords: string): void {\r\n        this.engineFacade.move(coords);\r\n    }\r\n\r\n    getMoveHistory(): HistoryMove[] {\r\n        return this.engineFacade.getMoveHistory();\r\n    }\r\n\r\n    reset(): void {\r\n        this.engineFacade.reset();\r\n    }\r\n\r\n    undo(): void {\r\n        this.engineFacade.undo();\r\n    }\r\n\r\n    addPiece(\r\n        pieceTypeInput: PieceTypeInput,\r\n        colorInput: ColorInput,\r\n        coords: string\r\n    ) {\r\n        this.engineFacade.addPiece(pieceTypeInput, colorInput, coords);\r\n    }\r\n\r\n}\r\n","import { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { NgxChessBoardComponent } from './ngx-chess-board.component';\r\nimport { PiecePromotionModalComponent } from './piece-promotion/piece-promotion-modal/piece-promotion-modal.component';\r\nimport { NgxChessBoardService } from './service/ngx-chess-board.service';\r\n\r\n@NgModule({\r\n    declarations: [NgxChessBoardComponent, PiecePromotionModalComponent],\r\n    imports: [CommonModule, DragDropModule],\r\n    exports: [NgxChessBoardComponent],\r\n})\r\nexport class NgxChessBoardModule {\r\n    static forRoot(): ModuleWithProviders<NgxChessBoardModule> {\r\n        return {\r\n            ngModule: NgxChessBoardModule,\r\n            providers: [NgxChessBoardService],\r\n        };\r\n    }\r\n}\r\n"]}