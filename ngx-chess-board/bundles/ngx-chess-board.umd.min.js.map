{"version":3,"sources":["../../../projects/ngx-chess-board/src/lib/models/pieces/point.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/draw-point.ts","../../../projects/ngx-chess-board/src/lib/engine/click/click-utils.ts","../../../projects/ngx-chess-board/src/lib/history-move-provider/history-move.ts","../../../node_modules/tslib/tslib.es6.js","../../../projects/ngx-chess-board/src/lib/models/pieces/color.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/piece.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/rook.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/king.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/bishop.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/knight.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/pawn.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/queen.ts","../../../projects/ngx-chess-board/src/lib/utils/unicode-constants.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-state.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-state-provider.ts","../../../projects/ngx-chess-board/src/lib/engine/coords/coords-provider.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/shapes/arrow.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/shapes/circle.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/colors/default-color-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/colors/color-strategy.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/draw-provider.ts","../../../projects/ngx-chess-board/src/lib/history-move-provider/history-move-provider.ts","../../../projects/ngx-chess-board/src/lib/models/move-translation.ts","../../../projects/ngx-chess-board/src/lib/utils/move-utils.ts","../../../projects/ngx-chess-board/src/lib/engine/piece-decorator/available-move-decorator.ts","../../../projects/ngx-chess-board/src/lib/engine/piece-decorator/piece-abstract-decorator.ts","../../../projects/ngx-chess-board/src/lib/piece-promotion/piece-promotion-resolver.ts","../../../projects/ngx-chess-board/src/lib/utils/constants.ts","../../../projects/ngx-chess-board/src/lib/utils/inputs/piece-icon-input-manager.ts","../../../projects/ngx-chess-board/src/lib/utils/inputs/piece-type-input.ts","../../../projects/ngx-chess-board/src/lib/engine/drag/end/default-drag-end-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/drag/end/drag-end-strategy.ts","../../../projects/ngx-chess-board/src/lib/engine/drag/start/default-drag-start-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/drag/start/drag-start-strategy.ts","../../../projects/ngx-chess-board/src/lib/engine/utils/piece-factory.ts","../../../projects/ngx-chess-board/src/lib/engine/engine-facade.ts","../../../projects/ngx-chess-board/src/lib/models/board.ts","../../../projects/ngx-chess-board/src/lib/service/ngx-chess-board.service.ts","../../../projects/ngx-chess-board/src/lib/piece-promotion/piece-promotion-modal/piece-promotion-modal.component.ts","../../../projects/ngx-chess-board/src/lib/piece-promotion/piece-promotion-modal/piece-promotion-modal.component.html","../../../projects/ngx-chess-board/src/lib/ngx-chess-board.component.html","../../../projects/ngx-chess-board/src/lib/ngx-chess-board.component.ts","../../../projects/ngx-chess-board/src/lib/ngx-chess-board.module.ts"],"names":["Point","row","col","this","prototype","isEqual","that","hasCoordsEqual","DrawPoint","x","y","color","ClickUtils","getClickPoint","event","top","height","left","width","Math","floor","getDrawingPoint","tileSize","colorStrategy","ctrl","alt","shift","xAxis","yAxis","squareSize","xx","yy","resolve","move","piece","captured","extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","call","__extends","__","constructor","create","__read","o","n","m","Symbol","iterator","r","e","i","ar","next","done","push","value","error","__spread","arguments","length","concat","Color","Piece","point","constant","relValue","board","checkPoints","Rook","_super","_this","isMovedAlready","getPossibleMoves","possiblePoints","isFieldEmpty","j","getPossibleCaptures","isFieldTakenByEnemy","WHITE","BLACK","getCoveredFields","getPieceByField","King","castledAlready","shortCastled","longCastled","isCastling","isFieldUnderAttack","longCastlePossible","isKingInCheck","pieces","leftRook","shortCastlePossible","rightRook","Bishop","Knight","Pawn","reverted","enPassantPoint","enPassantPiece","abs","Queen","UnicodeConstants","WHITE_KING","name","icon","WHITE_QUEEN","WHITE_KNIGHT","WHITE_ROOK","WHITE_PAWN","WHITE_BISHOP","BLACK_KING","BLACK_QUEEN","BLACK_KNIGHT","BLACK_ROOK","BLACK_PAWN","BLACK_BISHOP","BoardLoader","addPieces","calculateFEN","loadFEN","fen","console","log","Error","split","pointer","chunk","charAt","match","Number","pawn","setCurrentPlayer","setCastles","setEnPassant","setFullMoveCount","setBoard","currentWhitePlayer","castleChunk","includes","setRookAlreadyMoved","rook","find","BoardState","BoardStateProvider","statesSubject$","BehaviorSubject","defineProperty","states","addMove","state","getStates","pop","lastState","getLastState","filter","isEmpty","clear","getLastStateIndex","CoordsProvider","defaultXCoords","defaultYCoords","currentXCoords","currentYCoords","reverse","reset","init","Arrow","arrow","start","end","Circle","circle","drawPoint","DefaultColorProcessor","ColorStrategy","colorProcessor","setColorProcessor","DrawProvider","arrowsSubject$","circlesSubject$","arrows$","asObservable","circles$","circles","arrows","addCircle","reomveCircle","removeCircle","addArrow","removeArrow","containsCircle","checkCircle","some","containsArrow","checkArrow","HistoryMoveProvider","historyMovesSubject$","historyMove","historyMoves","lastHistoryMove","getLastMove","getAll","getLastMoveIndex","MoveTranslation","_xAxis","_yAxis","_reverted","MoveUtils","willMoveCauseCheck","currentColor","destRow","destCol","srcPiece","destPiece","isBound","format","sourcePoint","destPoint","sourceX","destX","String","fromCharCode","translateCoordsToIndex","coords","charCodeAt","AvailableMoveDecorator","pointClicked","PiecePromotionResolver","resolvePromotionChoice","index","isWhite","Constants","DEFAULT_DARK_TILE_COLOR","DEFAULT_LIGHT_TILE_COLOR","DEFAULT_SIZE","MIN_BOARD_SIZE","MAX_BOARD_SIZE","PieceTypeInput","ColorInput","PieceIconInputManager","_defaultIcons","_pieceIconInput","isDefaultIcons","undefined","pieceIconInput","getPieceIcon","whiteKingUrl","blackKingUrl","whiteQueenUrl","blackQueenUrl","whiteRookUrl","blackRookUrl","whiteBishopUrl","blackBishopUrl","whiteKnightUrl","blackKnightUrl","whitePawnUrl","blackPawnUrl","loadDefaultData","DefaultDragEndProcessor","dragEnded","source","element","nativeElement","style","zIndex","pointerEvents","touchAction","DragEndStrategy","dragEndProcessor","process","setDragEndProcessor","processor","DefaultDragStartProcessor","dragStarted","position","DragStartStrategy","dragStartProcessor","setDragStartProcessor","PieceFactory","indexes","pieceTypeInput","colorInput","LIGHT","QUEEN","KING","KNIGHT","BISHOP","ROOK","PAWN","EngineFacade","moveChange","_selected","_freeMode","disabling","heightAndWidth","dragStartStrategy","dragEndStrategy","_board","boardLoader","drawProvider","pieceIconManager","boardStateProvider","moveHistoryProvider","freeMode","undo","lastBoard","possibleCaptures","possibleMoves","getMoveHistory","saveMoveClone","clone","moveStateProvider","sourceIndexes","substring","destIndexes","getPieceByPoint","prepareActivePiece","isPointInPossibleMoves","isPointInPossibleCaptures","saveClone","movePiece","lastMoveSrc","lastMoveDest","disableSelection","pieceClicked","activePiece","onPieceClicked","handleClickEvent","isMouseDown","moving","onFreeMode","onMouseDown","button","ctrlKey","isPieceDisabled","altKey","shiftKey","onMouseUp","drawDisabled","dragDisabled","addDrawPoint","toMovePiece","newPoint","promotionIndex","HistoryMove","checkIfPawnTakesEnPassant","checkIfPawnEnpassanted","increaseFullMoveCount","checkForPawnPromote","afterMoveActions","toPromotePiece","openPromoteDialog","checkIfPawnFirstMove","checkIfRookMoved","checkIfKingMoved","blackKingChecked","whiteKingChecked","check","checkmate","checkForPossibleMoves","stalemate","checkForPat","lastMove","emit","assign","modal","open","capture","lightDisabled","darkDisabled","crtl","upPoint","fullMoveCount","addPiece","existing_1","createdPiece","Board","isXYInPossibleMoves","isXYInPossibleCaptures","isXYInSourceMove","isXYInDestMove","isXYInActiveMove","forEach","reversePoint","cloneDeep","enemyColor","field","king","getKingByColor","getCastleFENString","sort","join","toUpperCase","getEnPassantFENString","emptyFields","foundPiece","this_1","substr","concatedEnPassant","isXYInPointSelection","isKingChecked","NgxChessBoardService","componentMethodCallSource","Subject","componentMethodCalled$","factory","ɵfac","providedIn","PiecePromotionModalComponent","opened","closeCallback","onCloseCallback","display","changeSelection","selectors","viewQuery","rf","ctx","i0.ɵɵelementStart","i0.ɵɵlistener","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵstyleProp","ctx_r11","pieceSize","i0.ɵɵadvance","i0.ɵɵtextInterpolate1","ctx_r12","$event","i0","ɵɵrestoreView","_r18_1","ɵɵnextContext","dragStart","i0.ɵɵproperty","ctx_r13","engineFacade","i_r7","j_r10","ɵɵsanitizeHtml","getCustomPieceIcons","i0.ɵɵtemplate","i0.ɵɵclassProp","ctx_r8","i0.ɵɵelement","i0.ɵɵattribute","arrow_r24","circle_r25","ctx_r4","NgxChessBoardComponent","ngxChessBoardService","darkTileColor","lightTileColor","showCoords","EventEmitter","selected","size","calculatePieceSize","pieceIcons","onRightClick","preventDefault","ngOnChanges","changes","ngOnInit","subscribe","ngAfterViewInit","boardRef","getBoundingClientRect","updateBoard","setFEN","exception","getFEN","JSON","parse","ɵɵdirectiveInject","_r26_1","ɵɵreference","i0.ɵɵnamespaceSVG","i0.ɵɵnamespaceHTML","NgxChessBoardModule","forRoot","ngModule","providers","imports","CommonModule","DragDropModule","declarations","exports"],"mappings":"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","sourcesContent":["export class Point {\r\n    row: number;\r\n    col: number;\r\n\r\n    constructor(row: number, col: number) {\r\n        this.row = row;\r\n        this.col = col;\r\n    }\r\n\r\n    isEqual(that: Point) {\r\n        return that && this.row === that.row && this.col === that.col;\r\n    }\r\n\r\n    hasCoordsEqual(row: number, col: number) {\r\n        return row && col && this.row === row && this.col === col;\r\n    }\r\n}\r\n","export class DrawPoint {\r\n    x: number;\r\n    y: number;\r\n    color: string;\r\n\r\n    constructor(x: number, y: number, color: string) {\r\n        this.x = x + 0.5;\r\n        this.y = y + 0.5;\r\n        this.color = color;\r\n    }\r\n\r\n    isEqual(that: DrawPoint) {\r\n        return that && that.x === this.x && this.y === that.y;\r\n    }\r\n}\r\n","import { Point } from '../../models/pieces/point';\nimport { ColorStrategy } from '../drawing-tools/colors/color-strategy';\nimport { DrawPoint } from '../drawing-tools/draw-point';\n\nexport class ClickUtils {\n\n    static getClickPoint(\n        event: any,\n        top: number,\n        height: number,\n        left: number,\n        width: number\n    ) {\n        return new Point(\n            Math.floor((event.y - top) / (height / 8)),\n            Math.floor((event.x - left) / (width / 8)\n            )\n        );\n    }\n\n    static getDrawingPoint(\n        tileSize: number,\n        colorStrategy: ColorStrategy,\n        x: number,\n        y: number,\n        ctrl: boolean,\n        alt: boolean,\n        shift: boolean,\n        xAxis: number,\n        yAxis: number\n    ) {\n        const squareSize = tileSize / 8;\n        const xx = Math.floor(\n            (x - xAxis) /\n            squareSize\n        );\n        const yy = Math.floor(\n            (y - yAxis) /\n            squareSize\n        );\n\n        let color = colorStrategy.resolve(ctrl, shift, alt);\n\n        return new DrawPoint(\n            Math.floor(xx * squareSize + squareSize / 2),\n            Math.floor(yy * squareSize + squareSize / 2),\n            color\n        );\n    }\n\n}\n","export class HistoryMove {\n    move: string;\n    piece: string;\n    color: string;\n    x: boolean;\n\n    constructor(move: string, piece: string, color: string, captured: boolean) {\n        this.move = move;\n        this.piece = piece;\n        this.color = color;\n        this.x = captured;\n    }\n}\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export enum Color {\r\n    WHITE,\r\n    BLACK,\r\n}\r\n","import { AbstractPiece } from '../../engine/piece-decorator/abstract-piece';\nimport { PieceConstant } from '../../utils/unicode-constants';\nimport { Board } from '../board';\nimport { Color } from './color';\nimport { Point } from './point';\n\nexport abstract class Piece implements AbstractPiece {\n    point: Point;\n    color: Color;\n    constant: PieceConstant;\n    checkPoints: Point[] = [];\n    relValue: number;\n    board: Board;\n\n    constructor(\n        point: Point,\n        color: Color,\n        constant: PieceConstant,\n        relValue: number,\n        board: Board\n    ) {\n        this.color = color;\n        this.constant = constant;\n        this.point = point;\n        this.relValue = relValue;\n        this.board = board;\n    }\n\n    abstract getPossibleMoves(): Point[];\n\n    abstract getPossibleCaptures(): Point[];\n\n    abstract getCoveredFields(): Point[]; // zwraca liste punktow ktore sa puste lub istnieje na nich pionek tego samego koloru\n}\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { King } from './king';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Rook extends Piece {\r\n    isMovedAlready = false;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 5, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    col,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    col,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\nimport { Rook } from './rook';\r\n\r\nexport class King extends Piece {\r\n    castledAlready = false;\r\n    shortCastled = false;\r\n    longCastled = false;\r\n    isMovedAlready;\r\n    isCastling = false;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 0, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        // lewo\r\n        if (\r\n            this.board.isFieldEmpty(row, col - 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row, col - 1));\r\n        }\r\n\r\n        // prawo\r\n        if (\r\n            this.board.isFieldEmpty(row, col + 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row, col + 1));\r\n        }\r\n\r\n        // dol\r\n        if (\r\n            this.board.isFieldEmpty(row + 1, col) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col));\r\n        }\r\n\r\n        // gora\r\n        if (\r\n            this.board.isFieldEmpty(row - 1, col) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col));\r\n        }\r\n\r\n        // lewo gora\r\n        if (\r\n            this.board.isFieldEmpty(row - 1, col - 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col - 1));\r\n        }\r\n        // prawo gora\r\n        if (\r\n            this.board.isFieldEmpty(row - 1, col + 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col + 1));\r\n        }\r\n\r\n        // lewo dol\r\n        if (\r\n            this.board.isFieldEmpty(row + 1, col - 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col - 1));\r\n        }\r\n        // prawo dol\r\n        if (\r\n            this.board.isFieldEmpty(row + 1, col + 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col + 1));\r\n        }\r\n\r\n        if (!this.isMovedAlready) {\r\n            let longCastlePossible = true;\r\n            for (let i = col - 1; i > 0; --i) {\r\n                if (\r\n                    !this.board.isFieldEmpty(row, i) ||\r\n                    this.board.isFieldUnderAttack(\r\n                        row,\r\n                        i,\r\n                        this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                    )\r\n                ) {\r\n                    longCastlePossible = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (longCastlePossible && !this.board.isKingInCheck(\r\n                this.color,\r\n                this.board.pieces\r\n            ) && this.board.getPieceByField(row, 0)) {\r\n                const leftRook = this.board.getPieceByField(row, 0);\r\n                if (leftRook instanceof Rook) {\r\n                    if (!leftRook.isMovedAlready) {\r\n                        possiblePoints.push(new Point(row, col - 2));\r\n                    }\r\n                }\r\n            }\r\n\r\n            let shortCastlePossible = true;\r\n            for (let i = col + 1; i < 7; ++i) {\r\n                if (\r\n                    !this.board.isFieldEmpty(row, i) ||\r\n                    this.board.isFieldUnderAttack(\r\n                        row,\r\n                        i,\r\n                        this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                    )\r\n                ) {\r\n                    shortCastlePossible = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (shortCastlePossible && !this.board.isKingInCheck(\r\n                this.color,\r\n                this.board.pieces\r\n            ) && this.board.getPieceByField(row, 7)) {\r\n                const rightRook = this.board.getPieceByField(row, 7);\r\n                if (rightRook instanceof Rook) {\r\n                    if (!rightRook.isMovedAlready) {\r\n                        possiblePoints.push(new Point(row, col + 2));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // lewo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row, col - 1));\r\n        }\r\n\r\n        // prawo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row, col + 1));\r\n        }\r\n\r\n        // dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col));\r\n        }\r\n\r\n        // gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col));\r\n        }\r\n\r\n        // lewo gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col - 1));\r\n        }\r\n        // prawo gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col + 1));\r\n        }\r\n\r\n        // lewo dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col - 1));\r\n        }\r\n        // prawo dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col + 1));\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // lewo\r\n        possiblePoints.push(new Point(row, col - 1));\r\n\r\n        // prawo\r\n        possiblePoints.push(new Point(row, col + 1));\r\n\r\n        // dol\r\n        possiblePoints.push(new Point(row + 1, col));\r\n\r\n        // gora\r\n        possiblePoints.push(new Point(row - 1, col));\r\n\r\n        // lewo gora\r\n        possiblePoints.push(new Point(row - 1, col - 1));\r\n\r\n        // prawo gora\r\n        possiblePoints.push(new Point(row - 1, col + 1));\r\n\r\n        // lewo dol\r\n        possiblePoints.push(new Point(row + 1, col - 1));\r\n\r\n        // prawo dol\r\n        possiblePoints.push(new Point(row + 1, col + 1));\r\n\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { King } from './king';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Bishop extends Piece {\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 3, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures() {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Knight extends Piece {\r\n    isMovedAlready = false;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 3, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // gora -> lewo\r\n        if (this.board.isFieldEmpty(row - 2, col - 1)) {\r\n            possiblePoints.push(new Point(row - 2, col - 1));\r\n        }\r\n\r\n        // gora -> prawo\r\n        if (this.board.isFieldEmpty(row - 2, col + 1)) {\r\n            possiblePoints.push(new Point(row - 2, col + 1));\r\n        }\r\n\r\n        // lewo -> gora\r\n        if (this.board.isFieldEmpty(row - 1, col - 2)) {\r\n            possiblePoints.push(new Point(row - 1, col - 2));\r\n        }\r\n\r\n        // prawo -> gora\r\n        if (this.board.isFieldEmpty(row - 1, col + 2)) {\r\n            possiblePoints.push(new Point(row - 1, col + 2));\r\n        }\r\n\r\n        // lewo -> dol\r\n        if (this.board.isFieldEmpty(row + 1, col - 2)) {\r\n            possiblePoints.push(new Point(row + 1, col - 2));\r\n        }\r\n\r\n        // prawo -> dol\r\n        if (this.board.isFieldEmpty(row + 1, col + 2)) {\r\n            possiblePoints.push(new Point(row + 1, col + 2));\r\n        }\r\n\r\n        // dol -> lewo\r\n        if (this.board.isFieldEmpty(row + 2, col - 1)) {\r\n            possiblePoints.push(new Point(row + 2, col - 1));\r\n        }\r\n\r\n        // dol -> prawo\r\n        if (this.board.isFieldEmpty(row + 2, col + 1)) {\r\n            possiblePoints.push(new Point(row + 2, col + 1));\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // gora -> lewo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 2,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 2, col - 1));\r\n        }\r\n\r\n        // gora -> prawo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 2,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 2, col + 1));\r\n        }\r\n\r\n        // lewo -> gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col - 2,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col - 2));\r\n        }\r\n\r\n        // prawo -> gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col + 2,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col + 2));\r\n        }\r\n\r\n        // lewo -> dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col - 2,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col - 2));\r\n        }\r\n\r\n        // prawo -> dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col + 2,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col + 2));\r\n        }\r\n\r\n        // dol -> lewo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 2,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 2, col - 1));\r\n        }\r\n\r\n        // dol -> prawo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 2,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 2, col + 1));\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // gora -> lewo\r\n        possiblePoints.push(new Point(row - 2, col - 1));\r\n\r\n        // gora -> prawo\r\n        possiblePoints.push(new Point(row - 2, col + 1));\r\n\r\n        // lewo -> gora\r\n        possiblePoints.push(new Point(row - 1, col - 2));\r\n\r\n        // prawo -> gora\r\n        possiblePoints.push(new Point(row - 1, col + 2));\r\n\r\n        // lewo -> dol\r\n        possiblePoints.push(new Point(row + 1, col - 2));\r\n\r\n        // prawo -> dol\r\n        possiblePoints.push(new Point(row + 1, col + 2));\r\n\r\n        // dol -> lewo\r\n        possiblePoints.push(new Point(row + 2, col - 1));\r\n\r\n        // dol -> prawo\r\n        possiblePoints.push(new Point(row + 2, col + 1));\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Pawn extends Piece {\r\n    isMovedAlready = false;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 1, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        if (\r\n            (!this.board.reverted && this.color === Color.WHITE) ||\r\n            (this.board.reverted && this.color === Color.BLACK)\r\n        ) {\r\n            if (this.board.isFieldEmpty(row - 1, col)) {\r\n                possiblePoints.push(new Point(row - 1, col));\r\n\r\n                if (\r\n                    !this.isMovedAlready &&\r\n                    this.board.isFieldEmpty(row - 2, col)\r\n                ) {\r\n                    possiblePoints.push(new Point(row - 2, col));\r\n                }\r\n            }\r\n        } else {\r\n            if (\r\n                /*!board.isFieldTakenByEnemy(row + 1, col, Color.WHITE) &&*/ this.board.isFieldEmpty(\r\n                    row + 1,\r\n                    col\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row + 1, col));\r\n\r\n                if (\r\n                    !this.isMovedAlready &&\r\n                    this.board.isFieldEmpty(row + 2, col)\r\n                ) {\r\n                    possiblePoints.push(new Point(row + 2, col));\r\n                }\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        if (\r\n            (!this.board.reverted && this.color === Color.WHITE) ||\r\n            (this.board.reverted && this.color === Color.BLACK)\r\n        ) {\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row - 1,\r\n                    col - 1,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row - 1, col - 1));\r\n            }\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row - 1,\r\n                    col + 1,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row - 1, col + 1));\r\n            }\r\n        } else {\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row + 1,\r\n                    col - 1,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row + 1, col - 1));\r\n            }\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row + 1,\r\n                    col + 1,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row + 1, col + 1));\r\n            }\r\n        }\r\n\r\n        if (\r\n            this.board.enPassantPoint &&\r\n            this.board.enPassantPiece.color ===\r\n                (this.color === Color.WHITE ? Color.BLACK : Color.WHITE)\r\n        ) {\r\n            if (\r\n                row === this.board.enPassantPiece.point.row &&\r\n                Math.abs(this.board.enPassantPiece.point.col - col) === 1\r\n            ) {\r\n                possiblePoints.push(this.board.enPassantPoint);\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        if (\r\n            (!this.board.reverted && this.color === Color.WHITE) ||\r\n            (this.board.reverted && this.color === Color.BLACK)\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col - 1));\r\n\r\n            possiblePoints.push(new Point(row - 1, col + 1));\r\n        } else {\r\n            possiblePoints.push(new Point(row + 1, col - 1));\r\n\r\n            possiblePoints.push(new Point(row + 1, col + 1));\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { King } from './king';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Queen extends Piece {\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 9, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    col,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    col,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, col) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, col) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(row, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(row, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","export interface PieceConstant {\r\n    name: string;\r\n    icon: string;\r\n}\r\n\r\nexport const UnicodeConstants = {\r\n    WHITE_KING: { name: 'King', icon: '&#x2654;' },\r\n    WHITE_QUEEN: { name: 'Queen', icon: '&#x2655;' },\r\n    WHITE_KNIGHT: { name: 'Knight', icon: '&#x2658' },\r\n    WHITE_ROOK: { name: 'Rook', icon: '&#x2656' },\r\n    WHITE_PAWN: { name: 'Pawn', icon: '&#x2659' },\r\n    WHITE_BISHOP: { name: 'Bishop', icon: '&#x2657' },\r\n\r\n    BLACK_KING: { name: 'King', icon: '&#x265A' },\r\n    BLACK_QUEEN: { name: 'Queen', icon: '&#x265B' },\r\n    BLACK_KNIGHT: { name: 'Knight', icon: '&#x265E' },\r\n    BLACK_ROOK: { name: 'Rook', icon: '&#x265C' },\r\n    BLACK_PAWN: { name: 'Pawn', icon: '&#x265F' },\r\n    BLACK_BISHOP: { name: 'Bishop', icon: '&#x265D' },\r\n};\r\n","import { Board } from '../../models/board';\nimport { Bishop } from '../../models/pieces/bishop';\nimport { Color } from '../../models/pieces/color';\nimport { King } from '../../models/pieces/king';\nimport { Knight } from '../../models/pieces/knight';\nimport { Pawn } from '../../models/pieces/pawn';\nimport { Point } from '../../models/pieces/point';\nimport { Queen } from '../../models/pieces/queen';\nimport { Rook } from '../../models/pieces/rook';\nimport { UnicodeConstants } from '../../utils/unicode-constants';\n\nexport class BoardLoader {\n    private board: Board;\n\n    constructor(board: Board) {\n        this.board = board;\n    }\n\n    addPieces() {\n        this.board.pieces = [];\n        // piony czarne\n        for (let i = 0; i < 8; ++i) {\n            this.board.pieces.push(new Pawn(new Point(1, i), Color.BLACK, UnicodeConstants.BLACK_PAWN, this.board));\n        }\n        this.board.pieces.push(new Rook(new Point(0, 0), Color.BLACK, UnicodeConstants.BLACK_ROOK, this.board));\n        this.board.pieces.push(new Knight(new Point(0, 1), Color.BLACK, UnicodeConstants.BLACK_KNIGHT, this.board));\n        this.board.pieces.push(new Bishop(new Point(0, 2), Color.BLACK, UnicodeConstants.BLACK_BISHOP, this.board));\n        this.board.pieces.push(new Queen(new Point(0, 3), Color.BLACK, UnicodeConstants.BLACK_QUEEN, this.board));\n        this.board.pieces.push(new King(new Point(0, 4), Color.BLACK, UnicodeConstants.BLACK_KING, this.board));\n        this.board.pieces.push(new Bishop(new Point(0, 5), Color.BLACK, UnicodeConstants.BLACK_BISHOP, this.board));\n        this.board.pieces.push(new Knight(new Point(0, 6), Color.BLACK, UnicodeConstants.BLACK_KNIGHT, this.board));\n        this.board.pieces.push(new Rook(new Point(0, 7), Color.BLACK, UnicodeConstants.BLACK_ROOK, this.board));\n\n        // piony biale\n        for (let i = 0; i < 8; ++i) {\n            this.board.pieces.push(new Pawn(new Point(6, i), Color.WHITE, UnicodeConstants.WHITE_PAWN, this.board));\n        }\n        this.board.pieces.push(new Rook(new Point(7, 0), Color.WHITE, UnicodeConstants.WHITE_ROOK, this.board));\n        this.board.pieces.push(new Knight(new Point(7, 1), Color.WHITE, UnicodeConstants.WHITE_KNIGHT, this.board));\n        this.board.pieces.push(new Bishop(new Point(7, 2), Color.WHITE, UnicodeConstants.WHITE_BISHOP, this.board));\n        this.board.pieces.push(new Queen(new Point(7, 3), Color.WHITE, UnicodeConstants.WHITE_QUEEN, this.board));\n        this.board.pieces.push(new King(new Point(7, 4), Color.WHITE, UnicodeConstants.WHITE_KING, this.board));\n        this.board.pieces.push(new Bishop(new Point(7, 5), Color.WHITE, UnicodeConstants.WHITE_BISHOP, this.board));\n        this.board.pieces.push(new Knight(new Point(7, 6), Color.WHITE, UnicodeConstants.WHITE_KNIGHT, this.board));\n        this.board.pieces.push(new Rook(new Point(7, 7), Color.WHITE, UnicodeConstants.WHITE_ROOK, this.board));\n\n        this.board.calculateFEN();\n    }\n\n    loadFEN(fen: string) {\n        console.log(fen);\n        if (fen) {\n            this.board.reverted = false;\n            this.board.pieces = [];\n            const split = fen.split('/');\n            for (let i = 0; i < 8; ++i) {\n                let pointer = 0;\n                for (let j = 0; j < 8; ++j) {\n                    const chunk = split[i].charAt(j);\n                    if (chunk.match(/[0-9]/)) {\n                        pointer += Number(chunk);\n                    } else {\n                        switch (chunk) {\n                            case 'r':\n                                this.board.pieces.push(\n                                    new Rook(\n                                        new Point(i, pointer),\n                                        Color.BLACK,\n                                        UnicodeConstants.BLACK_ROOK,\n                                        this.board\n                                    )\n                                );\n                                break;\n                            case 'n':\n                                this.board.pieces.push(\n                                    new Knight(\n                                        new Point(i, pointer),\n                                        Color.BLACK,\n                                        UnicodeConstants.BLACK_KNIGHT,\n                                        this.board\n                                    )\n                                );\n\n                                break;\n                            case 'b':\n                                this.board.pieces.push(\n                                    new Bishop(\n                                        new Point(i, pointer),\n                                        Color.BLACK,\n                                        UnicodeConstants.BLACK_BISHOP,\n                                        this.board\n                                    )\n                                );\n                                break;\n                            case 'q':\n                                this.board.pieces.push(\n                                    new Queen(\n                                        new Point(i, pointer),\n                                        Color.BLACK,\n                                        UnicodeConstants.BLACK_QUEEN,\n                                        this.board\n                                    )\n                                );\n                                break;\n                            case 'k':\n                                this.board.pieces.push(\n                                    new King(\n                                        new Point(i, pointer),\n                                        Color.BLACK,\n                                        UnicodeConstants.BLACK_KING,\n                                        this.board\n                                    )\n                                );\n                                break;\n                            case 'p': {\n                                const pawn = new Pawn(\n                                    new Point(i, pointer),\n                                    Color.BLACK,\n                                    UnicodeConstants.BLACK_PAWN,\n                                    this.board\n                                );\n                                if (\n                                    (pawn.color === Color.BLACK && pawn.point.row !== 1) ||\n                                    (pawn.color === Color.WHITE && pawn.point.row !== 6)\n                                ) {\n                                    pawn.isMovedAlready = true;\n                                }\n                                this.board.pieces.push(pawn);\n                                break;\n                            }\n                            case 'R':\n                                this.board.pieces.push(\n                                    new Rook(\n                                        new Point(i, pointer),\n                                        Color.WHITE,\n                                        UnicodeConstants.WHITE_ROOK,\n                                        this.board\n                                    )\n                                );\n\n                                break;\n                            case 'N':\n                                this.board.pieces.push(\n                                    new Knight(\n                                        new Point(i, pointer),\n                                        Color.WHITE,\n                                        UnicodeConstants.WHITE_KNIGHT,\n                                        this.board\n                                    )\n                                );\n                                break;\n\n                            case 'B':\n                                this.board.pieces.push(\n                                    new Bishop(\n                                        new Point(i, pointer),\n                                        Color.WHITE,\n                                        UnicodeConstants.WHITE_BISHOP,\n                                        this.board\n                                    )\n                                );\n                                break;\n\n                            case 'Q':\n                                this.board.pieces.push(\n                                    new Queen(\n                                        new Point(i, pointer),\n                                        Color.WHITE,\n                                        UnicodeConstants.WHITE_QUEEN,\n                                        this.board\n                                    )\n                                );\n                                break;\n\n                            case 'K':\n                                this.board.pieces.push(\n                                    new King(\n                                        new Point(i, pointer),\n                                        Color.WHITE,\n                                        UnicodeConstants.WHITE_KING,\n                                        this.board\n                                    )\n                                );\n                                break;\n\n                            case 'P': {\n                                const pawn = new Pawn(\n                                    new Point(i, pointer),\n                                    Color.WHITE,\n                                    UnicodeConstants.WHITE_PAWN,\n                                    this.board\n                                );\n                                if (\n                                    (pawn.color === Color.BLACK && pawn.point.row !== 1) ||\n                                    (pawn.color === Color.WHITE && pawn.point.row !== 6)\n                                ) {\n                                    pawn.isMovedAlready = true;\n                                }\n                                this.board.pieces.push(pawn);\n                                break;\n                            }\n                        }\n                        ++pointer;\n                    }\n                }\n            }\n\n            this.setCurrentPlayer(fen);\n            this.setCastles(fen);\n            this.setEnPassant(fen);\n            this.setFullMoveCount(fen);\n        } else {\n            throw Error('Incorrect FEN provided');\n        }\n    }\n\n    setBoard(board: Board) {\n        this.board = board;\n    }\n\n    private setCurrentPlayer(fen: string) {\n        if (fen) {\n            const split = fen.split(' ');\n            this.board.currentWhitePlayer = split[1] === 'w';\n        }\n    }\n\n    private setCastles(fen: string) {\n        if (fen) {\n            const split = fen.split(' ');\n            const castleChunk = split[2];\n\n            if (!castleChunk.includes('K')) {\n                this.setRookAlreadyMoved(Color.WHITE, 7);\n            }\n\n            if (!castleChunk.includes('Q')) {\n                this.setRookAlreadyMoved(Color.WHITE, 0);\n            }\n\n            if (!castleChunk.includes('k')) {\n                this.setRookAlreadyMoved(Color.BLACK, 7);\n            }\n\n            if (!castleChunk.includes('q')) {\n                this.setRookAlreadyMoved(Color.BLACK, 0);\n            }\n        }\n    }\n\n    private setFullMoveCount(fen: string) {}\n\n    private setEnPassant(fen: string) {\n        if (fen) {\n            const split = fen.split(' ');\n            const enPassantPoint = split[3];\n\n            if (enPassantPoint === '-') {\n                return;\n            }\n\n            // if()\n        }\n    }\n\n    private setRookAlreadyMoved(color: Color, col: number) {\n        const rook = this.board.pieces.find(\n            (piece) => piece.color === color && piece instanceof Rook && piece.point.col === col\n        ) as Rook;\n\n        if(rook) {\n            rook.isMovedAlready = true;\n        }\n    }\n}\n","import { Board } from '../../models/board';\n\nexport class BoardState {\n\n    board: Board;\n\n    constructor(board: Board) {\n        this.board = board;\n    }\n\n}\n","import { BehaviorSubject } from 'rxjs';\r\nimport { BoardState } from './board-state';\r\n\r\nexport class BoardStateProvider {\r\n    statesSubject$ = new BehaviorSubject<BoardState[]>([]);\r\n\r\n    get states(): BoardState[] {\r\n        return this.statesSubject$.value;\r\n    }\r\n\r\n    set states(states: BoardState[]) {\r\n        this.statesSubject$.next(states);\r\n    }\r\n\r\n    addMove(state: BoardState) {\r\n        this.states = [...this.states, state];\r\n    }\r\n\r\n    getStates(): BoardState[] {\r\n        return this.states;\r\n    }\r\n\r\n    pop(): BoardState {\r\n        const lastState = this.getLastState();\r\n        this.states = this.states.filter((state) => state !== lastState);\r\n        return lastState;\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.states.length === 0;\r\n    }\r\n\r\n    clear() {\r\n        this.states = [];\r\n    }\r\n\r\n    getLastState() {\r\n        return this.states[this.getLastStateIndex()];\r\n    }\r\n\r\n    getLastStateIndex(): number {\r\n        return this.states.length - 1;\r\n    }\r\n}\r\n","export class CoordsProvider {\r\n    private readonly defaultXCoords: string[] = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\r\n\r\n    private readonly defaultYCoords: number[] = [8, 7, 6, 5, 4, 3, 2, 1];\r\n\r\n    private currentXCoords: string[] = [...this.defaultXCoords];\r\n    private currentYCoords: number[] = [...this.defaultYCoords];\r\n\r\n    get xCoords(): string[] {\r\n        return this.currentXCoords;\r\n    }\r\n\r\n    get yCoords(): number[] {\r\n        return this.currentYCoords;\r\n    }\r\n\r\n    reverse() {\r\n        this.currentXCoords = this.currentXCoords.reverse();\r\n        this.currentYCoords = this.currentYCoords.reverse();\r\n    }\r\n\r\n    reset() {\r\n        this.init();\r\n    }\r\n\r\n    private init() {\r\n        this.currentXCoords = [...this.defaultXCoords];\r\n        this.currentYCoords = [...this.defaultYCoords];\r\n    }\r\n}\r\n","import { DrawPoint } from '../draw-point';\n\nexport class Arrow {\n    start: DrawPoint;\n    end: DrawPoint;\n\n    isEqual(arrow: Arrow) {\n        return arrow && this.start.isEqual(arrow.start) && this.end.isEqual(arrow.end);\n    }\n}\n","import { DrawPoint } from '../draw-point';\n\nexport class Circle {\n    drawPoint: DrawPoint;\n\n    isEqual(circle: Circle) {\n        return circle && this.drawPoint.isEqual(circle.drawPoint);\n    }\n}\n","import { ColorProcessor } from './color-processor';\n\nexport class DefaultColorProcessor implements ColorProcessor{\n\n    resolve(ctrl: any, shift: any, alt: any): string{\n        let color = 'green';\n\n        if (ctrl || shift) {\n            color = 'red';\n        }\n        if (alt) {\n            color = 'blue';\n        }\n        if ((shift || ctrl) && alt) {\n            color = 'orange';\n        }\n\n        return color;\n    }\n\n}\n","import { ColorProcessor } from './color-processor';\nimport { DefaultColorProcessor } from './default-color-processor';\n\nexport class ColorStrategy {\n\n    colorProcessor: ColorProcessor;\n\n    constructor() {\n        this.colorProcessor = new DefaultColorProcessor();\n    }\n\n    resolve(ctrl: any, shift: any, alt: any) {\n        return this.colorProcessor.resolve(ctrl, shift, alt);\n    }\n\n    setColorProcessor(colorProcessor: ColorProcessor) {\n        this.colorProcessor = colorProcessor;\n    }\n\n}\n","import { BehaviorSubject } from 'rxjs';\nimport { Arrow } from './shapes/arrow';\nimport { Circle } from './shapes/circle';\n\nexport class DrawProvider {\n    private arrowsSubject$ = new BehaviorSubject<Arrow[]>([]);\n    private circlesSubject$ = new BehaviorSubject<Circle[]>([]);\n\n    public arrows$ = this.arrowsSubject$.asObservable();\n    public circles$ = this.circlesSubject$.asObservable();\n\n    private get circles(): Circle[] {\n        return this.circlesSubject$.value;\n    }\n\n    private set circles(circles: Circle[]) {\n        this.circlesSubject$.next(circles);\n    }\n\n    private get arrows(): Arrow[] {\n        return this.arrowsSubject$.value;\n    }\n\n    private set arrows(arrows: Arrow[]) {\n        this.arrowsSubject$.next(arrows);\n    }\n\n    addCircle(circle: Circle) {\n        this.circles = [...this.circles, circle];\n    }\n\n    reomveCircle(removeCircle: Circle) {\n        this.circles = this.circles.filter((circle) => !circle.isEqual(removeCircle));\n    }\n\n    addArrow(arrow: Arrow) {\n        this.arrows = [...this.arrows, arrow];\n    }\n\n    removeArrow(removeArrow: Arrow) {\n        this.arrows = this.arrows.filter((arrow) => !arrow.isEqual(removeArrow));\n    }\n\n    containsCircle(checkCircle: Circle) {\n        return this.circles.some((circle) => circle.isEqual(checkCircle));\n    }\n\n    containsArrow(checkArrow: Arrow) {\n        return this.arrows.some((arrow: Arrow) => arrow.isEqual(checkArrow));\n    }\n\n    clear() {\n        this.arrows = [];\n        this.circles = [];\n    }\n}\n","import { BehaviorSubject } from 'rxjs';\r\nimport { HistoryMove } from './history-move';\r\n\r\nexport class HistoryMoveProvider {\r\n    historyMovesSubject$ = new BehaviorSubject<HistoryMove[]>([]);\r\n\r\n    get historyMoves(): HistoryMove[] {\r\n        return this.historyMovesSubject$.value;\r\n    }\r\n\r\n    set historyMoves(states: HistoryMove[]) {\r\n        this.historyMovesSubject$.next(states);\r\n    }\r\n\r\n    addMove(historyMove: HistoryMove) {\r\n        this.historyMoves = [...this.historyMoves, historyMove];\r\n    }\r\n\r\n    pop(): HistoryMove {\r\n        const lastHistoryMove = this.getLastMove();\r\n        this.historyMoves = this.historyMoves.filter(\r\n            (state) => state !== lastHistoryMove\r\n        );\r\n        return lastHistoryMove;\r\n    }\r\n\r\n    getAll() {\r\n        return this.historyMoves;\r\n    }\r\n\r\n    clear() {\r\n        this.historyMoves = [];\r\n    }\r\n\r\n    getLastMove() {\r\n        return this.historyMoves[this.getLastMoveIndex()];\r\n    }\r\n\r\n    getLastMoveIndex() {\r\n        return this.historyMoves.length - 1;\r\n    }\r\n}\r\n","export class MoveTranslation {\r\n    private _xAxis: number;\r\n    private _yAxis: number;\r\n    private _reverted: boolean;\r\n\r\n    constructor(xAxis: number, yAxis: number, reverted: boolean) {\r\n        this._xAxis = xAxis;\r\n        this._yAxis = yAxis;\r\n        this._reverted = reverted;\r\n    }\r\n\r\n    get xAxis(): number {\r\n        return this._xAxis;\r\n    }\r\n\r\n    set xAxis(value: number) {\r\n        this._xAxis = value;\r\n    }\r\n\r\n    get yAxis(): number {\r\n        return this._yAxis;\r\n    }\r\n\r\n    set yAxis(value: number) {\r\n        this._yAxis = value;\r\n    }\r\n\r\n    get reverted(): boolean {\r\n        return this._reverted;\r\n    }\r\n\r\n    set reverted(value: boolean) {\r\n        this._reverted = value;\r\n    }\r\n}\r\n","import { Board } from '../models/board';\r\nimport { Color } from '../models/pieces/color';\r\nimport { Point } from '../models/pieces/point';\r\nimport { MoveTranslation } from '../models/move-translation';\r\n\r\nexport class MoveUtils {\r\n    public static willMoveCauseCheck(\r\n        currentColor: Color,\r\n        row: number,\r\n        col: number,\r\n        destRow: number,\r\n        destCol: number,\r\n        board: Board\r\n    ) {\r\n        const srcPiece = board.getPieceByField(row, col);\r\n        const destPiece = board.getPieceByField(destRow, destCol);\r\n\r\n        if (srcPiece) {\r\n            srcPiece.point.row = destRow;\r\n            srcPiece.point.col = destCol;\r\n        }\r\n\r\n        if (destPiece) {\r\n            board.pieces = board.pieces.filter((piece) => piece !== destPiece);\r\n        }\r\n        const isBound = board.isKingInCheck(currentColor, board.pieces);\r\n\r\n        if (srcPiece) {\r\n            srcPiece.point.col = col;\r\n            srcPiece.point.row = row;\r\n        }\r\n\r\n        if (destPiece) {\r\n            board.pieces.push(destPiece);\r\n        }\r\n\r\n        return isBound;\r\n    }\r\n\r\n    public static format(\r\n        sourcePoint: Point,\r\n        destPoint: Point,\r\n        reverted: boolean\r\n    ) {\r\n        if (reverted) {\r\n            const sourceX = 104 - sourcePoint.col;\r\n            const destX = 104 - destPoint.col;\r\n            return (\r\n                String.fromCharCode(sourceX) +\r\n                (sourcePoint.row + 1) +\r\n                String.fromCharCode(destX) +\r\n                (destPoint.row + 1)\r\n            );\r\n        } else {\r\n            const incrementX = 97;\r\n            return (\r\n                String.fromCharCode(sourcePoint.col + incrementX) +\r\n                (Math.abs(sourcePoint.row - 7) + 1) +\r\n                String.fromCharCode(destPoint.col + incrementX) +\r\n                (Math.abs(destPoint.row - 7) + 1)\r\n            );\r\n        }\r\n    }\r\n\r\n    public static translateCoordsToIndex(coords: string, reverted: boolean) {\r\n        let xAxis: number;\r\n        let yAxis: number;\r\n        if (reverted) {\r\n            xAxis = 104 - coords.charCodeAt(0);\r\n            yAxis = +coords.charAt(1) - 1;\r\n        } else {\r\n            xAxis = coords.charCodeAt(0) - 97;\r\n            yAxis = Math.abs(+coords.charAt(1) - 8);\r\n        }\r\n\r\n        return new MoveTranslation(xAxis, yAxis, reverted);\r\n    }\r\n}\r\n","import { Board } from '../../models/board';\nimport { Color } from '../../models/pieces/color';\nimport { Point } from '../../models/pieces/point';\nimport { MoveUtils } from '../../utils/move-utils';\nimport { AbstractPiece } from './abstract-piece';\nimport { PieceAbstractDecorator } from './piece-abstract-decorator';\n\nexport class AvailableMoveDecorator extends PieceAbstractDecorator {\n    private pointClicked: Point;\n    private color: Color;\n    private board: Board;\n\n    constructor(piece: AbstractPiece, pointClicked: Point, color: Color, board: Board) {\n        super(piece);\n        this.pointClicked = pointClicked;\n        this.color = color;\n        this.board = board;\n    }\n\n    getPossibleCaptures(): Point[] {\n        return this.piece\n            .getPossibleCaptures()\n            .filter(\n                (point) =>\n                    !MoveUtils.willMoveCauseCheck(\n                        this.color,\n                        this.pointClicked.row,\n                        this.pointClicked.col,\n                        point.row,\n                        point.col,\n                        this.board\n                    )\n            );\n    }\n\n    getPossibleMoves(): Point[] {\n        return this.piece\n            .getPossibleMoves()\n            .filter(\n                (point) =>\n                    !MoveUtils.willMoveCauseCheck(\n                        this.color,\n                        this.pointClicked.row,\n                        this.pointClicked.col,\n                        point.row,\n                        point.col,\n                        this.board\n                    )\n            );\n    }\n}\n","import { Point } from '../../models/pieces/point';\nimport { AbstractPiece } from './abstract-piece';\n\nexport abstract class PieceAbstractDecorator implements AbstractPiece {\n\n    piece: AbstractPiece;\n\n    protected constructor(piece: AbstractPiece) {\n        this.piece = piece;\n    }\n\n    abstract getPossibleCaptures(): Point[];\n\n    abstract getPossibleMoves(): Point[];\n\n}\n","import { Board } from '../models/board';\nimport { Bishop } from '../models/pieces/bishop';\nimport { Color } from '../models/pieces/color';\nimport { Knight } from '../models/pieces/knight';\nimport { Piece } from '../models/pieces/piece';\nimport { Queen } from '../models/pieces/queen';\nimport { Rook } from '../models/pieces/rook';\nimport { UnicodeConstants } from '../utils/unicode-constants';\n\nexport class PiecePromotionResolver {\n\n    static resolvePromotionChoice(board: Board, piece: Piece, index: number) {\n        const isWhite = piece.color === Color.WHITE;\n        switch (index) {\n            case 1:\n                board.pieces.push(\n                    new Queen(\n                        piece.point,\n                        piece.color,\n                        isWhite\n                            ? UnicodeConstants.WHITE_QUEEN\n                            : UnicodeConstants.BLACK_QUEEN,\n                        board\n                    )\n                );\n                break;\n            case 2:\n                board.pieces.push(\n                    new Rook(\n                        piece.point,\n                        piece.color,\n                        isWhite\n                            ? UnicodeConstants.WHITE_ROOK\n                            : UnicodeConstants.BLACK_ROOK,\n                        board\n                    )\n                );\n                break;\n            case 3:\n                board.pieces.push(\n                    new Bishop(\n                        piece.point,\n                        piece.color,\n                        isWhite\n                            ? UnicodeConstants.WHITE_BISHOP\n                            : UnicodeConstants.BLACK_BISHOP,\n                        board\n                    )\n                );\n                break;\n            case 4:\n                board.pieces.push(\n                    new Knight(\n                        piece.point,\n                        piece.color,\n                        isWhite\n                            ? UnicodeConstants.WHITE_KNIGHT\n                            : UnicodeConstants.BLACK_KNIGHT,\n                        board\n                    )\n                );\n                break;\n        }\n    }\n\n}\n","export class Constants {\n    static readonly DEFAULT_DARK_TILE_COLOR = 'rgb(97, 84, 61)';\n    static readonly DEFAULT_LIGHT_TILE_COLOR = '#BAA378';\n\n    static readonly DEFAULT_SIZE = 500;\n    static readonly MIN_BOARD_SIZE = 100;\n    static readonly MAX_BOARD_SIZE = 4000;\n\n}\n","import { Bishop } from '../../models/pieces/bishop';\r\nimport { Color } from '../../models/pieces/color';\r\nimport { King } from '../../models/pieces/king';\r\nimport { Knight } from '../../models/pieces/knight';\r\nimport { Pawn } from '../../models/pieces/pawn';\r\nimport { Piece } from '../../models/pieces/piece';\r\nimport { Queen } from '../../models/pieces/queen';\r\nimport { Rook } from '../../models/pieces/rook';\r\nimport { PieceIconInput } from './piece-icon-input';\r\n\r\nexport class PieceIconInputManager {\r\n\r\n    private _defaultIcons: boolean = false;\r\n    private _pieceIconInput: PieceIconInput;\r\n\r\n    get pieceIconInput(): PieceIconInput {\r\n        return this._pieceIconInput;\r\n    }\r\n\r\n    set pieceIconInput(value: PieceIconInput) {\r\n        this._pieceIconInput = value;\r\n    }\r\n\r\n\r\n    get defaultIcons(): boolean {\r\n        return this._defaultIcons;\r\n    }\r\n\r\n    set defaultIcons(value: boolean) {\r\n        this._defaultIcons = value;\r\n    }\r\n\r\n    isDefaultIcons(): boolean {\r\n        return this.pieceIconInput === undefined || this.pieceIconInput === null;\r\n    }\r\n\r\n    getPieceIcon(piece: Piece): string {\r\n        let isWhite = (piece.color === Color.WHITE);\r\n        switch (piece.constructor) {\r\n            case King:\r\n                return isWhite ? this.pieceIconInput.whiteKingUrl : this.pieceIconInput.blackKingUrl;\r\n            case Queen:\r\n                return isWhite ? this.pieceIconInput.whiteQueenUrl : this.pieceIconInput.blackQueenUrl;\r\n            case Rook:\r\n                return isWhite ? this.pieceIconInput.whiteRookUrl : this.pieceIconInput.blackRookUrl;\r\n            case Bishop:\r\n                return isWhite ? this.pieceIconInput.whiteBishopUrl : this.pieceIconInput.blackBishopUrl;\r\n            case Knight:\r\n                return isWhite ? this.pieceIconInput.whiteKnightUrl : this.pieceIconInput.blackKnightUrl;\r\n            case Pawn:\r\n                return isWhite ? this.pieceIconInput.whitePawnUrl : this.pieceIconInput.blackPawnUrl;\r\n        }\r\n    }\r\n\r\n    loadDefaultData(){\r\n        this.pieceIconInput = {\r\n            blackBishopUrl: '',\r\n            blackKingUrl: '',\r\n            blackKnightUrl: '',\r\n            blackQueenUrl: '',\r\n            blackRookUrl: '',\r\n            whiteBishopUrl: '',\r\n            whiteKingUrl: '',\r\n            whiteKnightUrl: '',\r\n            whitePawnUrl: '',\r\n            whiteQueenUrl: '',\r\n            whiteRookUrl: '',\r\n            blackPawnUrl: 'a'\r\n        }\r\n    }\r\n\r\n}\r\n","export enum PieceTypeInput {\n\n    KING = 1,\n    QUEEN = 2,\n    BISHOP = 3,\n    KNIGHT = 4,\n    ROOK = 5,\n    PAWN = 6\n\n}\n\nexport enum ColorInput {\n\n    LIGHT = 1,\n    DARK = 2\n\n}\n","import { CdkDragEnd, CdkDragStart } from '@angular/cdk/drag-drop';\nimport { DragEndProcessor } from './drag-end-processor';\n\nexport class DefaultDragEndProcessor implements DragEndProcessor {\n\n    dragEnded(event: CdkDragEnd) {\n        event.source.reset();\n        event.source.element.nativeElement.style.zIndex = '0';\n        event.source.element.nativeElement.style.pointerEvents = 'auto';\n        event.source.element.nativeElement.style.touchAction = 'auto';\n    }\n\n}\n","import { CdkDragEnd } from '@angular/cdk/drag-drop';\nimport { DefaultDragEndProcessor } from './default-drag-end-processor';\nimport { DragEndProcessor } from './drag-end-processor';\n\nexport class DragEndStrategy {\n\n    private dragEndProcessor: DragEndProcessor;\n\n    constructor() {\n        this.dragEndProcessor = new DefaultDragEndProcessor();\n    }\n\n    public process(event: CdkDragEnd): void {\n        this.dragEndProcessor.dragEnded(event);\n    }\n\n    setDragEndProcessor(processor: DragEndProcessor) {\n        this.dragEndProcessor = processor;\n    }\n\n}\n","import { CdkDragStart } from '@angular/cdk/drag-drop';\nimport { DragStartProcessor } from './drag-start-processor';\n\nexport class DefaultDragStartProcessor implements DragStartProcessor {\n\n    dragStarted(event: CdkDragStart) {\n        const style = event.source.element.nativeElement.style;\n        style.position = 'relative';\n        style.zIndex = '1000';\n        style.touchAction = 'none';\n        style.pointerEvents = 'none';\n    }\n\n}\n","import { CdkDragStart } from '@angular/cdk/drag-drop';\nimport { DefaultDragStartProcessor } from './default-drag-start-processor';\nimport { DragStartProcessor } from './drag-start-processor';\n\nexport class DragStartStrategy {\n\n    private dragStartProcessor: DragStartProcessor;\n\n    constructor() {\n        this.dragStartProcessor = new DefaultDragStartProcessor();\n    }\n\n    public process(event: CdkDragStart): void {\n        this.dragStartProcessor.dragStarted(event);\n    }\n\n    setDragStartProcessor(processor: DragStartProcessor) {\n        this.dragStartProcessor = processor;\n    }\n\n}\n","import { Board } from '../../models/board';\nimport { MoveTranslation } from '../../models/move-translation';\nimport { Bishop } from '../../models/pieces/bishop';\nimport { Color } from '../../models/pieces/color';\nimport { King } from '../../models/pieces/king';\nimport { Knight } from '../../models/pieces/knight';\nimport { Pawn } from '../../models/pieces/pawn';\nimport { Piece } from '../../models/pieces/piece';\nimport { Point } from '../../models/pieces/point';\nimport { Queen } from '../../models/pieces/queen';\nimport { Rook } from '../../models/pieces/rook';\nimport {\n    ColorInput,\n    PieceTypeInput\n} from '../../utils/inputs/piece-type-input';\nimport { UnicodeConstants } from '../../utils/unicode-constants';\n\nexport class PieceFactory {\n\n    static create(\n        indexes: MoveTranslation,\n        pieceTypeInput: PieceTypeInput,\n        colorInput: ColorInput,\n        board: Board\n    ): Piece {\n        let piece;\n        let color = colorInput === ColorInput.LIGHT\n            ? Color.WHITE\n            : Color.BLACK;\n\n        switch (pieceTypeInput) {\n            case PieceTypeInput.QUEEN:\n                piece = new Queen(\n                    new Point(indexes.yAxis, indexes.xAxis),\n                    color,\n                    color === Color.WHITE ? UnicodeConstants.WHITE_QUEEN : UnicodeConstants.BLACK_QUEEN,\n                    board\n                );\n                break;\n            case PieceTypeInput.KING:\n                piece = new King(\n                    new Point(indexes.yAxis, indexes.xAxis),\n                    color,\n                    color === Color.WHITE ? UnicodeConstants.WHITE_KING : UnicodeConstants.BLACK_KING,\n                    board\n                );\n\n                break;\n            case PieceTypeInput.KNIGHT:\n                piece = new Knight(\n                    new Point(indexes.yAxis, indexes.xAxis),\n                    color,\n                    color === Color.WHITE ? UnicodeConstants.WHITE_KNIGHT : UnicodeConstants.BLACK_KNIGHT,\n                    board\n                );\n                break;\n            case PieceTypeInput.BISHOP:\n                piece = new Bishop(\n                    new Point(indexes.yAxis, indexes.xAxis),\n                    color,\n                    color === Color.WHITE ? UnicodeConstants.WHITE_BISHOP : UnicodeConstants.BLACK_BISHOP,\n                    board\n                );\n                break;\n            case PieceTypeInput.ROOK:\n                piece = new Rook(\n                    new Point(indexes.yAxis, indexes.xAxis),\n                    color,\n                    color === Color.WHITE ? UnicodeConstants.WHITE_ROOK : UnicodeConstants.BLACK_ROOK,\n                    board\n                );\n                break;\n            case PieceTypeInput.PAWN:\n                piece = new Pawn(\n                    new Point(indexes.yAxis, indexes.xAxis),\n                    color,\n                    color === Color.WHITE ? UnicodeConstants.WHITE_PAWN : UnicodeConstants.BLACK_PAWN,\n                    board\n                );\n                break;\n        }\n\n        return piece;\n    }\n}\n","import { ElementRef, EventEmitter, ViewChild } from '@angular/core';\nimport { PiecePromotionModalComponent } from '../piece-promotion/piece-promotion-modal/piece-promotion-modal.component';\nimport { HistoryMove } from '../history-move-provider/history-move';\nimport { ColorInput, PieceTypeInput } from '../utils/inputs/piece-type-input';\n\nimport { BoardLoader } from './board-state-provider/board-loader';\nimport { BoardState } from './board-state-provider/board-state';\nimport { BoardStateProvider } from './board-state-provider/board-state-provider';\nimport { MoveStateProvider } from './board-state-provider/move-state-provider';\nimport { CoordsProvider } from './coords/coords-provider';\nimport { ClickUtils } from './click/click-utils';\nimport { Arrow } from './drawing-tools/shapes/arrow';\nimport { Circle } from './drawing-tools/shapes/circle';\nimport { ColorStrategy } from './drawing-tools/colors/color-strategy';\nimport { DrawPoint } from './drawing-tools/draw-point';\nimport { DrawProvider } from './drawing-tools/draw-provider';\nimport { HistoryMoveProvider } from '../history-move-provider/history-move-provider';\nimport { Board } from '../models/board';\nimport { Color } from '../models/pieces/color';\nimport { King } from '../models/pieces/king';\nimport { Pawn } from '../models/pieces/pawn';\nimport { Piece } from '../models/pieces/piece';\nimport { Point } from '../models/pieces/point';\nimport { Rook } from '../models/pieces/rook';\nimport { AvailableMoveDecorator } from './piece-decorator/available-move-decorator';\nimport { PiecePromotionResolver } from '../piece-promotion/piece-promotion-resolver';\nimport { Constants } from '../utils/constants';\nimport { PieceIconInputManager } from '../utils/inputs/piece-icon-input-manager';\nimport { MoveUtils } from '../utils/move-utils';\nimport { DragEndStrategy } from './drag/end/drag-end-strategy';\nimport { DragStartStrategy } from './drag/start/drag-start-strategy';\nimport { MoveChange } from './move-change';\nimport { PieceFactory } from './utils/piece-factory';\n\nexport class EngineFacade {\n\n    _board: Board;\n    _selected = false;\n    _freeMode = false;\n    drawPoint: DrawPoint;\n    drawProvider: DrawProvider;\n    disabling = false;\n    dragDisabled: boolean;\n    drawDisabled: boolean;\n    boardStateProvider: BoardStateProvider;\n    moveStateProvider: MoveStateProvider;\n    moveHistoryProvider: HistoryMoveProvider;\n    heightAndWidth: number = Constants.DEFAULT_SIZE;\n    lightDisabled: boolean;\n    darkDisabled: boolean;\n    moveChange: EventEmitter<MoveChange>;\n    boardLoader: BoardLoader;\n    coords: CoordsProvider = new CoordsProvider();\n    pieceIconManager: PieceIconInputManager;\n\n    dragStartStrategy: DragStartStrategy = new DragStartStrategy();\n    dragEndStrategy: DragEndStrategy = new DragEndStrategy();\n    colorStrategy: ColorStrategy = new ColorStrategy();\n\n    modal: PiecePromotionModalComponent;\n\n    constructor(\n        board: Board,\n        moveChange: EventEmitter<MoveChange>\n    ) {\n        this._board = board;\n        this.moveChange = moveChange;\n        this.boardLoader = new BoardLoader(this.board);\n        this.boardLoader.addPieces();\n        this.drawProvider = new DrawProvider();\n        this.pieceIconManager = new PieceIconInputManager();\n        this.boardStateProvider = new BoardStateProvider();\n        this.moveHistoryProvider = new HistoryMoveProvider();\n    }\n\n    reset(): void {\n        this.boardStateProvider.clear();\n        this.moveHistoryProvider.clear();\n        this.boardLoader.addPieces();\n        this.board.reset();\n        this.coords.reset();\n        this.drawProvider.clear();\n        this.freeMode = false;\n    }\n\n    undo(): void {\n        if (!this.boardStateProvider.isEmpty()) {\n            const lastBoard = this.boardStateProvider.pop().board;\n            if (this.board.reverted) {\n                lastBoard.reverse();\n            }\n            this.board = lastBoard;\n            this.boardLoader.setBoard(this.board);\n            this.board.possibleCaptures = [];\n            this.board.possibleMoves = [];\n            this.moveHistoryProvider.pop();\n        }\n    }\n\n    getMoveHistory(): HistoryMove[] {\n        return this.moveHistoryProvider.getAll();\n    }\n\n    saveMoveClone() {\n        const clone = this.board.clone();\n\n        if (this.board.reverted) {\n            clone.reverse();\n        }\n        this.moveStateProvider.addMove(new BoardState(clone));\n    }\n\n    move(coords: string) {\n        if (coords) {\n            const sourceIndexes = MoveUtils.translateCoordsToIndex(\n                coords.substring(0, 2),\n                this._board.reverted\n            );\n\n            const destIndexes = MoveUtils.translateCoordsToIndex(\n                coords.substring(2, 4),\n                this._board.reverted\n            );\n\n            const srcPiece = this._board.getPieceByPoint(\n                sourceIndexes.yAxis,\n                sourceIndexes.xAxis\n            );\n\n            if (srcPiece) {\n                if (\n                    (this._board.currentWhitePlayer &&\n                        srcPiece.color === Color.BLACK) ||\n                    (!this._board.currentWhitePlayer &&\n                        srcPiece.color === Color.WHITE)\n                ) {\n                    return;\n                }\n\n                this.prepareActivePiece(srcPiece, srcPiece.point);\n\n                if (\n                    this._board.isPointInPossibleMoves(\n                        new Point(destIndexes.yAxis, destIndexes.xAxis)\n                    ) ||\n                    this._board.isPointInPossibleCaptures(\n                        new Point(destIndexes.yAxis, destIndexes.xAxis)\n                    )\n                ) {\n                    this.saveClone();\n                    this.movePiece(\n                        srcPiece,\n                        new Point(destIndexes.yAxis, destIndexes.xAxis),\n                        coords.length === 5 ? +coords.substring(4, 5) : 0\n                    );\n\n                    this._board.lastMoveSrc = new Point(\n                        sourceIndexes.yAxis,\n                        sourceIndexes.xAxis\n                    );\n                    this._board.lastMoveDest = new Point(\n                        destIndexes.yAxis,\n                        destIndexes.xAxis\n                    );\n\n                    this.disableSelection();\n                } else {\n                    this.disableSelection();\n                }\n            }\n        }\n\n    }\n\n    prepareActivePiece(pieceClicked: Piece, pointClicked: Point) {\n        this._board.activePiece = pieceClicked;\n        this._selected = true;\n        this._board.possibleCaptures = new AvailableMoveDecorator(\n            pieceClicked,\n            pointClicked,\n            this._board.currentWhitePlayer ? Color.WHITE : Color.BLACK,\n            this._board\n        ).getPossibleCaptures();\n        this._board.possibleMoves = new AvailableMoveDecorator(\n            pieceClicked,\n            pointClicked,\n            this._board.currentWhitePlayer ? Color.WHITE : Color.BLACK,\n            this._board\n        ).getPossibleMoves();\n    }\n\n    onPieceClicked(pieceClicked, pointClicked) {\n        if (\n            (this._board.currentWhitePlayer && pieceClicked.color === Color.BLACK) ||\n            (!this._board.currentWhitePlayer && pieceClicked.color === Color.WHITE)\n        ) {\n            return;\n        }\n\n        this.prepareActivePiece(pieceClicked, pointClicked);\n    }\n\n    public handleClickEvent(pointClicked: Point, isMouseDown: boolean) {\n        let moving = false;\n\n        if ((\n            this._board.isPointInPossibleMoves(pointClicked) ||\n            this._board.isPointInPossibleCaptures(pointClicked)\n        ) || this._freeMode) {\n            this.saveClone();\n            this._board.lastMoveSrc = new Point(\n                this._board.activePiece.point.row,\n                this._board.activePiece.point.col\n            );\n            this._board.lastMoveDest = pointClicked;\n            this.movePiece(this._board.activePiece, pointClicked);\n\n            if (!this._board.activePiece.point.isEqual(this._board.lastMoveSrc)) {\n                moving = true;\n            }\n        }\n\n        if (isMouseDown || moving) {\n            this.disableSelection();\n        }\n        this.disableSelection();\n        const pieceClicked = this._board.getPieceByPoint(\n            pointClicked.row,\n            pointClicked.col\n        );\n        if (pieceClicked && !moving) {\n            this.onFreeMode(pieceClicked);\n            this.onPieceClicked(pieceClicked, pointClicked);\n        }\n    }\n\n    onMouseDown(\n        event: MouseEvent,\n        pointClicked: Point,\n        left?: number,\n        top?: number\n    ) {\n        if (event.button !== 0) {\n            this.drawPoint = ClickUtils.getDrawingPoint(\n                this.heightAndWidth,\n                this.colorStrategy,\n                event.x,\n                event.y,\n                event.ctrlKey,\n                event.altKey,\n                event.shiftKey,\n                left,\n                top\n            );\n            return;\n        }\n\n        this.drawProvider.clear();\n\n        if (\n            this._board.activePiece &&\n            pointClicked.isEqual(this._board.activePiece.point)\n        ) {\n            this.disabling = true;\n            return;\n        }\n\n        const pieceClicked = this._board.getPieceByPoint(\n            pointClicked.row,\n            pointClicked.col\n        );\n\n        if (this._freeMode) {\n            if (pieceClicked) {\n                if (event.ctrlKey) {\n                    this.board.pieces = this.board.pieces.filter(e => e !== pieceClicked);\n                    return;\n                }\n                this._board.currentWhitePlayer = (pieceClicked.color === Color.WHITE);\n            }\n        }\n\n        if (this.isPieceDisabled(pieceClicked)) {\n            return;\n        }\n\n        if (this._selected) {\n            this.handleClickEvent(pointClicked, true);\n        } else {\n            if (pieceClicked) {\n                this.onFreeMode(pieceClicked);\n                this.onPieceClicked(pieceClicked, pointClicked);\n            }\n        }\n    }\n\n    onMouseUp(\n        event: MouseEvent,\n        pointClicked: Point,\n        left: number,\n        top: number\n    ) {\n        if (event.button !== 0 && !this.drawDisabled) {\n            this.addDrawPoint(\n                event.x,\n                event.y,\n                event.ctrlKey,\n                event.altKey,\n                event.shiftKey,\n                left, top\n            );\n            return;\n        }\n\n        this.drawProvider.clear();\n\n        if (this.dragDisabled) {\n            return;\n        }\n\n        if (\n            this._board.activePiece &&\n            pointClicked.isEqual(this._board.activePiece.point) &&\n            this.disabling\n        ) {\n            this.disableSelection();\n            this.disabling = false;\n            return;\n        }\n        const pieceClicked = this._board.getPieceByPoint(\n            pointClicked.row,\n            pointClicked.col\n        );\n\n        if (this.isPieceDisabled(pieceClicked)) {\n            return;\n        }\n\n        if (this._selected) {\n            this.handleClickEvent(pointClicked, false);\n            //   this.possibleMoves = activePiece.getPossibleMoves();\n        }\n    }\n\n    saveClone() {\n        const clone = this._board.clone();\n\n        if (this._board.reverted) {\n            clone.reverse();\n        }\n        this.boardStateProvider.addMove(new BoardState(clone));\n    }\n\n    movePiece(toMovePiece: Piece, newPoint: Point, promotionIndex?: number) {\n        const destPiece = this._board.pieces.find(\n            (piece) =>\n                piece.point.col === newPoint.col &&\n                piece.point.row === newPoint.row\n        );\n\n        if (destPiece && toMovePiece.color !== destPiece.color) {\n            this._board.pieces = this._board.pieces.filter(\n                (piece) => piece !== destPiece\n            );\n        } else {\n            if (destPiece && toMovePiece.color === destPiece.color) {\n                return;\n            }\n        }\n\n        const move = new HistoryMove(\n            MoveUtils.format(toMovePiece.point, newPoint, this._board.reverted),\n            toMovePiece.constant.name,\n            toMovePiece.color === Color.WHITE ? 'white' : 'black',\n            !!destPiece\n        );\n        this.moveHistoryProvider.addMove(move);\n\n        if (toMovePiece instanceof King) {\n            const squaresMoved = Math.abs(newPoint.col - toMovePiece.point.col);\n            if (squaresMoved > 1) {\n                if (newPoint.col < 3) {\n                    const leftRook = this._board.getPieceByField(\n                        toMovePiece.point.row,\n                        0\n                    );\n                    if (!this._freeMode) {\n                        leftRook.point.col = this._board.reverted ? 2 : 3;\n                    }\n                } else {\n                    const rightRook = this._board.getPieceByField(\n                        toMovePiece.point.row,\n                        7\n                    );\n                    if (!this._freeMode) {\n                        rightRook.point.col = this._board.reverted ? 4 : 5;\n                    }\n                }\n            }\n        }\n\n        if (toMovePiece instanceof Pawn) {\n            this.board.checkIfPawnTakesEnPassant(newPoint);\n            this.board.checkIfPawnEnpassanted(toMovePiece, newPoint);\n        }\n\n        toMovePiece.point = newPoint;\n        this.increaseFullMoveCount();\n        this._board.currentWhitePlayer = !this._board.currentWhitePlayer;\n\n        if (!this.checkForPawnPromote(toMovePiece, promotionIndex)) {\n            this.afterMoveActions();\n        }\n    }\n\n    checkForPawnPromote(toPromotePiece: Piece, promotionIndex?: number) {\n        if (!(toPromotePiece instanceof Pawn)) {\n            return;\n        }\n\n        if (toPromotePiece.point.row === 0 || toPromotePiece.point.row === 7) {\n            this.board.pieces = this.board.pieces.filter(\n                (piece) => piece !== toPromotePiece\n            );\n\n            // When we make move manually, we pass promotion index already, so we don't need\n            // to acquire it from promote dialog\n            if (!promotionIndex) {\n                this.openPromoteDialog(toPromotePiece);\n            } else {\n                PiecePromotionResolver.resolvePromotionChoice(\n                    this.board,\n                    toPromotePiece,\n                    promotionIndex\n                );\n                this.afterMoveActions(promotionIndex);\n            }\n\n            return true;\n        }\n    }\n\n    checkIfPawnFirstMove(piece: Piece) {\n        if (piece instanceof Pawn) {\n            piece.isMovedAlready = true;\n        }\n    }\n\n    checkIfRookMoved(piece: Piece) {\n        if (piece instanceof Rook) {\n            piece.isMovedAlready = true;\n        }\n    }\n\n    checkIfKingMoved(piece: Piece) {\n        if (piece instanceof King) {\n            piece.isMovedAlready = true;\n        }\n    }\n\n    afterMoveActions(promotionIndex?: number) {\n        this.checkIfPawnFirstMove(this._board.activePiece);\n        this.checkIfRookMoved(this._board.activePiece);\n        this.checkIfKingMoved(this._board.activePiece);\n\n        this._board.blackKingChecked = this._board.isKingInCheck(\n            Color.BLACK,\n            this._board.pieces\n        );\n        this._board.whiteKingChecked = this._board.isKingInCheck(\n            Color.WHITE,\n            this._board.pieces\n        );\n        const check =\n            this._board.blackKingChecked || this._board.whiteKingChecked;\n        const checkmate =\n            this.checkForPossibleMoves(Color.BLACK) ||\n            this.checkForPossibleMoves(Color.WHITE);\n        const stalemate =\n            this.checkForPat(Color.BLACK) || this.checkForPat(Color.WHITE);\n\n        this.disabling = false;\n        this._board.calculateFEN();\n\n        const lastMove = this.moveHistoryProvider.getLastMove();\n        if (lastMove && promotionIndex) {\n            lastMove.move += promotionIndex;\n        }\n\n        this.moveChange.emit({\n            ...lastMove,\n            check,\n            checkmate,\n            stalemate,\n            fen: this._board.fen,\n            freeMode: this._freeMode\n        });\n    }\n\n    checkForPat(color: Color) {\n        if (color === Color.WHITE && !this.board.whiteKingChecked) {\n            return this.checkForPossibleMoves(color);\n        } else {\n            if (color === Color.BLACK && !this.board.blackKingChecked) {\n                return this.checkForPossibleMoves(color);\n            }\n        }\n    }\n\n    openPromoteDialog(piece: Piece) {\n        this.modal.open((index) => {\n            PiecePromotionResolver.resolvePromotionChoice(\n                this.board,\n                piece,\n                index\n            );\n            this.afterMoveActions(index);\n        });\n    }\n\n    checkForPossibleMoves(color: Color): boolean {\n        return !this.board.pieces\n            .filter((piece) => piece.color === color)\n            .some(\n                (piece) =>\n                    piece\n                        .getPossibleMoves()\n                        .some(\n                            (move) =>\n                                !MoveUtils.willMoveCauseCheck(\n                                    color,\n                                    piece.point.row,\n                                    piece.point.col,\n                                    move.row,\n                                    move.col,\n                                    this.board\n                                )\n                        ) ||\n                    piece\n                        .getPossibleCaptures()\n                        .some(\n                            (capture) =>\n                                !MoveUtils.willMoveCauseCheck(\n                                    color,\n                                    piece.point.row,\n                                    piece.point.col,\n                                    capture.row,\n                                    capture.col,\n                                    this.board\n                                )\n                        )\n            );\n    }\n\n    disableSelection() {\n        this._selected = false;\n        this._board.possibleCaptures = [];\n        this._board.activePiece = null;\n        this._board.possibleMoves = [];\n    }\n\n    /**\n     * Processes logic to allow freeMode based logic processing\n     */\n    onFreeMode(pieceClicked) {\n        if (\n            !this.freeMode ||\n            pieceClicked === undefined ||\n            pieceClicked === null\n        ) {\n            return;\n        }\n        // sets player as white in-case white pieces are selected, and vice-versa when black is selected\n        this.board.currentWhitePlayer = pieceClicked.color === Color.WHITE;\n    }\n\n    isPieceDisabled(pieceClicked: Piece) {\n        if (pieceClicked && pieceClicked.point) {\n            const foundCapture = this.board.possibleCaptures.find(\n                (capture) =>\n                    capture.col === pieceClicked.point.col &&\n                    capture.row === pieceClicked.point.row\n            );\n\n            if (foundCapture) {\n                return false;\n            }\n        }\n        return (\n            pieceClicked &&\n            ((this.lightDisabled && pieceClicked.color === Color.WHITE) ||\n                (this.darkDisabled && pieceClicked.color === Color.BLACK))\n        );\n    }\n\n    addDrawPoint(\n        x: number,\n        y: number,\n        crtl: boolean,\n        alt: boolean,\n        shift: boolean,\n        left: number,\n        top: number\n    ) {\n        const upPoint = ClickUtils.getDrawingPoint(\n            this.heightAndWidth,\n            this.colorStrategy,\n            x,\n            y,\n            crtl,\n            alt,\n            shift,\n            left,\n            top\n        );\n\n        if (this.drawPoint.isEqual(upPoint)) {\n            const circle = new Circle();\n            circle.drawPoint = upPoint;\n            if (!this.drawProvider.containsCircle(circle)) {\n                this.drawProvider.addCircle(circle);\n            } else {\n                this.drawProvider.reomveCircle(circle);\n            }\n        } else {\n            const arrow = new Arrow();\n            arrow.start = this.drawPoint;\n            arrow.end = upPoint;\n\n            if (!this.drawProvider.containsArrow(arrow)) {\n                this.drawProvider.addArrow(arrow);\n            } else {\n                this.drawProvider.removeArrow(arrow);\n            }\n        }\n    }\n\n    increaseFullMoveCount() {\n        if (!this.board.currentWhitePlayer) {\n            ++this.board.fullMoveCount;\n        }\n    }\n\n    get board(): Board {\n        return this._board;\n    }\n\n    set board(value: Board) {\n        this._board = value;\n    }\n\n    get selected(): boolean {\n        return this._selected;\n    }\n\n    set selected(value: boolean) {\n        this._selected = value;\n    }\n\n    get freeMode(): boolean {\n        return this._freeMode;\n    }\n\n    set freeMode(value: boolean) {\n        this._freeMode = value;\n    }\n\n    addPiece(\n        pieceTypeInput: PieceTypeInput,\n        colorInput: ColorInput,\n        coords: string\n    ) {\n        if (this.freeMode && coords && pieceTypeInput > 0 && colorInput > 0) {\n            let indexes = MoveUtils.translateCoordsToIndex(coords, this.board.reverted);\n            let existing = this.board.getPieceByPoint(indexes.yAxis, indexes.xAxis);\n            if(existing) {\n                this.board.pieces = this.board.pieces.filter(e => e !== existing);\n            }\n            let createdPiece = PieceFactory.create(indexes, pieceTypeInput, colorInput, this.board);\n            this.saveClone();\n            this.board.pieces.push(createdPiece);\n            this.afterMoveActions();\n        }\n    }\n}\n","import { cloneDeep } from 'lodash';\nimport { Bishop } from './pieces/bishop';\nimport { Color } from './pieces/color';\nimport { King } from './pieces/king';\nimport { Knight } from './pieces/knight';\nimport { Pawn } from './pieces/pawn';\nimport { Piece } from './pieces/piece';\nimport { Point } from './pieces/point';\nimport { Queen } from './pieces/queen';\nimport { Rook } from './pieces/rook';\n\nexport class Board {\n    board: number[][] = [];\n    pieces: Piece[] = [];\n\n    enPassantPoint: Point = null;\n    enPassantPiece: Piece = null;\n    lastMoveSrc: Point = null;\n    lastMoveDest: Point = null;\n    activePiece: Piece;\n\n    blackKingChecked: boolean;\n    possibleCaptures: any[] = [];\n    possibleMoves: Point[] = [];\n    whiteKingChecked: boolean;\n\n    currentWhitePlayer = true;\n    reverted = false;\n    fullMoveCount = 1;\n    fen: string;\n\n    constructor() {\n        for (let i = 0; i < 8; ++i) {\n            this.board[i] = [];\n            for (let j = 0; j < 8; ++j) {\n                this.board[i][j] = 0;\n            }\n        }\n    }\n\n    isXYInPossibleMoves(row: number, col: number): boolean {\n        return this.possibleMoves.some((move) => move.row === row && move.col === col);\n    }\n\n    isXYInPossibleCaptures(row: number, col: number): boolean {\n        return this.possibleCaptures.some((capture) => capture.row === row && capture.col === col);\n    }\n\n    isXYInSourceMove(i: number, j: number) {\n        return this.lastMoveSrc && this.lastMoveSrc.row === i && this.lastMoveSrc.col === j;\n    }\n\n    isXYInDestMove(i: number, j: number) {\n        return this.lastMoveDest && this.lastMoveDest.row === i && this.lastMoveDest.col === j;\n    }\n\n    isXYInActiveMove(i: number, j: number) {\n        return this.activePiece && this.activePiece.point.row === i && this.activePiece.point.col === j;\n    }\n\n    isPointInPossibleMoves(point: Point): boolean {\n        return this.possibleMoves.some((move) => move.row === point.row && move.col === point.col);\n    }\n\n    isPointInPossibleCaptures(point: Point): boolean {\n        return this.possibleCaptures.some((capture) => capture.row === point.row && capture.col === point.col);\n    }\n\n    reset() {\n        this.lastMoveDest = null;\n        this.lastMoveSrc = null;\n        this.whiteKingChecked = false;\n        this.blackKingChecked = false;\n        this.possibleCaptures = [];\n        this.possibleMoves = [];\n        this.activePiece = null;\n        this.reverted = false;\n        this.currentWhitePlayer = true;\n        this.enPassantPoint = null;\n        this.enPassantPiece = null;\n        this.fullMoveCount = 1;\n        this.calculateFEN();\n    }\n\n        reverse() {\n        this.reverted = !this.reverted;\n        this.activePiece = null;\n        this.possibleMoves = [];\n        this.possibleCaptures = [];\n\n        this.pieces.forEach((piece: Piece) => this.reversePoint(piece.point));\n\n        this.reversePoint(this.lastMoveSrc);\n\n        if (this.enPassantPoint && this.enPassantPiece) {\n            this.reversePoint(this.enPassantPoint);\n        }\n    }\n\n    clone(): Board {\n        return cloneDeep(this);\n    }\n\n    isFieldTakenByEnemy(row: number, col: number, enemyColor: Color): boolean {\n        if (row > 7 || row < 0 || col > 7 || col < 0) {\n            return false;\n        }\n        return this.pieces.some(\n            (piece) => piece.point.col === col && piece.point.row === row && piece.color === enemyColor\n        );\n    }\n\n    isFieldEmpty(row: number, col: number): boolean {\n        if (row > 7 || row < 0 || col > 7 || col < 0) {\n            return false;\n        }\n        return !this.pieces.some((piece) => piece.point.col === col && piece.point.row === row);\n    }\n\n    isFieldUnderAttack(row: number, col: number, color: Color) {\n        return this.pieces\n            .filter((piece) => piece.color === color)\n            .some((piece) => piece.getCoveredFields().some((field) => field.col === col && field.row === row));\n    }\n\n    getPieceByField(row: number, col: number): Piece {\n        if (this.isFieldEmpty(row, col)) {\n            //   throw new Error('Piece not found');\n            return undefined;\n        }\n\n        return this.pieces.find((piece) => piece.point.col === col && piece.point.row === row);\n    }\n\n    isKingInCheck(color: Color, pieces: Piece[]): boolean {\n        const king = pieces.find((piece) => piece.color === color && piece instanceof King);\n\n        if (king) {\n            return pieces.some(\n                (piece) =>\n                    piece\n                        .getPossibleCaptures()\n                        .some((point) => point.col === king.point.col && point.row === king.point.row) &&\n                    piece.color !== color\n            );\n        }\n        return false;\n    }\n\n    getKingByColor(color: Color): King {\n        return this.pieces.find((piece) => piece instanceof King && piece.color === color) as King;\n    }\n\n    getCastleFENString(color: Color) {\n        const king = this.getKingByColor(color);\n\n        if (!king || king.isMovedAlready) {\n            return '';\n        }\n\n        let fen = '';\n        const leftRook = this.getPieceByField(king.point.row, 0);\n        const rightRook = this.getPieceByField(king.point.row, 7);\n\n        if (rightRook instanceof Rook && rightRook.color === color) {\n            if (!rightRook.isMovedAlready) {\n                fen += this.reverted ? 'q' : 'k';\n            }\n        }\n\n        if (leftRook instanceof Rook && leftRook.color === color) {\n            if (!leftRook.isMovedAlready) {\n                fen += this.reverted ? 'k' : 'q';\n            }\n        }\n\n        fen = fen.split('').sort().join('');\n        return color === Color.BLACK ? fen : fen.toUpperCase();\n    }\n\n    getEnPassantFENString() {\n        if (this.enPassantPoint) {\n            if (this.reverted) {\n                return String.fromCharCode(104 - this.enPassantPoint.col) + (this.enPassantPoint.row + 1);\n            } else {\n                return String.fromCharCode(97 + this.enPassantPoint.col) + (Math.abs(this.enPassantPoint.row - 7) + 1);\n            }\n        } else {\n            return '-';\n        }\n    }\n\n    calculateFEN() {\n        let fen = '';\n        for (let i = 0; i < 8; ++i) {\n            let emptyFields = 0;\n            for (let j = 0; j < 8; ++j) {\n                const foundPiece = this.pieces.find((piece) => piece.point.col === j && piece.point.row === i);\n                if (foundPiece) {\n                    if (emptyFields > 0) {\n                        fen += emptyFields;\n                        emptyFields = 0;\n                    }\n\n                    if (foundPiece instanceof Rook) {\n                        fen += foundPiece.color === Color.BLACK ? 'r' : 'R';\n                    } else {\n                        if (foundPiece instanceof Knight) {\n                            fen += foundPiece.color === Color.BLACK ? 'n' : 'N';\n                        } else {\n                            if (foundPiece instanceof Bishop) {\n                                fen += foundPiece.color === Color.BLACK ? 'b' : 'B';\n                            } else {\n                                if (foundPiece instanceof Queen) {\n                                    fen += foundPiece.color === Color.BLACK ? 'q' : 'Q';\n                                } else {\n                                    if (foundPiece instanceof King) {\n                                        fen += foundPiece.color === Color.BLACK ? 'k' : 'K';\n                                    } else {\n                                        if (foundPiece instanceof Pawn) {\n                                            fen += foundPiece.color === Color.BLACK ? 'p' : 'P';\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    ++emptyFields;\n                }\n            }\n\n            if (emptyFields > 0) {\n                fen += emptyFields;\n            }\n\n            fen += '/';\n        }\n\n        fen = fen.substr(0, fen.length - 1);\n\n        if (this.reverted) {\n            fen = fen.split('').reverse().join('');\n        }\n\n        fen += ' ' + (this.currentWhitePlayer ? 'w' : 'b');\n        const whiteEnPassant = this.getCastleFENString(Color.WHITE);\n        const blackEnPassant = this.getCastleFENString(Color.BLACK);\n        let concatedEnPassant = whiteEnPassant + blackEnPassant;\n        if (!concatedEnPassant) {\n            concatedEnPassant = '-';\n        }\n\n        fen += ' ' + concatedEnPassant;\n        fen += ' ' + this.getEnPassantFENString();\n        fen += ' ' + 0;\n        fen += ' ' + this.fullMoveCount;\n        this.fen = fen;\n    }\n\n    isXYInPointSelection(i: number, j: number) {\n        return false;\n    }\n\n    private reversePoint(point: Point) {\n        if (point) {\n            point.row = Math.abs(point.row - 7);\n            point.col = Math.abs(point.col - 7);\n        }\n    }\n\n    public getPieceByPoint(row: number, col: number): Piece {\n        row = Math.floor(row);\n        col = Math.floor(col);\n        return this.pieces.find(\n            (piece) => piece.point.col === col && piece.point.row === row\n        );\n    }\n\n    public checkIfPawnTakesEnPassant(newPoint: Point) {\n        if (newPoint.isEqual(this.enPassantPoint)) {\n            this.pieces = this.pieces.filter(\n                (piece) => piece !== this.enPassantPiece\n            );\n            this.enPassantPoint = null;\n            this.enPassantPiece = null;\n        }\n    }\n\n    public checkIfPawnEnpassanted(piece: Pawn, newPoint: Point) {\n        if (Math.abs(piece.point.row - newPoint.row) > 1) {\n            this.enPassantPiece = piece;\n            this.enPassantPoint = new Point(\n                (piece.point.row + newPoint.row) / 2,\n                piece.point.col\n            );\n        } else {\n            this.enPassantPoint = null;\n            this.enPassantPiece = null;\n        }\n    }\n\n    isKingChecked(piece: Piece) {\n        if (piece instanceof King) {\n            return piece.color === Color.WHITE\n                ? this.whiteKingChecked\n                : this.blackKingChecked;\n        }\n    }\n\n}\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class NgxChessBoardService {\r\n    private componentMethodCallSource = new Subject<any>();\r\n\r\n    componentMethodCalled$ = this.componentMethodCallSource.asObservable();\r\n\r\n    reset() {\r\n        this.componentMethodCallSource.next();\r\n    }\r\n}\r\n","import {Component, ElementRef, OnInit, ViewChild} from '@angular/core';\nimport {Piece} from '../../models/pieces/piece';\nimport {Observable} from 'rxjs';\n\n@Component({\n    selector: 'app-piece-promotion-modal',\n    templateUrl: './piece-promotion-modal.component.html',\n    styleUrls: ['./piece-promotion-modal.component.scss']\n})\nexport class PiecePromotionModalComponent {\n\n    @ViewChild('myModal', {static: false}) modal: ElementRef;\n\n    opened = false;\n    private onCloseCallback: (index: number) => void;\n\n    open(closeCallback: (index: number) => void) {\n        this.opened = true;\n        this.onCloseCallback = closeCallback;\n        this.modal.nativeElement.style.display = 'block';\n    }\n\n    changeSelection(index: number){\n        this.modal.nativeElement.style.display = 'none';\n        this.opened = false;\n        this.onCloseCallback(index);\n    }\n\n}\n","<div #myModal class=\"container\">\r\n    <div class=\"wrapper\">\r\n        <div class=\"content\">\r\n            <div class=\"piece-wrapper\">\r\n                <div class=\"piece\" (click)=\"changeSelection(1)\">&#x265B;</div>\r\n                <div class=\"piece\" (click)=\"changeSelection(2)\">&#x265C;</div>\r\n                <div class=\"piece\" (click)=\"changeSelection(3)\">&#x265D;</div>\r\n                <div class=\"piece\" (click)=\"changeSelection(4)\">&#x265E;</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","<div\n    id=\"board\"\n    [style.height.px]=\"engineFacade.heightAndWidth\"\n    [style.width.px]=\"engineFacade.heightAndWidth\"\n    (pointerdown)=\"!modal.opened && onMouseDown($event)\"\n    (pointerup)=\"!modal.opened && onMouseUp($event)\"\n    #boardRef\n>\n    <div id=\"drag\">\n        <div\n            class=\"board-row\"\n            *ngFor=\"let row of engineFacade.board.board; let i = index\"\n        >\n            <div\n                class=\"board-col\"\n                [class.current-selection]=\"engineFacade.board.isXYInActiveMove(i,j)\"\n                [class.dest-move]=\"engineFacade.board.isXYInDestMove(i,j)\"\n                [class.king-check]=\" engineFacade.board.isKingChecked(engineFacade.board.getPieceByPoint(i,j))\"\n                [class.point-circle]=\"engineFacade.board.isXYInPointSelection(i, j)\"\n                [class.possible-capture]=\"engineFacade.board.isXYInPossibleCaptures(i, j)\"\n                [class.possible-point]=\"engineFacade.board.isXYInPossibleMoves(i, j)\"\n                [class.source-move]=\"engineFacade.board.isXYInSourceMove(i, j)\"\n                [style.background-color]=\"((i + j) % 2 === 0 ) ? lightTileColor : darkTileColor\"\n                *ngFor=\"let col of row; let j = index\"\n            >\n                <span\n                    class=\"yCoord\"\n                    [style.color]=\"(i % 2 === 0) ? lightTileColor : darkTileColor\"\n                    [style.font-size.px]=\"pieceSize / 4\"\n                    *ngIf=\"showCoords && j === 7\"\n                >\n                    {{engineFacade.coords.yCoords[i]}}\n                </span>\n                <span\n                    class=\"xCoord\"\n                    [style.color]=\"(j % 2 === 0) ? lightTileColor : darkTileColor\"\n                    [style.font-size.px]=\"pieceSize / 4\"\n                    *ngIf=\"showCoords && i === 7\"\n                >\n                    {{engineFacade.coords.xCoords[j]}}\n                </span>\n                <div\n                    *ngIf=\"engineFacade.board.getPieceByPoint(i, j) as piece\"\n                    style=\"height:100%; width:100%\"\n                >\n                    <div\n                        [cdkDragDisabled]=\"engineFacade.dragDisabled\"\n                        [innerHTML]=\"engineFacade.pieceIconManager.isDefaultIcons() ? engineFacade.board.getPieceByPoint(i,j).constant.icon : ''\"\n                        [ngClass]=\"'piece'\"\n                        [style.font-size]=\"pieceSize + 'px'\"\n                        [ngStyle]=\"engineFacade.pieceIconManager.isDefaultIcons() ? '' : getCustomPieceIcons(engineFacade.board.getPieceByPoint(i,j))\"\n                        (cdkDragEnded)=\"dragEnded($event)\"\n                        (cdkDragStarted)=\"dragStart($event)\"\n                        cdkDrag\n                    >\n                    </div>\n                </div>\n            </div>\n        </div>\n    </div>\n    <svg\n        [attr.height]=\"engineFacade.heightAndWidth\"\n        [attr.width]=\"engineFacade.heightAndWidth\"\n        style=\"position:absolute; top:0; pointer-events: none\"\n    >\n        <defs *ngFor=\"let color of ['red', 'green', 'blue', 'orange']\">\n            <marker\n                [id]=\"color + 'Arrow'\"\n                markerHeight=\"13\"\n                markerWidth=\"13\"\n                orient=\"auto\"\n                refX=\"9\"\n                refY=\"6\"\n            >\n                <path\n                    [style.fill]=\"color\"\n                    d=\"M2,2 L2,11 L10,6 L2,2\"\n                ></path>\n            </marker>\n        </defs>\n        <line\n            class=\"arrow\"\n            [attr.marker-end]=\"'url(#' + arrow.end.color + 'Arrow)'\"\n            [attr.stroke]=\"arrow.end.color\"\n            [attr.x1]=\"arrow.start.x\"\n            [attr.x2]=\"arrow.end.x\"\n            [attr.y1]=\"arrow.start.y\"\n            [attr.y2]=\"arrow.end.y\"\n            *ngFor=\"let arrow of engineFacade.drawProvider.arrows$ | async\"\n        ></line>\n        <circle\n            [attr.cx]=\"circle.drawPoint.x\"\n            [attr.cy]=\"circle.drawPoint.y\"\n            [attr.r]=\"engineFacade.heightAndWidth / 18\"\n            [attr.stroke]=\"circle.drawPoint.color\"\n            *ngFor=\"let circle of engineFacade.drawProvider.circles$ | async\"\n            fill-opacity=\"0.0\"\n            stroke-width=\"2\"\n        ></circle>\n    </svg>\n    <app-piece-promotion-modal #modal></app-piece-promotion-modal>\n</div>\n","import { CdkDragEnd, CdkDragStart } from '@angular/cdk/drag-drop';\nimport {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges, ViewChild,\n} from '@angular/core';\nimport { BoardLoader } from './engine/board-state-provider/board-loader';\n\nimport { ClickUtils } from './engine/click/click-utils';\nimport { EngineFacade } from './engine/engine-facade';\nimport { MoveChange } from './engine/move-change';\nimport { HistoryMove } from './history-move-provider/history-move';\nimport { Board } from './models/board';\nimport { Piece } from './models/pieces/piece';\nimport { NgxChessBoardView } from './ngx-chess-board-view';\nimport { PiecePromotionModalComponent } from './piece-promotion/piece-promotion-modal/piece-promotion-modal.component';\n\nimport { NgxChessBoardService } from './service/ngx-chess-board.service';\nimport { Constants } from './utils/constants';\nimport { PieceIconInput } from './utils/inputs/piece-icon-input';\nimport { PieceIconInputManager } from './utils/inputs/piece-icon-input-manager';\nimport { ColorInput, PieceTypeInput } from './utils/inputs/piece-type-input';\n\n\n@Component({\n    selector: 'ngx-chess-board',\n    templateUrl: './ngx-chess-board.component.html',\n    styleUrls: ['./ngx-chess-board.component.scss'],\n})\nexport class NgxChessBoardComponent\n    implements OnInit, OnChanges, NgxChessBoardView , AfterViewInit{\n\n    @Input() darkTileColor = Constants.DEFAULT_DARK_TILE_COLOR;\n    @Input() lightTileColor: string = Constants.DEFAULT_LIGHT_TILE_COLOR;\n    @Input() showCoords = true;\n    /**\n     * Enabling free mode removes turn-based restriction and allows to move any piece freely!\n     */\n    @Output() moveChange = new EventEmitter<MoveChange>();\n    @Output() checkmate = new EventEmitter<void>();\n    @Output() stalemate = new EventEmitter<void>();\n\n    @ViewChild('boardRef')\n    boardRef: ElementRef;\n    @ViewChild('modal')\n    modal: PiecePromotionModalComponent;\n\n    pieceSize: number;\n    selected = false;\n    boardLoader: BoardLoader;\n    pieceIconManager: PieceIconInputManager;\n    engineFacade: EngineFacade;\n\n    constructor(private ngxChessBoardService: NgxChessBoardService) {\n        this.engineFacade = new EngineFacade(\n            new Board(),\n            this.moveChange\n        );\n    }\n\n    @Input('size')\n    public set size(size: number) {\n        if (\n            size &&\n            size >= Constants.MIN_BOARD_SIZE &&\n            size <= Constants.MAX_BOARD_SIZE\n        ) {\n            this.engineFacade.heightAndWidth = size;\n        } else {\n            this.engineFacade.heightAndWidth = Constants.DEFAULT_SIZE;\n        }\n        this.engineFacade.drawProvider.clear();\n        this.calculatePieceSize();\n    }\n\n    @Input('freeMode')\n    public set freeMode(freeMode: boolean) {\n        this.engineFacade.freeMode = freeMode;\n    }\n\n    @Input('dragDisabled')\n    public set dragDisabled(dragDisabled: boolean) {\n        this.engineFacade.dragDisabled = dragDisabled;\n    }\n\n    @Input('drawDisabled')\n    public set drawDisabled(drawDisabled: boolean) {\n        this.engineFacade.drawDisabled = drawDisabled;\n    }\n\n    @Input('pieceIcons')\n    public set pieceIcons(pieceIcons: PieceIconInput) {\n        this.pieceIconManager.pieceIconInput = pieceIcons;\n    }\n\n    @Input('lightDisabled')\n    public set lightDisabled(lightDisabled: boolean) {\n        this.engineFacade.lightDisabled = lightDisabled;\n    }\n\n    @Input('darkDisabled')\n    public set darkDisabled(darkDisabled: boolean) {\n        this.engineFacade.darkDisabled = darkDisabled;\n    }\n\n    @HostListener('contextmenu', ['$event'])\n    onRightClick(event: MouseEvent) {\n        event.preventDefault();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (\n            (changes.lightDisabled &&\n                this.lightDisabled &&\n                this.engineFacade.board.currentWhitePlayer) ||\n            (changes.darkDisabled &&\n                this.darkDisabled &&\n                !this.engineFacade.board.currentWhitePlayer)\n        ) {\n            this.engineFacade.board.possibleCaptures = [];\n            this.engineFacade.board.possibleMoves = [];\n        }\n    }\n\n    ngOnInit() {\n        this.ngxChessBoardService.componentMethodCalled$.subscribe(() => {\n            this.engineFacade.reset();\n        });\n        this.calculatePieceSize();\n    }\n\n    ngAfterViewInit(): void {\n        this.engineFacade.modal = this.modal;\n    }\n\n    onMouseUp(event: MouseEvent) {\n        this.engineFacade.onMouseUp(\n            event,\n            this.getClickPoint(event),\n            this.boardRef.nativeElement.getBoundingClientRect().left,\n            this.boardRef.nativeElement.getBoundingClientRect().top\n        );\n    }\n\n    reverse(): void {\n        this.selected = false;\n        this.engineFacade.board.reverse();\n        this.engineFacade.coords.reverse();\n    }\n\n    updateBoard(board: Board) {\n        this.engineFacade.board = board;\n        this.boardLoader.setBoard(this.engineFacade.board);\n        this.engineFacade.board.possibleCaptures = [];\n        this.engineFacade.board.possibleMoves = [];\n    }\n\n    setFEN(fen: string): void {\n        try {\n            this.engineFacade.boardLoader.loadFEN(fen);\n            this.engineFacade.board.possibleCaptures = [];\n            this.engineFacade.board.possibleMoves = [];\n            this.engineFacade.coords.reset();\n        } catch (exception) {\n            this.engineFacade.boardLoader.addPieces();\n        }\n    }\n\n    getFEN(): string {\n        return this.engineFacade.board.fen;\n    }\n\n    dragEnded(event: CdkDragEnd): void {\n        this.engineFacade.dragEndStrategy.process(event);\n    }\n\n    dragStart(event: CdkDragStart): void {\n        this.engineFacade.dragStartStrategy.process(event);\n    }\n\n    onMouseDown(event: MouseEvent) {\n        this.engineFacade.onMouseDown(event, this.getClickPoint(event),\n            this.boardRef.nativeElement.getBoundingClientRect().left,\n            this.boardRef.nativeElement.getBoundingClientRect().top\n        );\n    }\n\n    getClickPoint(event) {\n        return ClickUtils.getClickPoint(\n            event,\n            this.boardRef.nativeElement.getBoundingClientRect().top,\n            this.boardRef.nativeElement.getBoundingClientRect().height,\n            this.boardRef.nativeElement.getBoundingClientRect().left,\n            this.boardRef.nativeElement.getBoundingClientRect().width\n        );\n    }\n\n    private calculatePieceSize() {\n        this.pieceSize = this.engineFacade.heightAndWidth / 10;\n    }\n\n\n    getCustomPieceIcons(piece: Piece) {\n        return JSON.parse(\n            `{ \"background-image\": \"url('${this.engineFacade.pieceIconManager.getPieceIcon(\n                piece\n            )}')\"}`\n        );\n    }\n\n    move(coords: string): void {\n        this.engineFacade.move(coords);\n    }\n\n    getMoveHistory(): HistoryMove[] {\n        return this.engineFacade.getMoveHistory();\n    }\n\n    reset(): void {\n        this.engineFacade.reset();\n    }\n\n    undo(): void {\n        this.engineFacade.undo();\n    }\n\n    addPiece(\n        pieceTypeInput: PieceTypeInput,\n        colorInput: ColorInput,\n        coords: string\n    ) {\n        this.engineFacade.addPiece(pieceTypeInput, colorInput, coords);\n    }\n\n}\n","import { DragDropModule } from '@angular/cdk/drag-drop';\nimport { CommonModule } from '@angular/common';\nimport { ModuleWithProviders, NgModule } from '@angular/core';\nimport { NgxChessBoardComponent } from './ngx-chess-board.component';\nimport { PiecePromotionModalComponent } from './piece-promotion/piece-promotion-modal/piece-promotion-modal.component';\nimport { NgxChessBoardService } from './service/ngx-chess-board.service';\n\n@NgModule({\n    declarations: [NgxChessBoardComponent, PiecePromotionModalComponent],\n    imports: [CommonModule, DragDropModule],\n    exports: [NgxChessBoardComponent],\n})\nexport class NgxChessBoardModule {\n    static forRoot(): ModuleWithProviders<NgxChessBoardModule> {\n        return {\n            ngModule: NgxChessBoardModule,\n            providers: [NgxChessBoardService],\n        };\n    }\n}\n"]}