{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","../../../projects/ngx-chess-board/src/lib/models/pieces/color.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/piece.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/notation-processors/notation-processor-factory.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/point.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/rook.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/king.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/bishop.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/knight.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/pawn.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/queen.ts","../../../projects/ngx-chess-board/src/lib/utils/unicode-constants.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/notation-processors/fen-loader/default-fen-processor.ts","../../../projects/ngx-chess-board/src/lib/models/move-translation.ts","../../../projects/ngx-chess-board/src/lib/utils/move-utils.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/default-pieces-loader.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/notation-processors/pgn-loader/default-pgn-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/draw-point.ts","../../../projects/ngx-chess-board/src/lib/engine/click/click-utils.ts","../../../projects/ngx-chess-board/src/lib/history-move-provider/history-move.ts","../../../projects/ngx-chess-board/src/lib/history-move-provider/history-move-provider.ts","../../../projects/ngx-chess-board/src/lib/utils/constants.ts","../../../projects/ngx-chess-board/src/lib/utils/inputs/piece-icon-input-manager.ts","../../../projects/ngx-chess-board/src/lib/utils/inputs/piece-type-input.ts","../../../projects/ngx-chess-board/src/lib/engine/coords/coords-provider.ts","../../../projects/ngx-chess-board/src/lib/engine/drag/end/animation-drag-end-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/drag/end/drag-end-strategy.ts","../../../projects/ngx-chess-board/src/lib/engine/drag/start/animation-drag-start-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/drag/start/drag-start-strategy.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/colors/default-color-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/colors/color-strategy.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/draw-provider.ts","../../../projects/ngx-chess-board/src/lib/engine/pgn/default-pgn-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/pgn/abstract-pgn-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/abstract-engine-facade.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/board-loader.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-state/board-state.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-state/board-state-provider.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/shapes/arrow.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/shapes/circle.ts","../../../projects/ngx-chess-board/src/lib/engine/piece-decorator/available-move-decorator.ts","../../../projects/ngx-chess-board/src/lib/engine/piece-decorator/piece-abstract-decorator.ts","../../../projects/ngx-chess-board/src/lib/piece-promotion/piece-promotion-resolver.ts","../../../projects/ngx-chess-board/src/lib/engine/utils/piece-factory.ts","../../../projects/ngx-chess-board/src/lib/engine/engine-facade.ts","../../../projects/ngx-chess-board/src/lib/models/board.ts","../../../projects/ngx-chess-board/src/lib/service/ngx-chess-board.service.ts","../../../projects/ngx-chess-board/src/lib/ngx-chess-board.component.ts","../../../projects/ngx-chess-board/src/lib/piece-promotion/piece-promotion-modal/piece-promotion-modal.component.ts","../../../projects/ngx-chess-board/src/lib/ngx-chess-board.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","__","this","constructor","create","__values","o","s","Symbol","iterator","m","i","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","Color","NotationType","Piece","point","color","constant","relValue","board","checkPoints","Point","row","col","isEqual","that","hasCoordsEqual","isInRange","clone","Rook","_super","_this","isMovedAlready","getPossibleMoves","possiblePoints","isFieldEmpty","j","getPossibleCaptures","isFieldTakenByEnemy","WHITE","BLACK","getCoveredFields","getPieceByField","King","castledAlready","shortCastled","longCastled","isCastling","isFieldUnderAttack","longCastlePossible","isKingInCheck","pieces","leftRook","shortCastlePossible","rightRook","Bishop","Knight","Pawn","reverted","enPassantPoint","enPassantPiece","Math","abs","Queen","UnicodeConstants","WHITE_KING","name","icon","WHITE_QUEEN","WHITE_KNIGHT","WHITE_ROOK","WHITE_PAWN","WHITE_BISHOP","BLACK_KING","BLACK_QUEEN","BLACK_KNIGHT","BLACK_ROOK","BLACK_PAWN","BLACK_BISHOP","DefaultFenProcessor","process","notation","engineFacade","fen","Error","split","pointer","chunk","charAt","match","Number","pawn","setCurrentPlayer","setCastles","setEnPassant","setFullMoveCount","currentWhitePlayer","castleChunk","includes","setRookAlreadyMoved","rook","find","piece","MoveTranslation","xAxis","yAxis","_xAxis","_yAxis","_reverted","defineProperty","MoveUtils","willMoveCauseCheck","currentColor","destRow","destCol","srcPiece","destPiece","filter","isBound","format","sourcePoint","destPoint","sourceX","destX","String","fromCharCode","translateCoordsToIndex","coords","charCodeAt","findPieceByPossibleMovesContaining","indexes","foundPieces","_c","_d","_e","e_2","_f","findPieceByPossibleCapturesContaining","e_4","formatSingle","getFirstLetterPiece","reverse","formatCol","DefaultPiecesLoader","loadDefaultPieces","calculateFEN","DefaultPgnProcessor","reset","moves","extractMoves","counter","move","promotionIndex","replace","this_1","resolvePromotion","substring","test","resolvePieceByFirstChar","indexOf","resolveByCol","resolveByRow","processR1f2","moves_1","moves_1_1","lastIndexOf","trim","movePiece","hasUpperCase","piecesFirstChar","isShortCastle","removePiece","isLongCastle","char","firstPieceFormat","replacePromotion","promotionChar","NotationProcessorFactory","getProcessor","type","FEN","PGN","getDefaultProcessor","DrawPoint","x","y","ClickUtils","getClickPoint","event","top","height","left","width","floor","getDrawingPoint","tileSize","colorStrategy","ctrl","alt","shift","squareSize","xx","yy","resolve","HistoryMove","captured","setGameStates","check","stalemate","mate","HistoryMoveProvider","historyMovesSubject$","BehaviorSubject","states","addMove","historyMove","historyMoves","pop","lastHistoryMove","getLastMove","state","getAll","clear","getLastMoveIndex","Constants","DEFAULT_DARK_TILE_COLOR","DEFAULT_LIGHT_TILE_COLOR","DEFAULT_SIZE","MIN_BOARD_SIZE","MAX_BOARD_SIZE","DEFAULT_SOURCE_POINT_COLOR","DEFAULT_DESTINATION_POINT_COLOR","DEFAULT_LEGAL_MOVE_POINT_COLOR","PieceTypeInput","ColorInput","PieceIconInputManager","_defaultIcons","_pieceIconInput","isDefaultIcons","undefined","pieceIconInput","getPieceIcon","isWhite","whiteKingUrl","blackKingUrl","whiteQueenUrl","blackQueenUrl","whiteRookUrl","blackRookUrl","whiteBishopUrl","blackBishopUrl","whiteKnightUrl","blackKnightUrl","whitePawnUrl","blackPawnUrl","loadDefaultData","CoordsProvider","defaultXCoords","defaultYCoords","currentXCoords","currentYCoords","init","AnimationDragEndProcessor","dragEnded","disabling","startTrans","source","_dragRef","getRootElement","style","transform","DragEndStrategy","dragEndProcessor","setDragEndProcessor","processor","AnimationDragStartProcessor","dragStarted","zIndex","position","DragStartStrategy","dragStartProcessor","setDragStartProcessor","DefaultColorProcessor","ColorStrategy","colorProcessor","setColorProcessor","DrawProvider","arrowsSubject$","circlesSubject$","arrows$","asObservable","circles$","circles","arrows","addCircle","circle","reomveCircle","removeCircle","addArrow","arrow","removeArrow","containsCircle","checkCircle","some","containsArrow","checkArrow","DefaultPgnProcessor$1","sourcePiece","currentIndex","pgn","possibleMoves","possibleCaptures","isEqualByCol","aPiece","bPiece","AbstractPgnProcessor","getPGN","processChecks","checkmate","addPromotionChoice","promotion","removeLast","regex1","RegExp","lastIndex","AbstractEngineFacade","dragStartStrategy","dragEndStrategy","pgnProcessor","heightAndWidth","freeMode","drawProvider","pieceIconManager","moveHistoryProvider","checkIfPawnFirstMove","checkIfRookMoved","checkIfKingMoved","getMoveHistory","BoardLoader","notationProcessor","addPieces","loadFEN","loadPGN","setEngineFacade","setNotationProcessor","BoardState","BoardStateProvider","statesSubject$","getStates","lastState","getLastState","isEmpty","getLastStateIndex","Arrow","start","end","Circle","drawPoint","AvailableMoveDecorator","pointClicked","PiecePromotionResolver","resolvePromotionChoice","index","PieceFactory","pieceTypeInput","colorInput","LIGHT","QUEEN","KING","KNIGHT","BISHOP","ROOK","PAWN","EngineFacade","moveChange","_selected","boardLoader","boardStateProvider","undo","lastBoard","activePiece","saveMoveClone","moveStateProvider","sourceIndexes","destIndexes","getPieceByPoint","prepareActivePiece","isPointInPossibleMoves","isPointInPossibleCaptures","saveClone","lastMoveSrc","lastMoveDest","disableSelection","pieceClicked","onPieceClicked","handleClickEvent","isMouseDown","moving","onFreeMode","onMouseDown","moveDone","button","ctrlKey","isPieceDisabled","altKey","shiftKey","onMouseUp","drawDisabled","dragDisabled","addDrawPoint","toMovePiece","newPoint","historyMoveCandidate","checkIfPawnTakesEnPassant","checkIfPawnEnpassanted","increaseFullMoveCount","checkForPawnPromote","afterMoveActions","toPromotePiece","openPromoteDialog","blackKingChecked","whiteKingChecked","checkForPossibleMoves","checkForPat","_a","lastMove","emit","assign","modal","open","capture","lightDisabled","darkDisabled","crtl","upPoint","fullMoveCount","addPiece","existing_1","createdPiece","Board","isXYInPossibleMoves","isXYInPossibleCaptures","isXYInSourceMove","isXYInDestMove","isXYInActiveMove","forEach","reversePoint","cloneDeep","enemyColor","field","king","getKingByColor","getCastleFENString","sort","join","toUpperCase","getEnPassantFENString","emptyFields","foundPiece","substr","concatedEnPassant","isXYInPointSelection","isKingChecked","getCurrentPlayerColor","NgxChessBoardService","componentMethodCallSource","Subject","componentMethodCalled$","Injectable","args","providedIn","NgxChessBoardComponent","ngxChessBoardService","darkTileColor","lightTileColor","showCoords","sourcePointColor","destinationPointColor","legalMovesPointColor","showLastMove","showLegalMoves","showActivePiece","showPossibleCaptures","EventEmitter","selected","isDragging","startTransition","size","calculatePieceSize","pieceIcons","onRightClick","preventDefault","ngOnChanges","changes","ngOnInit","subscribe","ngAfterViewInit","boardRef","nativeElement","getBoundingClientRect","updateBoard","setFEN","exception","setPGN","console","log","getFEN","dragStart","trans","pieceSize","getCustomPieceIcons","JSON","parse","dragMoved","$event","pointerPosition","parentElement","getTileBackgroundColor","Component","selector","template","Input","Output","ViewChild","HostListener","PiecePromotionModalComponent","opened","closeCallback","onCloseCallback","display","changeSelection","coloredPiece","toLowerCase","static","NgxChessBoardModule","forRoot","ngModule","providers","NgModule","declarations","imports","CommonModule","DragDropModule","exports"],"mappings":";;;;;;;;;;;;;;oFAgBA,IAAIA,EAAgB,SAASC,EAAGC,GAI5B,OAHAF,EAAgBG,OAAOC,gBAClB,CAAEC,UAAW,cAAgBC,OAAS,SAAUL,EAAGC,GAAKD,EAAEI,UAAYH,IACvE,SAAUD,EAAGC,GAAK,IAAK,IAAIK,KAAKL,EAAOC,OAAOK,UAAUC,eAAeC,KAAKR,EAAGK,KAAIN,EAAEM,GAAKL,EAAEK,MAC3EN,EAAGC,aAGZS,EAAUV,EAAGC,GAEzB,SAASU,IAAOC,KAAKC,YAAcb,EADnCD,EAAcC,EAAGC,GAEjBD,EAAEO,UAAkB,OAANN,EAAaC,OAAOY,OAAOb,IAAMU,EAAGJ,UAAYN,EAAEM,UAAW,IAAII,GA+EtDT,OAAOY,gBAYpBC,EAASC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBA,OAAOC,SAAUC,EAAIH,GAAKD,EAAEC,GAAII,EAAI,EAC5E,GAAID,EAAG,OAAOA,EAAEX,KAAKO,GACrB,GAAIA,GAAyB,iBAAbA,EAAEM,OAAqB,MAAO,CAC1CC,KAAM,WAEF,OADIP,GAAKK,GAAKL,EAAEM,SAAQN,OAAI,GACrB,CAAEQ,MAAOR,GAAKA,EAAEK,KAAMI,MAAOT,KAG5C,MAAM,IAAIU,UAAUT,EAAI,0BAA4B,4CAGxCU,EAAOX,EAAGY,GACtB,IAAIR,EAAsB,mBAAXF,QAAyBF,EAAEE,OAAOC,UACjD,IAAKC,EAAG,OAAOJ,EACf,IAAmBa,EAAYC,EAA3BT,EAAID,EAAEX,KAAKO,GAAOe,EAAK,GAC3B,IACI,WAAc,IAANH,GAAgBA,KAAM,MAAQC,EAAIR,EAAEE,QAAQE,MAAMM,EAAGC,KAAKH,EAAEL,OAExE,MAAOS,GAASH,EAAI,CAAEG,MAAOA,WAEzB,IACQJ,IAAMA,EAAEJ,OAASL,EAAIC,EAAU,SAAID,EAAEX,KAAKY,WAExC,GAAIS,EAAG,MAAMA,EAAEG,OAE7B,OAAOF,WAGKG,IACZ,IAAK,IAAIH,EAAK,GAAIV,EAAI,EAAGA,EAAIc,UAAUb,OAAQD,IAC3CU,EAAKA,EAAGK,OAAOT,EAAOQ,UAAUd,KACpC,OAAOU,EA8CX,ICnMYM,EDmManC,OAAOY,QCnMhC,SAAYuB,GACRA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,MAAA,GAAA,QAFJ,CAAYA,IAAAA,EAAK,KCMjB,ICmBYC,EDnBZC,EAQI,SACIC,EACAC,EACAC,EACAC,EACAC,GATJhC,KAAAiC,YAAuB,GAWnBjC,KAAK6B,MAAQA,EACb7B,KAAK8B,SAAWA,EAChB9B,KAAK4B,MAAQA,EACb5B,KAAK+B,SAAWA,EAChB/B,KAAKgC,MAAQA,GEzBrBE,EAAA,WAII,SAAAA,EAAYC,EAAaC,GACrBpC,KAAKmC,IAAMA,EACXnC,KAAKoC,IAAMA,SAGfF,EAAAvC,UAAA0C,QAAA,SAAQC,GACJ,OAAOA,GAAQtC,KAAKmC,MAAQG,EAAKH,KAAOnC,KAAKoC,MAAQE,EAAKF,KAG9DF,EAAAvC,UAAA4C,eAAA,SAAeJ,EAAaC,GACxB,OAAOD,GAAOC,GAAOpC,KAAKmC,MAAQA,GAAOnC,KAAKoC,MAAQA,GAG1DF,EAAAvC,UAAA6C,UAAA,WACI,OAAOxC,KAAKmC,KAAO,GAAKnC,KAAKmC,KAAO,GAAKnC,KAAKoC,KAAO,GAAKpC,KAAKoC,KAAO,GAG1EF,EAAAvC,UAAA8C,MAAA,WACI,OAAO,IAAIP,EAAMlC,KAAKmC,IAAKnC,KAAKoC,QAtBxC,GCOAM,EAAA,SAAAC,GAGI,SAAAD,EACId,EACAC,EACAC,EACAE,GAJJ,IAAAY,EAMID,EAAA9C,KAAAG,KAAM4B,EAAOC,EAAOC,EAAU,EAAGE,IAAMhC,YAR3C4C,EAAAC,gBAAiB,WADK/C,EAAA4C,EAAAC,GAYtBD,EAAA/C,UAAAmD,iBAAA,WAMI,IALA,IAAMC,EAAiB,GAEjBZ,EAAMnC,KAAK4B,MAAMO,IACjBC,EAAMpC,KAAK4B,MAAMQ,IAEd3B,EAAI0B,EAAM,EAAG1B,EAAI,GAElBT,KAAKgC,MAAMgB,aAAavC,EAAG2B,KAFJ3B,EAGvBsC,EAAe3B,KAAK,IAAIc,EAAMzB,EAAG2B,IAMzC,IAAS3B,EAAI0B,EAAM,EAAG1B,GAAK,GAEnBT,KAAKgC,MAAMgB,aAAavC,EAAG2B,KAFH3B,EAGxBsC,EAAe3B,KAAK,IAAIc,EAAMzB,EAAG2B,IAMzC,IAAK,IAAIa,EAAIb,EAAM,EAAGa,GAAK,GAEnBjD,KAAKgC,MAAMgB,aAAab,EAAKc,KAFLA,EAGxBF,EAAe3B,KAAK,IAAIc,EAAMC,EAAKc,IAM3C,IAASA,EAAIb,EAAM,EAAGa,EAAI,GAElBjD,KAAKgC,MAAMgB,aAAab,EAAKc,KAFNA,EAGvBF,EAAe3B,KAAK,IAAIc,EAAMC,EAAKc,IAM3C,OAAOF,GAGXL,EAAA/C,UAAAuD,oBAAA,WAMI,IALA,IAAMH,EAAiB,GAEjBZ,EAAMnC,KAAK4B,MAAMO,IACjBC,EAAMpC,KAAK4B,MAAMQ,IAEd3B,EAAI0B,EAAM,EAAG1B,EAAI,IAAKA,EAAG,CAE9B,GACIT,KAAKgC,MAAMmB,oBACP1C,EACA2B,EACApC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,OAEvD,CACEL,EAAe3B,KAAK,IAAIc,EAAMzB,EAAG2B,IACjC,MAEA,IAAKpC,KAAKgC,MAAMgB,aAAavC,EAAG2B,GAC5B,MAKZ,IAAS3B,EAAI0B,EAAM,EAAG1B,GAAK,IAAKA,EAAG,CAE/B,GACIT,KAAKgC,MAAMmB,oBACP1C,EACA2B,EACApC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,OAEvD,CACEL,EAAe3B,KAAK,IAAIc,EAAMzB,EAAG2B,IACjC,MAEA,IAAKpC,KAAKgC,MAAMgB,aAAavC,EAAG2B,GAC5B,MAKZ,IAAK,IAAIa,EAAIb,EAAM,EAAGa,GAAK,IAAKA,EAAG,CAE/B,GACIjD,KAAKgC,MAAMmB,oBACPhB,EACAc,EACAjD,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,OAEvD,CACEL,EAAe3B,KAAK,IAAIc,EAAMC,EAAKc,IACnC,MAEA,IAAKjD,KAAKgC,MAAMgB,aAAab,EAAKc,GAC9B,MAKZ,IAASA,EAAIb,EAAM,EAAGa,EAAI,IAAKA,EAAG,CAE9B,GACIjD,KAAKgC,MAAMmB,oBACPhB,EACAc,EACAjD,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,OAEvD,CACEL,EAAe3B,KAAK,IAAIc,EAAMC,EAAKc,IACnC,MAEA,IAAKjD,KAAKgC,MAAMgB,aAAab,EAAKc,GAC9B,MAKZ,OAAOF,GAGXL,EAAA/C,UAAA2D,iBAAA,WAMI,IALA,IAAMP,EAAiB,GAEjBZ,EAAMnC,KAAK4B,MAAMO,IACjBC,EAAMpC,KAAK4B,MAAMQ,IAEd3B,EAAI0B,EAAM,EAAG1B,EAAI,IAAKA,EAE3B,GAAIT,KAAKgC,MAAMgB,aAAavC,EAAG2B,GAC3BW,EAAe3B,KAAK,IAAIc,EAAMzB,EAAG2B,SAEjC,KAAMpC,KAAKgC,MAAMuB,2BAA2BC,GAAO,CAC/CT,EAAe3B,KAAK,IAAIc,EAAMzB,EAAG2B,IACjC,MAKZ,IAAS3B,EAAI0B,EAAM,EAAG1B,GAAK,IAAKA,EAE5B,GAAIT,KAAKgC,MAAMgB,aAAavC,EAAG2B,GAC3BW,EAAe3B,KAAK,IAAIc,EAAMzB,EAAG2B,SAEjC,KAAMpC,KAAKgC,MAAMuB,2BAA2BC,GAAO,CAC/CT,EAAe3B,KAAK,IAAIc,EAAMzB,EAAG2B,IACjC,MAKZ,IAAK,IAAIa,EAAIb,EAAM,EAAGa,GAAK,IAAKA,EAE5B,GAAIjD,KAAKgC,MAAMgB,aAAab,EAAKc,GAC7BF,EAAe3B,KAAK,IAAIc,EAAMC,EAAKc,SAEnC,KAAMjD,KAAKgC,MAAMuB,2BAA2BC,GAAO,CAC/CT,EAAe3B,KAAK,IAAIc,EAAMC,EAAKc,IACnC,MAKZ,IAASA,EAAIb,EAAM,EAAGa,EAAI,IAAKA,EAE3B,GAAIjD,KAAKgC,MAAMgB,aAAab,EAAKc,GAC7BF,EAAe3B,KAAK,IAAIc,EAAMC,EAAKc,SAEnC,KAAMjD,KAAKgC,MAAMuB,2BAA2BC,GAAO,CAC/CT,EAAe3B,KAAK,IAAIc,EAAMC,EAAKc,IACnC,MAKZ,OAAOF,KAhMf,CAA0BpB,GCA1B6B,EAAA,SAAAb,GAOI,SAAAa,EACI5B,EACAC,EACAC,EACAE,GAJJ,IAAAY,EAMID,EAAA9C,KAAAG,KAAM4B,EAAOC,EAAOC,EAAU,EAAGE,IAAMhC,YAZ3C4C,EAAAa,gBAAiB,EACjBb,EAAAc,cAAe,EACfd,EAAAe,aAAc,EAEdf,EAAAgB,YAAa,WALS9D,EAAA0D,EAAAb,GAgBtBa,EAAA7D,UAAAmD,iBAAA,WACI,IAAMC,EAAiB,GAEjBZ,EAAMnC,KAAK4B,MAAMO,IACjBC,EAAMpC,KAAK4B,MAAMQ,IA+FvB,GA5FIpC,KAAKgC,MAAMgB,aAAab,EAAKC,EAAM,KAClCpC,KAAKgC,MAAM6B,mBACR1B,EACAC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,QAGrDL,EAAe3B,KAAK,IAAIc,EAAMC,EAAKC,EAAM,IAKzCpC,KAAKgC,MAAMgB,aAAab,EAAKC,EAAM,KAClCpC,KAAKgC,MAAM6B,mBACR1B,EACAC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,QAGrDL,EAAe3B,KAAK,IAAIc,EAAMC,EAAKC,EAAM,IAKzCpC,KAAKgC,MAAMgB,aAAab,EAAM,EAAGC,KAChCpC,KAAKgC,MAAM6B,mBACR1B,EAAM,EACNC,EACApC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,QAGrDL,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,IAKvCpC,KAAKgC,MAAMgB,aAAab,EAAM,EAAGC,KAChCpC,KAAKgC,MAAM6B,mBACR1B,EAAM,EACNC,EACApC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,QAGrDL,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,IAKvCpC,KAAKgC,MAAMgB,aAAab,EAAM,EAAGC,EAAM,KACtCpC,KAAKgC,MAAM6B,mBACR1B,EAAM,EACNC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,QAGrDL,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAI7CpC,KAAKgC,MAAMgB,aAAab,EAAM,EAAGC,EAAM,KACtCpC,KAAKgC,MAAM6B,mBACR1B,EAAM,EACNC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,QAGrDL,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAK7CpC,KAAKgC,MAAMgB,aAAab,EAAM,EAAGC,EAAM,KACtCpC,KAAKgC,MAAM6B,mBACR1B,EAAM,EACNC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,QAGrDL,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAI7CpC,KAAKgC,MAAMgB,aAAab,EAAM,EAAGC,EAAM,KACtCpC,KAAKgC,MAAM6B,mBACR1B,EAAM,EACNC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,QAGrDL,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,KAG5CpC,KAAK6C,eAAgB,CAEtB,IADA,IAAIiB,GAAqB,EAChBrD,EAAI2B,EAAM,EAAG3B,EAAI,IAAKA,EAC3B,IACKT,KAAKgC,MAAMgB,aAAab,EAAK1B,IAC9BT,KAAKgC,MAAM6B,mBACP1B,EACA1B,EACAT,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,OAEvD,CACEU,GAAqB,EACrB,MAIR,GAAIA,IAAuB9D,KAAKgC,MAAM+B,cAClC/D,KAAK6B,MACL7B,KAAKgC,MAAMgC,SACVhE,KAAKgC,MAAMuB,gBAAgBpB,EAAK,GAAI,CACrC,IAAM8B,EAAWjE,KAAKgC,MAAMuB,gBAAgBpB,EAAK,GAC7C8B,aAAoBvB,IACfuB,EAASpB,gBACVE,EAAe3B,KAAK,IAAIc,EAAMC,EAAKC,EAAM,KAKrD,IAAI8B,GAAsB,EAC1B,IAASzD,EAAI2B,EAAM,EAAG3B,EAAI,IAAKA,EAC3B,IACKT,KAAKgC,MAAMgB,aAAab,EAAK1B,IAC9BT,KAAKgC,MAAM6B,mBACP1B,EACA1B,EACAT,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,OAEvD,CACEc,GAAsB,EACtB,MAIR,GAAIA,IAAwBlE,KAAKgC,MAAM+B,cACnC/D,KAAK6B,MACL7B,KAAKgC,MAAMgC,SACVhE,KAAKgC,MAAMuB,gBAAgBpB,EAAK,GAAI,CACrC,IAAMgC,EAAYnE,KAAKgC,MAAMuB,gBAAgBpB,EAAK,GAC9CgC,aAAqBzB,IAChByB,EAAUtB,gBACXE,EAAe3B,KAAK,IAAIc,EAAMC,EAAKC,EAAM,MAMzD,OAAOW,GAGXS,EAAA7D,UAAAuD,oBAAA,WACI,IAAMH,EAAiB,GAEjBZ,EAAMnC,KAAK4B,MAAMO,IACjBC,EAAMpC,KAAK4B,MAAMQ,IAgIvB,OA5HIpC,KAAKgC,MAAMmB,oBACPhB,EACAC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,SAEpDpD,KAAKgC,MAAM6B,mBACR1B,EACAC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,QAGrDL,EAAe3B,KAAK,IAAIc,EAAMC,EAAKC,EAAM,IAKzCpC,KAAKgC,MAAMmB,oBACPhB,EACAC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,SAEpDpD,KAAKgC,MAAM6B,mBACR1B,EACAC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,QAGrDL,EAAe3B,KAAK,IAAIc,EAAMC,EAAKC,EAAM,IAKzCpC,KAAKgC,MAAMmB,oBACPhB,EAAM,EACNC,EACApC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,SAEpDpD,KAAKgC,MAAM6B,mBACR1B,EAAM,EACNC,EACApC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,QAGrDL,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,IAKvCpC,KAAKgC,MAAMmB,oBACPhB,EAAM,EACNC,EACApC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,SAEpDpD,KAAKgC,MAAM6B,mBACR1B,EAAM,EACNC,EACApC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,QAGrDL,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,IAKvCpC,KAAKgC,MAAMmB,oBACPhB,EAAM,EACNC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,SAEpDpD,KAAKgC,MAAM6B,mBACR1B,EAAM,EACNC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,QAGrDL,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAI7CpC,KAAKgC,MAAMmB,oBACPhB,EAAM,EACNC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,SAEpDpD,KAAKgC,MAAM6B,mBACR1B,EAAM,EACNC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,QAGrDL,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAK7CpC,KAAKgC,MAAMmB,oBACPhB,EAAM,EACNC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,SAEpDpD,KAAKgC,MAAM6B,mBACR1B,EAAM,EACNC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,QAGrDL,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAI7CpC,KAAKgC,MAAMmB,oBACPhB,EAAM,EACNC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,SAEpDpD,KAAKgC,MAAM6B,mBACR1B,EAAM,EACNC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,QAGrDL,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAG1CW,GAGXS,EAAA7D,UAAA2D,iBAAA,WACI,IAAMP,EAAiB,GAEjBZ,EAAMnC,KAAK4B,MAAMO,IACjBC,EAAMpC,KAAK4B,MAAMQ,IA2BvB,OAxBAW,EAAe3B,KAAK,IAAIc,EAAMC,EAAKC,EAAM,IAGzCW,EAAe3B,KAAK,IAAIc,EAAMC,EAAKC,EAAM,IAGzCW,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,IAGvCW,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,IAGvCW,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAG7CW,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAG7CW,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAG7CW,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAGtCW,KApVf,CAA0BpB,GCA1ByC,EAAA,SAAAzB,GACI,SAAAyB,EACIxC,EACAC,EACAC,EACAE,UAEAW,EAAA9C,KAAAG,KAAM4B,EAAOC,EAAOC,EAAU,EAAGE,IAAMhC,YAPnBF,EAAAsE,EAAAzB,GAUxByB,EAAAzE,UAAAmD,iBAAA,WAMI,IALA,IAAMC,EAAiB,GAEjBZ,EAAMnC,KAAK4B,MAAMO,IACjBC,EAAMpC,KAAK4B,MAAMQ,IAEd3B,EAAI0B,EAAM,EAAGc,EAAIb,EAAM,EAAG3B,GAAK,GAAKwC,GAAK,GAE1CjD,KAAKgC,MAAMgB,aAAavC,EAAGwC,KAFoBxC,IAAKwC,EAGpDF,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IAMzC,IAASxC,EAAI0B,EAAM,EAAGc,EAAIb,EAAM,EAAG3B,GAAK,GAAKwC,EAAI,GAEzCjD,KAAKgC,MAAMgB,aAAavC,EAAGwC,KAFmBxC,IAAKwC,EAGnDF,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IAMzC,IAASxC,EAAI0B,EAAM,EAAGc,EAAIb,EAAM,EAAG3B,EAAI,GAAKwC,GAAK,GAEzCjD,KAAKgC,MAAMgB,aAAavC,EAAGwC,KAFmBxC,IAAKwC,EAGnDF,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IAMzC,IAASxC,EAAI0B,EAAM,EAAGc,EAAIb,EAAM,EAAG3B,EAAI,GAAKwC,EAAI,GAExCjD,KAAKgC,MAAMgB,aAAavC,EAAGwC,KAFkBxC,IAAKwC,EAGlDF,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IAMzC,OAAOF,GAGXqB,EAAAzE,UAAAuD,oBAAA,WAMI,IALA,IAAMH,EAAiB,GAEjBZ,EAAMnC,KAAK4B,MAAMO,IACjBC,EAAMpC,KAAK4B,MAAMQ,IAEd3B,EAAI0B,EAAM,EAAGc,EAAIb,EAAM,EAAG3B,GAAK,GAAKwC,GAAK,IAAKxC,IAAKwC,EAAG,CAE3D,GACIjD,KAAKgC,MAAMmB,oBACP1C,EACAwC,EACAjD,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,OAEvD,CACEL,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IACjC,MAEA,IAAKjD,KAAKgC,MAAMgB,aAAavC,EAAGwC,GAC5B,MAKZ,IAASxC,EAAI0B,EAAM,EAAGc,EAAIb,EAAM,EAAG3B,GAAK,GAAKwC,EAAI,IAAKxC,IAAKwC,EAAG,CAE1D,GACIjD,KAAKgC,MAAMmB,oBACP1C,EACAwC,EACAjD,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,OAEvD,CACEL,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IACjC,MAEA,IAAKjD,KAAKgC,MAAMgB,aAAavC,EAAGwC,GAC5B,MAKZ,IAASxC,EAAI0B,EAAM,EAAGc,EAAIb,EAAM,EAAG3B,EAAI,GAAKwC,GAAK,IAAKxC,IAAKwC,EAAG,CAE1D,GACIjD,KAAKgC,MAAMmB,oBACP1C,EACAwC,EACAjD,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,OAEvD,CACEL,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IACjC,MAEA,IAAKjD,KAAKgC,MAAMgB,aAAavC,EAAGwC,GAC5B,MAKZ,IAASxC,EAAI0B,EAAM,EAAGc,EAAIb,EAAM,EAAG3B,EAAI,GAAKwC,EAAI,IAAKxC,IAAKwC,EAAG,CAEzD,GACIjD,KAAKgC,MAAMmB,oBACP1C,EACAwC,EACAjD,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,OAEvD,CACEL,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IACjC,MAEA,IAAKjD,KAAKgC,MAAMgB,aAAavC,EAAGwC,GAC5B,MAKZ,OAAOF,GAGXqB,EAAAzE,UAAA2D,iBAAA,WAMI,IALA,IAAMP,EAAiB,GAEjBZ,EAAMnC,KAAK4B,MAAMO,IACjBC,EAAMpC,KAAK4B,MAAMQ,IAEd3B,EAAI0B,EAAM,EAAGc,EAAIb,EAAM,EAAG3B,GAAK,GAAKwC,GAAK,IAAKxC,IAAKwC,EAAG,CAE3D,IAAIjD,KAAKgC,MAAMgB,aAAavC,EAAGwC,GAExB,CACGjD,KAAKgC,MAAMuB,gBAAgB9C,EAAGwC,aAAcO,GAC9CT,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IAErC,MALAF,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IASzC,IAASxC,EAAI0B,EAAM,EAAGc,EAAIb,EAAM,EAAG3B,GAAK,GAAKwC,EAAI,IAAKxC,IAAKwC,EAAG,CAE1D,IAAIjD,KAAKgC,MAAMgB,aAAavC,EAAGwC,GAExB,CACGjD,KAAKgC,MAAMuB,gBAAgB9C,EAAGwC,aAAcO,GAC9CT,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IAErC,MALAF,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IASzC,IAASxC,EAAI0B,EAAM,EAAGc,EAAIb,EAAM,EAAG3B,EAAI,GAAKwC,GAAK,IAAKxC,IAAKwC,EAAG,CAE1D,IAAIjD,KAAKgC,MAAMgB,aAAavC,EAAGwC,GAExB,CACGjD,KAAKgC,MAAMuB,gBAAgB9C,EAAGwC,aAAcO,GAC9CT,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IAErC,MALAF,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IASzC,IAASxC,EAAI0B,EAAM,EAAGc,EAAIb,EAAM,EAAG3B,EAAI,GAAKwC,EAAI,IAAKxC,IAAKwC,EAAG,CAEzD,IAAIjD,KAAKgC,MAAMgB,aAAavC,EAAGwC,GAExB,CACGjD,KAAKgC,MAAMuB,gBAAgB9C,EAAGwC,aAAcO,GAC9CT,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IAErC,MALAF,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IASzC,OAAOF,KA9Lf,CAA4BpB,GCD5B0C,EAAA,SAAA1B,GAGI,SAAA0B,EACIzC,EACAC,EACAC,EACAE,GAJJ,IAAAY,EAMID,EAAA9C,KAAAG,KAAM4B,EAAOC,EAAOC,EAAU,EAAGE,IAAMhC,YAR3C4C,EAAAC,gBAAiB,WADO/C,EAAAuE,EAAA1B,GAYxB0B,EAAA1E,UAAAmD,iBAAA,WACI,IAAMC,EAAiB,GAEjBZ,EAAMnC,KAAK4B,MAAMO,IACjBC,EAAMpC,KAAK4B,MAAMQ,IA0CvB,OAvCIpC,KAAKgC,MAAMgB,aAAab,EAAM,EAAGC,EAAM,IACvCW,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAI7CpC,KAAKgC,MAAMgB,aAAab,EAAM,EAAGC,EAAM,IACvCW,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAI7CpC,KAAKgC,MAAMgB,aAAab,EAAM,EAAGC,EAAM,IACvCW,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAI7CpC,KAAKgC,MAAMgB,aAAab,EAAM,EAAGC,EAAM,IACvCW,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAI7CpC,KAAKgC,MAAMgB,aAAab,EAAM,EAAGC,EAAM,IACvCW,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAI7CpC,KAAKgC,MAAMgB,aAAab,EAAM,EAAGC,EAAM,IACvCW,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAI7CpC,KAAKgC,MAAMgB,aAAab,EAAM,EAAGC,EAAM,IACvCW,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAI7CpC,KAAKgC,MAAMgB,aAAab,EAAM,EAAGC,EAAM,IACvCW,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAG1CW,GAGXsB,EAAA1E,UAAAuD,oBAAA,WACI,IAAMH,EAAiB,GAEjBZ,EAAMnC,KAAK4B,MAAMO,IACjBC,EAAMpC,KAAK4B,MAAMQ,IA0FvB,OAtFIpC,KAAKgC,MAAMmB,oBACPhB,EAAM,EACNC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,QAGrDL,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAK7CpC,KAAKgC,MAAMmB,oBACPhB,EAAM,EACNC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,QAGrDL,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAK7CpC,KAAKgC,MAAMmB,oBACPhB,EAAM,EACNC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,QAGrDL,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAK7CpC,KAAKgC,MAAMmB,oBACPhB,EAAM,EACNC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,QAGrDL,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAK7CpC,KAAKgC,MAAMmB,oBACPhB,EAAM,EACNC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,QAGrDL,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAK7CpC,KAAKgC,MAAMmB,oBACPhB,EAAM,EACNC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,QAGrDL,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAK7CpC,KAAKgC,MAAMmB,oBACPhB,EAAM,EACNC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,QAGrDL,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAK7CpC,KAAKgC,MAAMmB,oBACPhB,EAAM,EACNC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,QAGrDL,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAG1CW,GAGXsB,EAAA1E,UAAA2D,iBAAA,WACI,IAAMP,EAAiB,GAEjBZ,EAAMnC,KAAK4B,MAAMO,IACjBC,EAAMpC,KAAK4B,MAAMQ,IA0BvB,OAvBAW,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAG7CW,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAG7CW,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAG7CW,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAG7CW,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAG7CW,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAG7CW,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAG7CW,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAEtCW,KA5Lf,CAA4BpB,GCA5B2C,EAAA,SAAA3B,GAGI,SAAA2B,EACI1C,EACAC,EACAC,EACAE,GAJJ,IAAAY,EAMID,EAAA9C,KAAAG,KAAM4B,EAAOC,EAAOC,EAAU,EAAGE,IAAMhC,YAR3C4C,EAAAC,gBAAiB,WADK/C,EAAAwE,EAAA3B,GAYtB2B,EAAA3E,UAAAmD,iBAAA,WACI,IAAMC,EAAiB,GACjBZ,EAAMnC,KAAK4B,MAAMO,IACjBC,EAAMpC,KAAK4B,MAAMQ,IAgCvB,OA9BMpC,KAAKgC,MAAMuC,UAAYvE,KAAK6B,QAAUJ,EAAM2B,OAC7CpD,KAAKgC,MAAMuC,UAAYvE,KAAK6B,QAAUJ,EAAM4B,MAEzCrD,KAAKgC,MAAMgB,aAAab,EAAM,EAAGC,KACjCW,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,KAGlCpC,KAAK6C,gBACN7C,KAAKgC,MAAMgB,aAAab,EAAM,EAAGC,IAEjCW,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC;4DAKkBpC,KAAKgC,MAAMgB,aACpEb,EAAM,EACNC,KAGJW,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,KAGlCpC,KAAK6C,gBACN7C,KAAKgC,MAAMgB,aAAab,EAAM,EAAGC,IAEjCW,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,KAI5CW,GAGXuB,EAAA3E,UAAAuD,oBAAA,WACI,IAAMH,EAAiB,GACjBZ,EAAMnC,KAAK4B,MAAMO,IACjBC,EAAMpC,KAAK4B,MAAMQ,IA0DvB,OAvDMpC,KAAKgC,MAAMuC,UAAYvE,KAAK6B,QAAUJ,EAAM2B,OAC7CpD,KAAKgC,MAAMuC,UAAYvE,KAAK6B,QAAUJ,EAAM4B,OAGzCrD,KAAKgC,MAAMmB,oBACPhB,EAAM,EACNC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,QAGrDL,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAG7CpC,KAAKgC,MAAMmB,oBACPhB,EAAM,EACNC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,QAGrDL,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,MAI7CpC,KAAKgC,MAAMmB,oBACPhB,EAAM,EACNC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,QAGrDL,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAG7CpC,KAAKgC,MAAMmB,oBACPhB,EAAM,EACNC,EAAM,EACNpC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,QAGrDL,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,KAKjDpC,KAAKgC,MAAMwC,gBACXxE,KAAKgC,MAAMyC,eAAe5C,SACrB7B,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,QAGlDjB,IAAQnC,KAAKgC,MAAMyC,eAAe7C,MAAMO,KACgB,IAAxDuC,KAAKC,IAAI3E,KAAKgC,MAAMyC,eAAe7C,MAAMQ,IAAMA,IAE/CW,EAAe3B,KAAKpB,KAAKgC,MAAMwC,gBAIhCzB,GAGXuB,EAAA3E,UAAA2D,iBAAA,WACI,IAAMP,EAAiB,GACjBZ,EAAMnC,KAAK4B,MAAMO,IACjBC,EAAMpC,KAAK4B,MAAMQ,IAevB,OAZMpC,KAAKgC,MAAMuC,UAAYvE,KAAK6B,QAAUJ,EAAM2B,OAC7CpD,KAAKgC,MAAMuC,UAAYvE,KAAK6B,QAAUJ,EAAM4B,OAE7CN,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAE7CW,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,MAE7CW,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,IAE7CW,EAAe3B,KAAK,IAAIc,EAAMC,EAAM,EAAGC,EAAM,KAG1CW,KApIf,CAA0BpB,GCC1BiD,EAAA,SAAAjC,GACI,SAAAiC,EACIhD,EACAC,EACAC,EACAE,UAEAW,EAAA9C,KAAAG,KAAM4B,EAAOC,EAAOC,EAAU,EAAGE,IAAMhC,YAPpBF,EAAA8E,EAAAjC,GAUvBiC,EAAAjF,UAAAmD,iBAAA,WAMI,IALA,IAAMC,EAAiB,GAEjBZ,EAAMnC,KAAK4B,MAAMO,IACjBC,EAAMpC,KAAK4B,MAAMQ,IAEd3B,EAAI0B,EAAM,EAAGc,EAAIb,EAAM,EAAG3B,GAAK,GAAKwC,GAAK,GAE1CjD,KAAKgC,MAAMgB,aAAavC,EAAGwC,KAFoBxC,IAAKwC,EAGpDF,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IAMzC,IAASxC,EAAI0B,EAAM,EAAGc,EAAIb,EAAM,EAAG3B,GAAK,GAAKwC,EAAI,GAEzCjD,KAAKgC,MAAMgB,aAAavC,EAAGwC,KAFmBxC,IAAKwC,EAGnDF,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IAMzC,IAASxC,EAAI0B,EAAM,EAAGc,EAAIb,EAAM,EAAG3B,EAAI,GAAKwC,GAAK,GAEzCjD,KAAKgC,MAAMgB,aAAavC,EAAGwC,KAFmBxC,IAAKwC,EAGnDF,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IAMzC,IAASxC,EAAI0B,EAAM,EAAGc,EAAIb,EAAM,EAAG3B,EAAI,GAAKwC,EAAI,GAExCjD,KAAKgC,MAAMgB,aAAavC,EAAGwC,KAFkBxC,IAAKwC,EAGlDF,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IAMzC,IAASxC,EAAI0B,EAAM,EAAG1B,EAAI,GAElBT,KAAKgC,MAAMgB,aAAavC,EAAG2B,KAFJ3B,EAGvBsC,EAAe3B,KAAK,IAAIc,EAAMzB,EAAG2B,IAMzC,IAAS3B,EAAI0B,EAAM,EAAG1B,GAAK,GAEnBT,KAAKgC,MAAMgB,aAAavC,EAAG2B,KAFH3B,EAGxBsC,EAAe3B,KAAK,IAAIc,EAAMzB,EAAG2B,IAMzC,IAASa,EAAIb,EAAM,EAAGa,GAAK,GAEnBjD,KAAKgC,MAAMgB,aAAab,EAAKc,KAFLA,EAGxBF,EAAe3B,KAAK,IAAIc,EAAMC,EAAKc,IAM3C,IAASA,EAAIb,EAAM,EAAGa,EAAI,GAElBjD,KAAKgC,MAAMgB,aAAab,EAAKc,KAFNA,EAGvBF,EAAe3B,KAAK,IAAIc,EAAMC,EAAKc,IAM3C,OAAOF,GAGX6B,EAAAjF,UAAAuD,oBAAA,WAMI,IALA,IAAMH,EAAiB,GAEjBZ,EAAMnC,KAAK4B,MAAMO,IACjBC,EAAMpC,KAAK4B,MAAMQ,IAEd3B,EAAI0B,EAAM,EAAGc,EAAIb,EAAM,EAAG3B,GAAK,GAAKwC,GAAK,IAAKxC,IAAKwC,EAAG,CAE3D,GACIjD,KAAKgC,MAAMmB,oBACP1C,EACAwC,EACAjD,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,OAEvD,CACEL,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IACjC,MAEA,IAAKjD,KAAKgC,MAAMgB,aAAavC,EAAGwC,GAC5B,MAKZ,IAASxC,EAAI0B,EAAM,EAAGc,EAAIb,EAAM,EAAG3B,GAAK,GAAKwC,EAAI,IAAKxC,IAAKwC,EAAG,CAE1D,GACIjD,KAAKgC,MAAMmB,oBACP1C,EACAwC,EACAjD,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,OAEvD,CACEL,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IACjC,MAEA,IAAKjD,KAAKgC,MAAMgB,aAAavC,EAAGwC,GAC5B,MAKZ,IAASxC,EAAI0B,EAAM,EAAGc,EAAIb,EAAM,EAAG3B,EAAI,GAAKwC,GAAK,IAAKxC,IAAKwC,EAAG,CAE1D,GACIjD,KAAKgC,MAAMmB,oBACP1C,EACAwC,EACAjD,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,OAEvD,CACEL,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IACjC,MAEA,IAAKjD,KAAKgC,MAAMgB,aAAavC,EAAGwC,GAC5B,MAKZ,IAASxC,EAAI0B,EAAM,EAAGc,EAAIb,EAAM,EAAG3B,EAAI,GAAKwC,EAAI,IAAKxC,IAAKwC,EAAG,CAEzD,GACIjD,KAAKgC,MAAMmB,oBACP1C,EACAwC,EACAjD,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,OAEvD,CACEL,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IACjC,MAEA,IAAKjD,KAAKgC,MAAMgB,aAAavC,EAAGwC,GAC5B,MAIZ,IAASxC,EAAI0B,EAAM,EAAG1B,EAAI,IAAKA,EAAG,CAE9B,GACIT,KAAKgC,MAAMmB,oBACP1C,EACA2B,EACApC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,OAEvD,CACEL,EAAe3B,KAAK,IAAIc,EAAMzB,EAAG2B,IACjC,MAEA,IAAKpC,KAAKgC,MAAMgB,aAAavC,EAAG2B,GAC5B,MAKZ,IAAS3B,EAAI0B,EAAM,EAAG1B,GAAK,IAAKA,EAAG,CAE/B,GACIT,KAAKgC,MAAMmB,oBACP1C,EACA2B,EACApC,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,OAEvD,CACEL,EAAe3B,KAAK,IAAIc,EAAMzB,EAAG2B,IACjC,MAEA,IAAKpC,KAAKgC,MAAMgB,aAAavC,EAAG2B,GAC5B,MAKZ,IAASa,EAAIb,EAAM,EAAGa,GAAK,IAAKA,EAAG,CAE/B,GACIjD,KAAKgC,MAAMmB,oBACPhB,EACAc,EACAjD,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,OAEvD,CACEL,EAAe3B,KAAK,IAAIc,EAAMC,EAAKc,IACnC,MAEA,IAAKjD,KAAKgC,MAAMgB,aAAab,EAAKc,GAC9B,MAKZ,IAASA,EAAIb,EAAM,EAAGa,EAAI,IAAKA,EAAG,CAE9B,GACIjD,KAAKgC,MAAMmB,oBACPhB,EACAc,EACAjD,KAAK6B,QAAUJ,EAAM2B,MAAQ3B,EAAM4B,MAAQ5B,EAAM2B,OAEvD,CACEL,EAAe3B,KAAK,IAAIc,EAAMC,EAAKc,IACnC,MAEA,IAAKjD,KAAKgC,MAAMgB,aAAab,EAAKc,GAC9B,MAIZ,OAAOF,GAGX6B,EAAAjF,UAAA2D,iBAAA,WAMI,IALA,IAAMP,EAAiB,GAEjBZ,EAAMnC,KAAK4B,MAAMO,IACjBC,EAAMpC,KAAK4B,MAAMQ,IAEd3B,EAAI0B,EAAM,EAAG1B,EAAI,IAAKA,EAAG,CAE9B,IAAIT,KAAKgC,MAAMgB,aAAavC,EAAG2B,GAExB,CACGpC,KAAKgC,MAAMuB,gBAAgB9C,EAAG2B,aAAgBoB,GAChDT,EAAe3B,KAAK,IAAIc,EAAMzB,EAAG2B,IAErC,MALAW,EAAe3B,KAAK,IAAIc,EAAMzB,EAAG2B,IASzC,IAAS3B,EAAI0B,EAAM,EAAG1B,GAAK,IAAKA,EAAG,CAE/B,IAAIT,KAAKgC,MAAMgB,aAAavC,EAAG2B,GAExB,CACGpC,KAAKgC,MAAMuB,gBAAgB9C,EAAG2B,aAAgBoB,GAChDT,EAAe3B,KAAK,IAAIc,EAAMzB,EAAG2B,IAErC,MALAW,EAAe3B,KAAK,IAAIc,EAAMzB,EAAG2B,IASzC,IAAK,IAAIa,EAAIb,EAAM,EAAGa,GAAK,IAAKA,EAAG,CAE/B,IAAIjD,KAAKgC,MAAMgB,aAAab,EAAKc,GAE1B,CACGjD,KAAKgC,MAAMuB,gBAAgBpB,EAAKc,aAAcO,GAChDT,EAAe3B,KAAK,IAAIc,EAAMC,EAAKc,IAEvC,MALAF,EAAe3B,KAAK,IAAIc,EAAMC,EAAKc,IAS3C,IAASA,EAAIb,EAAM,EAAGa,EAAI,IAAKA,EAAG,CAE9B,IAAIjD,KAAKgC,MAAMgB,aAAab,EAAKc,GAE1B,CACGjD,KAAKgC,MAAMuB,gBAAgBpB,EAAKc,aAAcO,GAChDT,EAAe3B,KAAK,IAAIc,EAAMC,EAAKc,IAEvC,MALAF,EAAe3B,KAAK,IAAIc,EAAMC,EAAKc,IAS3C,IAASxC,EAAI0B,EAAM,EAAGc,EAAIb,EAAM,EAAG3B,GAAK,GAAKwC,GAAK,IAAKxC,IAAKwC,EAAG,CAE3D,IAAIjD,KAAKgC,MAAMgB,aAAavC,EAAGwC,GAExB,CACGjD,KAAKgC,MAAMuB,gBAAgB9C,EAAGwC,aAAcO,GAC9CT,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IAErC,MALAF,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IASzC,IAASxC,EAAI0B,EAAM,EAAGc,EAAIb,EAAM,EAAG3B,GAAK,GAAKwC,EAAI,IAAKxC,IAAKwC,EAAG,CAE1D,IAAIjD,KAAKgC,MAAMgB,aAAavC,EAAGwC,GAExB,CACGjD,KAAKgC,MAAMuB,gBAAgB9C,EAAGwC,aAAcO,GAC9CT,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IAErC,MALAF,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IASzC,IAASxC,EAAI0B,EAAM,EAAGc,EAAIb,EAAM,EAAG3B,EAAI,GAAKwC,GAAK,IAAKxC,IAAKwC,EAAG,CAE1D,IAAIjD,KAAKgC,MAAMgB,aAAavC,EAAGwC,GAExB,CACGjD,KAAKgC,MAAMuB,gBAAgB9C,EAAGwC,aAAcO,GAC9CT,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IAErC,MALAF,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IASzC,IAASxC,EAAI0B,EAAM,EAAGc,EAAIb,EAAM,EAAG3B,EAAI,GAAKwC,EAAI,IAAKxC,IAAKwC,EAAG,CAEzD,IAAIjD,KAAKgC,MAAMgB,aAAavC,EAAGwC,GAExB,CACGjD,KAAKgC,MAAMuB,gBAAgB9C,EAAGwC,aAAcO,GAC9CT,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IAErC,MALAF,EAAe3B,KAAK,IAAIc,EAAMzB,EAAGwC,IASzC,OAAOF,KAxVf,CAA2BpB,GCFdkD,EAAmB,CAC5BC,WAAY,CAAEC,KAAM,OAAQC,KAAM,YAClCC,YAAa,CAAEF,KAAM,QAASC,KAAM,YACpCE,aAAc,CAAEH,KAAM,SAAUC,KAAM,WACtCG,WAAY,CAAEJ,KAAM,OAAQC,KAAM,WAClCI,WAAY,CAAEL,KAAM,OAAQC,KAAM,WAClCK,aAAc,CAAEN,KAAM,SAAUC,KAAM,WAEtCM,WAAY,CAAEP,KAAM,OAAQC,KAAM,WAClCO,YAAa,CAAER,KAAM,QAASC,KAAM,WACpCQ,aAAc,CAAET,KAAM,SAAUC,KAAM,WACtCS,WAAY,CAAEV,KAAM,OAAQC,KAAM,WAClCU,WAAY,CAAEX,KAAM,OAAQC,KAAM,WAClCW,aAAc,CAAEZ,KAAM,SAAUC,KAAM,YCL1CY,EAAA,WAAA,SAAAA,YAEWA,EAAAjG,UAAAkG,QAAA,SAAQC,EAAkBC,GAC7B,IAAIC,EAAMF,EACV,IAAIA,EAkKA,MAAMG,MAAM,0BAjKZF,EAAa/D,MAAMuC,UAAW,EAC9BwB,EAAa/D,MAAMgC,OAAS,GAE5B,IADA,IAAMkC,EAAQF,EAAIE,MAAM,KACfzF,EAAI,EAAGA,EAAI,IAAKA,EAErB,IADA,IAAI0F,EAAU,EACLlD,EAAI,EAAGA,EAAIiD,EAAMzF,GAAGyF,MAAM,KAAK,GAAGxF,SAAUuC,EAAG,CACpD,IAAMmD,EAAQF,EAAMzF,GAAG4F,OAAOpD,GAC9B,GAAImD,EAAME,MAAM,SACZH,GAAWI,OAAOH,OACf,CACH,OAAQA,GACJ,IAAK,IACDL,EAAa/D,MAAMgC,OAAO5C,KACtB,IAAIsB,EACA,IAAIR,EAAMzB,EAAG0F,GACb1E,EAAM4B,MACNwB,EAAiBY,WACjBM,EAAa/D,QAGrB,MACJ,IAAK,IACD+D,EAAa/D,MAAMgC,OAAO5C,KACtB,IAAIiD,EACA,IAAInC,EAAMzB,EAAG0F,GACb1E,EAAM4B,MACNwB,EAAiBW,aACjBO,EAAa/D,QAIrB,MACJ,IAAK,IACD+D,EAAa/D,MAAMgC,OAAO5C,KACtB,IAAIgD,EACA,IAAIlC,EAAMzB,EAAG0F,GACb1E,EAAM4B,MACNwB,EAAiBc,aACjBI,EAAa/D,QAGrB,MACJ,IAAK,IACD+D,EAAa/D,MAAMgC,OAAO5C,KACtB,IAAIwD,EACA,IAAI1C,EAAMzB,EAAG0F,GACb1E,EAAM4B,MACNwB,EAAiBU,YACjBQ,EAAa/D,QAGrB,MACJ,IAAK,IACD+D,EAAa/D,MAAMgC,OAAO5C,KACtB,IAAIoC,EACA,IAAItB,EAAMzB,EAAG0F,GACb1E,EAAM4B,MACNwB,EAAiBS,WACjBS,EAAa/D,QAGrB,MACJ,IAAK,MACKwE,EAAO,IAAIlC,EACb,IAAIpC,EAAMzB,EAAG0F,GACb1E,EAAM4B,MACNwB,EAAiBa,WACjBK,EAAa/D,QAGPH,QAAUJ,EAAM4B,OAA4B,IAAnBmD,EAAK5E,MAAMO,KACzCqE,EAAK3E,QAAUJ,EAAM2B,OAA4B,IAAnBoD,EAAK5E,MAAMO,OAE1CqE,EAAK3D,gBAAiB,GAE1BkD,EAAa/D,MAAMgC,OAAO5C,KAAKoF,GAC/B,MAEJ,IAAK,IACDT,EAAa/D,MAAMgC,OAAO5C,KACtB,IAAIsB,EACA,IAAIR,EAAMzB,EAAG0F,GACb1E,EAAM2B,MACNyB,EAAiBM,WACjBY,EAAa/D,QAIrB,MACJ,IAAK,IACD+D,EAAa/D,MAAMgC,OAAO5C,KACtB,IAAIiD,EACA,IAAInC,EAAMzB,EAAG0F,GACb1E,EAAM2B,MACNyB,EAAiBK,aACjBa,EAAa/D,QAGrB,MAEJ,IAAK,IACD+D,EAAa/D,MAAMgC,OAAO5C,KACtB,IAAIgD,EACA,IAAIlC,EAAMzB,EAAG0F,GACb1E,EAAM2B,MACNyB,EAAiBQ,aACjBU,EAAa/D,QAGrB,MAEJ,IAAK,IACD+D,EAAa/D,MAAMgC,OAAO5C,KACtB,IAAIwD,EACA,IAAI1C,EAAMzB,EAAG0F,GACb1E,EAAM2B,MACNyB,EAAiBI,YACjBc,EAAa/D,QAGrB,MAEJ,IAAK,IACD+D,EAAa/D,MAAMgC,OAAO5C,KACtB,IAAIoC,EACA,IAAItB,EAAMzB,EAAG0F,GACb1E,EAAM2B,MACNyB,EAAiBC,WACjBiB,EAAa/D,QAGrB,MAEJ,IAAK,IACD,IAAMwE,IAAAA,EAAO,IAAIlC,EACb,IAAIpC,EAAMzB,EAAG0F,GACb1E,EAAM2B,MACNyB,EAAiBO,WACjBW,EAAa/D,QAGPH,QAAUJ,EAAM4B,OAA4B,IAAnBmD,EAAK5E,MAAMO,KACzCqE,EAAK3E,QAAUJ,EAAM2B,OAA4B,IAAnBoD,EAAK5E,MAAMO,OAE1CqE,EAAK3D,gBAAiB,GAE1BkD,EAAa/D,MAAMgC,OAAO5C,KAAKoF,KAIrCL,GAKdnG,KAAKyG,iBAAiBV,EAAa/D,MAAOgE,GAC1ChG,KAAK0G,WAAWX,EAAa/D,MAAOgE,GACpChG,KAAK2G,aAAaX,GAClBhG,KAAK4G,iBAAiBZ,GACtBD,EAAa/D,MAAMgE,IAAMA,GAOzBJ,EAAAjG,UAAA8G,iBAAA,SAAiBzE,EAAcgE,GACnC,GAAIA,EAAK,CACL,IAAME,EAAQF,EAAIE,MAAM,KACxBlE,EAAM6E,mBAAkC,MAAbX,EAAM,KAIjCN,EAAAjG,UAAA+G,WAAA,SAAW1E,EAAcgE,GAC7B,GAAIA,EAAK,CACL,IACMc,EADQd,EAAIE,MAAM,KACE,GAErBY,EAAYC,SAAS,MACtB/G,KAAKgH,oBAAoBhF,EAAOP,EAAM2B,MAAO,GAG5C0D,EAAYC,SAAS,MACtB/G,KAAKgH,oBAAoBhF,EAAOP,EAAM2B,MAAO,GAG5C0D,EAAYC,SAAS,MACtB/G,KAAKgH,oBAAoBhF,EAAOP,EAAM4B,MAAO,GAG5CyD,EAAYC,SAAS,MACtB/G,KAAKgH,oBAAoBhF,EAAOP,EAAM4B,MAAO,KAKjDuC,EAAAjG,UAAAiH,iBAAA,SAAiBZ,KAEjBJ,EAAAjG,UAAAgH,aAAA,SAAaX,GACjB,GAAIA,GAIuB,MAHTA,EAAIE,MAAM,KACK,GAGzB,QAOJN,EAAAjG,UAAAqH,oBAAA,SAAoBhF,EAAcH,EAAcO,GACpD,IAAM6E,EAAOjF,EAAMgC,OAAOkD,MACtB,SAACC,GAAU,OAAAA,EAAMtF,QAAUA,GAASsF,aAAiBzE,GAAQyE,EAAMvF,MAAMQ,MAAQA,KAGjF6E,IACAA,EAAKpE,gBAAiB,MA9NlC,GCbAuE,EAAA,WAKI,SAAAA,EAAYC,EAAeC,EAAe/C,GACtCvE,KAAKuH,OAASF,EACdrH,KAAKwH,OAASF,EACdtH,KAAKyH,UAAYlD,SAGrBjF,OAAAoI,eAAIN,EAAAzH,UAAA,QAAK,KAAT,WACI,OAAOK,KAAKuH,YAGhB,SAAU3G,GACNZ,KAAKuH,OAAS3G,mCAGlBtB,OAAAoI,eAAIN,EAAAzH,UAAA,QAAK,KAAT,WACI,OAAOK,KAAKwH,YAGhB,SAAU5G,GACNZ,KAAKwH,OAAS5G,mCAGlBtB,OAAAoI,eAAIN,EAAAzH,UAAA,WAAQ,KAAZ,WACI,OAAOK,KAAKyH,eAGhB,SAAa7G,GACTZ,KAAKyH,UAAY7G,qCAhCzB,GCYA+G,EAAA,WAAA,SAAAA,YACkBA,EAAAC,mBAAP,SACHC,EACA1F,EACAC,EACA0F,EACAC,EACA/F,GAEA,IAAMgG,EAAWhG,EAAMuB,gBAAgBpB,EAAKC,GACtC6F,EAAYjG,EAAMuB,gBAAgBuE,EAASC,GAE7CC,IACAA,EAASpG,MAAMO,IAAM2F,EACrBE,EAASpG,MAAMQ,IAAM2F,GAGrBE,IACAjG,EAAMgC,OAAShC,EAAMgC,OAAOkE,QAAO,SAACf,GAAU,OAAAA,IAAUc,MAE5D,IAAME,EAAUnG,EAAM+B,cAAc8D,EAAc7F,EAAMgC,QAWxD,OATIgE,IACAA,EAASpG,MAAMQ,IAAMA,EACrB4F,EAASpG,MAAMO,IAAMA,GAGrB8F,GACAjG,EAAMgC,OAAO5C,KAAK6G,GAGfE,GAGGR,EAAAS,OAAP,SACHC,EACAC,EACA/D,GAEA,GAAIA,EAAU,CACV,IAAMgE,EAAU,IAAMF,EAAYjG,IAC5BoG,EAAQ,IAAMF,EAAUlG,IAC9B,OACIqG,OAAOC,aAAaH,IACnBF,EAAYlG,IAAM,GACnBsG,OAAOC,aAAaF,IACnBF,EAAUnG,IAAM,GAIrB,OACIsG,OAAOC,aAAaL,EAAYjG,IAFjB,KAGdsC,KAAKC,IAAI0D,EAAYlG,IAAM,GAAK,GACjCsG,OAAOC,aAAaJ,EAAUlG,IAJf,KAKdsC,KAAKC,IAAI2D,EAAUnG,IAAM,GAAK,IAK7BwF,EAAAgB,uBAAP,SAA8BC,EAAgBrE,GACjD,IAAI8C,EACAC,EASJ,OARI/C,GACA8C,EAAQ,IAAMuB,EAAOC,WAAW,GAChCvB,GAASsB,EAAOvC,OAAO,GAAK,IAE5BgB,EAAQuB,EAAOC,WAAW,GAAK,GAC/BvB,EAAQ5C,KAAKC,KAAKiE,EAAOvC,OAAO,GAAK,IAGlC,IAAIe,EAAgBC,EAAOC,EAAO/C,IAG/BoD,EAAAmB,mCAAP,SACHF,EACA5G,EACAH,eAEIkH,EAAU/I,KAAK2I,uBAAuBC,EAAQ5G,EAAMuC,UACpD+D,EAAY,IAAIpG,EAAM6G,EAAQzB,MAAOyB,EAAQ1B,OAC7C2B,EAAc,OAElB,IAAkB,IAAAC,EAAA9I,EAAA6B,EAAMgC,OAAOkE,QAAO,SAAAf,GAAS,OAAAA,EAAMtF,QAAUA,MAAMqH,EAAAD,EAAAtI,QAAAuI,EAAArI,KAAAqI,EAAAD,EAAAtI,OAAE,CAAlE,IAAIwG,EAAK+B,EAAAtI,UACV,IAAkB,IAAAuI,GAAAC,OAAA,EAAAjJ,EAAAgH,EAAMrE,qBAAkBuG,EAAAF,EAAAxI,QAAA0I,EAAAxI,KAAAwI,EAAAF,EAAAxI,OAAE,CAAvC,IAAIiB,EAAKyH,EAAAzI,OACL+G,EAAUC,mBACXT,EAAMtF,MACNsF,EAAMvF,MAAMO,IACZgF,EAAMvF,MAAMQ,IACZ2G,EAAQzB,MACRyB,EAAQ1B,MACRrF,IACCJ,EAAMS,QAAQiG,IACfU,EAAY5H,KAAK+F,wMAI7B,OAAO6B,GAGGrB,EAAA2B,sCAAP,SACHV,EACA5G,EACAH,eAEIkH,EAAU/I,KAAK2I,uBAAuBC,EAAQ5G,EAAMuC,UACpD+D,EAAY,IAAIpG,EAAM6G,EAAQzB,MAAOyB,EAAQ1B,OAC7C2B,EAAc,OAClB,IAAkB,IAAAC,EAAA9I,EAAA6B,EAAMgC,OAAOkE,QAAO,SAAAf,GAAS,OAAAA,EAAMtF,QAAUA,MAAMqH,EAAAD,EAAAtI,QAAAuI,EAAArI,KAAAqI,EAAAD,EAAAtI,OAAE,CAAlE,IAAIwG,EAAK+B,EAAAtI,UACV,IAAkB,IAAAuI,GAAAI,OAAA,EAAApJ,EAAAgH,EAAMjE,wBAAqBmG,EAAAF,EAAAxI,QAAA0I,EAAAxI,KAAAwI,EAAAF,EAAAxI,OAAE,CAA1C,IAAIiB,EAAKyH,EAAAzI,OACL+G,EAAUC,mBACXT,EAAMtF,MACNsF,EAAMvF,MAAMO,IACZgF,EAAMvF,MAAMQ,IACZ2G,EAAQzB,MACRyB,EAAQ1B,MACRrF,IACCJ,EAAMS,QAAQiG,IACfU,EAAY5H,KAAK+F,wMAK7B,OAAO6B,GAGGrB,EAAA6B,aAAP,SAAoB5H,EAAc2C,GACrC,GAAIA,EAAU,CACV,IAAMgE,EAAU,IAAM3G,EAAMQ,IAC5B,OACIqG,OAAOC,aAAaH,IACnB3G,EAAMO,IAAM,GAIjB,OACIsG,OAAOC,aAAa9G,EAAMQ,IAFX,KAGdsC,KAAKC,IAAI/C,EAAMO,IAAM,GAAK,IAKzBwF,EAAA8B,oBAAP,SAA2BtC,GAC9B,OAAIA,aAAiB7C,EACV,IAEH6C,aAAiB9C,EACV,IAEH8C,aAAiB/C,EACV,IAEH+C,aAAiBzE,EACV,IAEHyE,aAAiB3D,EACV,IAEH2D,aAAiBvC,EACV,IAQxB,IAGJ+C,EAAA+B,QAAP,SAAe1H,EAAcG,GACzB,OAAOH,EAAMuC,SACPpC,EAAM,EACNuC,KAAKC,IAAIxC,EAAM,GAAK,GAGvBwF,EAAAgC,UAAP,SAAiB3H,EAAcI,GAC3B,OAAOJ,EAAMuC,SACPkE,OAAOC,aAAa,IAAMtG,GAC1BqG,OAAOC,aAAa,GAAKtG,MAlLvC,GCDAwH,EAAA,WAAA,SAAAA,YAEWA,EAAAC,kBAAP,SAAyB7H,GACrBA,EAAMgC,OAAS,GAEf,IAAK,IAAIvD,EAAI,EAAGA,EAAI,IAAKA,EACrBuB,EAAMgC,OAAO5C,KAAK,IAAIkD,EAClB,IAAIpC,EAAM,EAAGzB,GACbgB,EAAM4B,MACNwB,EAAiBa,WACjB1D,IAGRA,EAAMgC,OAAO5C,KAAK,IAAIsB,EAClB,IAAIR,EAAM,EAAG,GACbT,EAAM4B,MACNwB,EAAiBY,WACjBzD,IAEJA,EAAMgC,OAAO5C,KAAK,IAAIiD,EAClB,IAAInC,EAAM,EAAG,GACbT,EAAM4B,MACNwB,EAAiBW,aACjBxD,IAEJA,EAAMgC,OAAO5C,KAAK,IAAIgD,EAClB,IAAIlC,EAAM,EAAG,GACbT,EAAM4B,MACNwB,EAAiBc,aACjB3D,IAEJA,EAAMgC,OAAO5C,KAAK,IAAIwD,EAClB,IAAI1C,EAAM,EAAG,GACbT,EAAM4B,MACNwB,EAAiBU,YACjBvD,IAEJA,EAAMgC,OAAO5C,KAAK,IAAIoC,EAClB,IAAItB,EAAM,EAAG,GACbT,EAAM4B,MACNwB,EAAiBS,WACjBtD,IAEJA,EAAMgC,OAAO5C,KAAK,IAAIgD,EAClB,IAAIlC,EAAM,EAAG,GACbT,EAAM4B,MACNwB,EAAiBc,aACjB3D,IAEJA,EAAMgC,OAAO5C,KAAK,IAAIiD,EAClB,IAAInC,EAAM,EAAG,GACbT,EAAM4B,MACNwB,EAAiBW,aACjBxD,IAEJA,EAAMgC,OAAO5C,KAAK,IAAIsB,EAClB,IAAIR,EAAM,EAAG,GACbT,EAAM4B,MACNwB,EAAiBY,WACjBzD,IAIJ,IAASvB,EAAI,EAAGA,EAAI,IAAKA,EACrBuB,EAAMgC,OAAO5C,KAAK,IAAIkD,EAClB,IAAIpC,EAAM,EAAGzB,GACbgB,EAAM2B,MACNyB,EAAiBO,WACjBpD,IAGRA,EAAMgC,OAAO5C,KAAK,IAAIsB,EAClB,IAAIR,EAAM,EAAG,GACbT,EAAM2B,MACNyB,EAAiBM,WACjBnD,IAEJA,EAAMgC,OAAO5C,KAAK,IAAIiD,EAClB,IAAInC,EAAM,EAAG,GACbT,EAAM2B,MACNyB,EAAiBK,aACjBlD,IAEJA,EAAMgC,OAAO5C,KAAK,IAAIgD,EAClB,IAAIlC,EAAM,EAAG,GACbT,EAAM2B,MACNyB,EAAiBQ,aACjBrD,IAEJA,EAAMgC,OAAO5C,KAAK,IAAIwD,EAClB,IAAI1C,EAAM,EAAG,GACbT,EAAM2B,MACNyB,EAAiBI,YACjBjD,IAEJA,EAAMgC,OAAO5C,KAAK,IAAIoC,EAClB,IAAItB,EAAM,EAAG,GACbT,EAAM2B,MACNyB,EAAiBC,WACjB9C,IAEJA,EAAMgC,OAAO5C,KAAK,IAAIgD,EAClB,IAAIlC,EAAM,EAAG,GACbT,EAAM2B,MACNyB,EAAiBQ,aACjBrD,IAEJA,EAAMgC,OAAO5C,KAAK,IAAIiD,EAClB,IAAInC,EAAM,EAAG,GACbT,EAAM2B,MACNyB,EAAiBK,aACjBlD,IAEJA,EAAMgC,OAAO5C,KAAK,IAAIsB,EAClB,IAAIR,EAAM,EAAG,GACbT,EAAM2B,MACNyB,EAAiBM,WACjBnD,IAGJA,EAAM8H,kBAxHd,GCIAC,EAAA,WAAA,SAAAA,YAEWA,EAAApK,UAAAkG,QAAA,SAAQC,EAAkBC,WAA1BnD,EAAA5C,KACH,GAAI8F,EAAU,CACVC,EAAa/D,MAAMuC,UAAW,EAC9BwB,EAAa/D,MAAMgC,OAAS,GAC5B+B,EAAaiE,QACbJ,EAAoBC,kBAAkB9D,EAAa/D,OACnD,IAAIiI,EAAQjK,KAAKkK,aAAapE,GAC1BqE,GAAW,aACNC,KACHD,EAEF,IAAIE,EAAiB,IADrBD,EAAOA,EAAKE,QAAQ,QAAS,KAGpBvD,SAAS,OACdsD,EAAiBE,EAAKC,iBAAiBJ,EAAKK,UAAUL,EAAK1J,OAAS,IACpE0J,EAAOA,EAAKK,UAAU,EAAGL,EAAK1J,OAAS,IAG3C,IAAImB,EAAqB,IAAZsI,GAAiBA,EAAU,GAAM,EACxC1I,EAAM2B,MACN3B,EAAM4B,MAEZ,GAAI,aAAaqH,KAAKN,IACdjD,EAAQQ,EAAUmB,mCAClBsB,EACArE,EAAa/D,MACbH,GACFqF,MAAK,SAAAC,GAAS,OAAAA,aAAiB7C,QAI7B6C,EAAQQ,EAAU2B,sCACdc,EAAMrE,EAAa/D,MAAOH,GAC5BqF,MAAK,SAAAC,GAAS,OAAAA,aAAiB7C,MAIjC6C,GACApB,EAAaqE,KAAKzC,EAAU6B,aACxBrC,EAAMvF,OACN,GACAwI,EAAOC,QAGf,GAAI,kBAAkBK,KAAKN,IAMnBjD,GALAnD,EAAS2D,EAAUmB,mCACnBsB,EAAKK,UAAU,GACf1E,EAAa/D,MACbH,IAEeqF,MAAK,SAAAC,GAAS,OAAAvE,EAAK+H,wBAClCP,EAAK/D,OAAO,GACZc,QAGApB,EAAaqE,KAAKzC,EAAU6B,aACxBrC,EAAMvF,OACN,GACAwI,EAAKK,UAAU,GAAKJ,QAI5B,GAAI,QAAUD,EACVrE,EAAaqE,KAAKvI,IAAUJ,EAAM2B,MAAQ,OAAS,aAEnD,GAAI,mBAAmBsH,KAAKN,GAAO,CAC/B,IAAIpG,EAAS2D,EAAU2B,sCACnBc,EAAKK,UAAUL,EAAKQ,QAAQ,KAAO,GACnC7E,EAAa/D,MACbH,GACFqG,QAAO,SAAAf,GAAS,OAAAA,aAAiB7C,KAE/B6C,OAAK,GAELA,EADAnD,EAAOtD,OAAS,EACR6J,EAAKM,aACT7G,EACAoG,EAAKK,UAAU,EAAG,IAGdzG,EAAO,KAIf+B,EAAaqE,KAAKzC,EAAU6B,aACxBrC,EAAMvF,OACN,GACAwI,EAAKK,UAAUL,EAAKQ,QAAQ,KAAO,GAAKP,OAG7C,CACH,GAAI,mBAAmBK,KAAKN,IACpBjD,EAAQQ,EAAU2B,sCAClBc,EAAKK,UAAUL,EAAKQ,QAAQ,KAAO,GACnC7E,EAAa/D,MACbH,GACFqF,MAAK,SAAAC,GAAS,OAAAvE,EAAK+H,wBACjBP,EAAKK,UAAU,EAAG,GAClBtD,QAGApB,EAAaqE,KAAKzC,EAAU6B,aACxBrC,EAAMvF,OACN,GACAwI,EAAKK,UAAUL,EAAKQ,QAAQ,KAAO,GAAKP,QAIhD,GAAa,UAATD,EACArE,EAAaqE,KAAKvI,IAAUJ,EAAM2B,MAAQ,OAAS,aAEnD,GAAI,qBAAqBsH,KAAKN,GAAO,CAC7BpG,EAAS2D,EAAU2B,sCACnBc,EAAKK,UAAUL,EAAKQ,QAAQ,KAAO,GACnC7E,EAAa/D,MACbH,GACFqG,QAAO,SAAAf,GAAS,OAAAvE,EAAK+H,wBACnBP,EAAK/D,OAAO,GACZc,OAGAA,EAAQoD,EAAKO,aACb9G,EACAoG,EAAKK,UAAU,EAAG,MAIlB1E,EAAaqE,KAAKzC,EAAU6B,aACxBrC,EAAMvF,OACN,GACAwI,EAAKK,UAAUL,EAAKQ,QACpB,KAAO,GAAKP,QAGpB,GAAI,uBAAuBK,KAAKN,GAAO,CAC/BpG,EAAS2D,EAAUmB,mCACnBsB,EAAKK,UAAU,EAAG,GAClB1E,EAAa/D,MACbH,GACFqG,QAAO,SAAAf,GAAS,OAAAvE,EAAK+H,wBACnBP,EAAK/D,OAAO,GACZc,OAGAA,EAAQoD,EAAKM,aACb7G,EACAoG,EAAKK,UAAU,EAAG,MAIlB1E,EAAaqE,KAAKzC,EAAU6B,aACxBrC,EAAMvF,OACN,GACAwI,EAAKK,UACL,EACA,GACAJ,QAGR,GAAI,wBAAwBK,KACxBN,GAAO,CACHpG,EAAS2D,EAAU2B,sCACnBc,EAAKK,UAAUL,EAAKQ,QAChB,KAAO,GACX7E,EAAa/D,MACbH,GACFqG,QAAO,SAAAf,GAAS,OAAAvE,EAAK+H,wBACnBP,EAAK/D,OAAO,GACZc,OAGAA,EAAQoD,EAAKM,aACb7G,EACAoG,EAAKK,UAAU,EAAG,MAIlB1E,EAAaqE,KACTzC,EAAU6B,aACNrC,EAAMvF,OACN,GACAwI,EAAKK,UACTL,EAAKQ,QACD,KAAO,GAAKP,QAGxBE,EAAKQ,YACDX,EACArE,EACAlE,EACAwI,gBArL5C,IAAiB,IAAAW,EAAA7K,EAAA8J,GAAKgB,EAAAD,EAAArK,QAAAsK,EAAApK,KAAAoK,EAAAD,EAAArK,OAAA,GAATsK,EAAArK,4GAoMbmJ,EAAApK,UAAAoL,YAAA,SAAYX,EAAMrE,EAAclE,EAAOwI,GAAvC,IAAAzH,EAAA5C,KACJ,GAAI,oBAAoB0K,KAAKN,GAAO,CAChC,IAAIpG,EAAS2D,EAAUmB,mCACnBsB,EAAKK,UAAU,EAAG,GAClB1E,EAAa/D,MACbH,GACFqG,QAAO,SAAAf,GAAS,OAAAvE,EAAK+H,wBACnBP,EAAK/D,OAAO,GACZc,MAGAA,EAAQnH,KAAK8K,aACb9G,EACAoG,EAAKK,UAAU,EAAG,IAGlBtD,GACApB,EAAaqE,KAAKzC,EAAU6B,aACxBrC,EAAMvF,OACN,GACAwI,EAAKK,UACL,EACA,GACAJ,KAKNN,EAAApK,UAAAuK,aAAA,SAAapE,GACnB,OAAOA,EAAS2E,UAAU3E,EAASoF,YAAY,KAAO,GACjDZ,QAAQ,YAAa,IACrBA,QAAQ,OAAQ,KAChBA,QAAQ,WAAY,IACpBa,OACAjF,MAAM,KACNgC,QAAO,SAAA7H,GAAK,OAAAA,MAGX0J,EAAApK,UAAAyL,UAAA,SAAUjE,EAAcnF,EAAcoI,GAC5C,IAAIrB,EAAUpB,EAAUgB,uBAAuByB,EAAMpI,EAAMuC,UAC3D4C,EAAMvF,MAAMQ,IAAM2G,EAAQ1B,MAC1BF,EAAMvF,MAAMO,IAAM4G,EAAQzB,OAG9ByC,EAAApK,UAAA0L,aAAA,SAAajB,GACT,MAAO,QAAQM,KAAKN,IAGhBL,EAAApK,UAAAgL,wBAAA,SAAwBP,EAAcjD,GAC1C,IAAImE,EAAkB,GAwBtB,OAvBInE,aAAiB3D,EACjB8H,EAAkB,IAEdnE,aAAiBvC,EACjB0G,EAAkB,IAEdnE,aAAiBzE,EACjB4I,EAAkB,IAEdnE,aAAiB/C,EACjBkH,EAAkB,IAEdnE,aAAiB9C,EACjBiH,EAAkB,IAEdnE,aAAiB7C,IACjBgH,EAAkB,KAOnClB,IAASkB,GAGZvB,EAAApK,UAAA4L,cAAA,SAAcnB,GAClB,MAAgB,QAATA,GAGHL,EAAApK,UAAA6L,YAAA,SAAY5C,EAAgB5G,GAChC,IAAI+G,EAAUpB,EAAUgB,uBAAuBC,EAAQ5G,EAAMuC,UAE7DvC,EAAMgC,OAAShC,EAAMgC,OAAOkE,QAAO,SAAAhH,GAAK,OAACA,EAAEU,MAAMS,QAAQ,IAAIH,EACzD6G,EAAQzB,MACRyB,EAAQ1B,YAIR0C,EAAApK,UAAA8L,aAAA,SAAarB,GACjB,MAAgB,UAATA,GAGHL,EAAApK,UAAAkL,aAAA,SAAa7G,EAAiB0H,GAClC,IAAIC,EAAmBhE,EAAU6B,aAAaxF,EAAO,GAAGpC,OAAO,GACvC+F,EAAU6B,aAAaxF,EAAO,GAAGpC,OAAO,GAChE,OAAO+J,EAAiBlB,UAAU,EAAG,KAAOiB,EACtC1H,EAAO,GACPA,EAAO,IAGT+F,EAAApK,UAAAmL,aAAA,SAAa9G,EAAiB0H,GAClC,IAAIC,EAAmBhE,EAAU6B,aAAaxF,EAAO,GAAGpC,OAAO,GACvC+F,EAAU6B,aAAaxF,EAAO,GAAGpC,OAAO,GAChE,OAAO+J,EAAiBlB,UAAU,EAAG,KAAOiB,EACtC1H,EAAO,GACPA,EAAO,IAGT+F,EAAApK,UAAAiM,iBAAA,SAAiBxB,GACrB,OAAOA,EACFE,QAAQ,KAAM,KACdA,QAAQ,KAAM,KACdA,QAAQ,KAAM,KACdA,QAAQ,KAAM,MAGfP,EAAApK,UAAA6K,iBAAA,SAAiBqB,GACrB,OAAQA,GACJ,IAAK,IACD,MAAO,IACX,IAAK,IACD,MAAO,IACX,IAAK,IACD,MAAO,IACX,IAAK,IACD,MAAO,IAEf,MAAO,MA9Uf,GbTAC,EAAA,WAAA,SAAAA,YAEWA,EAAAC,aAAP,SAAoBC,GAChB,OAAQA,GACJ,KAAKtK,EAAauK,IACd,OAAO,IAAIrG,EAEf,KAAKlE,EAAawK,IACd,OAAO,IAAInC,IAKhB+B,EAAAK,oBAAP,WACI,OAAO,IAAIvG,KAdnB,IAmBA,SAAYlE,GACRA,EAAAA,EAAA,IAAA,GAAA,MACAA,EAAAA,EAAA,IAAA,GAAA,MAFJ,CAAYA,IAAAA,EAAY,KczBxB,IAAA0K,EAAA,WAKI,SAAAA,EAAYC,EAAWC,EAAWzK,GAC9B7B,KAAKqM,EAAIA,EAAI,GACbrM,KAAKsM,EAAIA,EAAI,GACbtM,KAAK6B,MAAQA,SAGjBuK,EAAAzM,UAAA0C,QAAA,SAAQC,GACJ,OAAOA,GAAQA,EAAK+J,IAAMrM,KAAKqM,GAAKrM,KAAKsM,IAAMhK,EAAKgK,KAZ5D,GCIAC,EAAA,WAAA,SAAAA,YAEWA,EAAAC,cAAP,SACIC,EACAC,EACAC,EACAC,EACAC,GAEA,OAAO,IAAI3K,EACPwC,KAAKoI,OAAOL,EAAMH,EAAII,IAAQC,EAAS,IACvCjI,KAAKoI,OAAOL,EAAMJ,EAAIO,IAASC,EAAQ,MAKxCN,EAAAQ,gBAAP,SACIC,EACAC,EACAZ,EACAC,EACAY,EACAC,EACAC,EACA/F,EACAC,GAEA,IAAM+F,EAAaL,EAAW,EACxBM,EAAK5I,KAAKoI,OACXT,EAAIhF,GACLgG,GAEEE,EAAK7I,KAAKoI,OACXR,EAAIhF,GACL+F,GAGAxL,EAAQoL,EAAcO,QAAQN,EAAME,EAAOD,GAE/C,OAAO,IAAIf,EACP1H,KAAKoI,MAAMQ,EAAKD,EAAaA,EAAa,GAC1C3I,KAAKoI,MAAMS,EAAKF,EAAaA,EAAa,GAC1CxL,MA1CZ,gBCKI,SAAA4L,EAAYrD,EAAcjD,EAAetF,EAAe6L,GACpD1N,KAAKoK,KAAOA,EACZpK,KAAKmH,MAAQA,EACbnH,KAAK6B,MAAQA,EACb7B,KAAKqM,EAAIqB,SAGbD,EAAA9N,UAAAgO,cAAA,SAAcC,EAAgBC,EAAoBC,GAC9C9N,KAAK4N,MAAQA,EACb5N,KAAK6N,UAAYA,EACjB7N,KAAK8N,KAAOA,QChBpBC,EAAA,WAAA,SAAAA,IACI/N,KAAAgO,qBAAuB,IAAIC,EAAAA,gBAA+B,WAE1D3O,OAAAoI,eAAIqG,EAAApO,UAAA,eAAY,KAAhB,WACI,OAAOK,KAAKgO,qBAAqBpN,WAGrC,SAAiBsN,GACblO,KAAKgO,qBAAqBrN,KAAKuN,oCAGnCH,EAAApO,UAAAwO,QAAA,SAAQC,GACJpO,KAAKqO,aAAY/M,EAAOtB,KAAKqO,aAAY,CAAED,KAG/CL,EAAApO,UAAA2O,IAAA,WACI,IAAMC,EAAkBvO,KAAKwO,cAI7B,OAHAxO,KAAKqO,aAAerO,KAAKqO,aAAanG,QAClC,SAACuG,GAAU,OAAAA,IAAUF,KAElBA,GAGXR,EAAApO,UAAA+O,OAAA,WACI,OAAO1O,KAAKqO,cAGhBN,EAAApO,UAAAgP,MAAA,WACI3O,KAAKqO,aAAe,IAGxBN,EAAApO,UAAA6O,YAAA,WACI,OAAOxO,KAAKqO,aAAarO,KAAK4O,qBAGlCb,EAAApO,UAAAiP,iBAAA,WACI,OAAO5O,KAAKqO,aAAa3N,OAAS,KApC1C,GCHAmO,EAAA,aACoBA,EAAAC,wBAA0B,kBAC1BD,EAAAE,yBAA2B,UAE3BF,EAAAG,aAAe,IACfH,EAAAI,eAAiB,IACjBJ,EAAAK,eAAiB,IAEjBL,EAAAM,2BAA6B,2BAC7BN,EAAAO,gCAAkC,UAClCP,EAAAQ,+BAAiC,iDCArD,ICVYC,EAWAC,EDDZC,EAAA,WAAA,SAAAA,IAEYxP,KAAAyP,eAAyB,SAGjCnQ,OAAAoI,eAAI8H,EAAA7P,UAAA,iBAAc,KAAlB,WACI,OAAOK,KAAK0P,qBAGhB,SAAmB9O,GACfZ,KAAK0P,gBAAkB9O,mCAI3BtB,OAAAoI,eAAI8H,EAAA7P,UAAA,eAAY,KAAhB,WACI,OAAOK,KAAKyP,mBAGhB,SAAiB7O,GACbZ,KAAKyP,cAAgB7O,mCAGzB4O,EAAA7P,UAAAgQ,eAAA,WACI,YAA+BC,IAAxB5P,KAAK6P,gBAAwD,OAAxB7P,KAAK6P,gBAGrDL,EAAA7P,UAAAmQ,aAAA,SAAa3I,GACT,IAAI4I,EAAW5I,EAAMtF,QAAUJ,EAAM2B,MACrC,OAAQ+D,EAAMlH,aACV,KAAKuD,EACD,OAAOuM,EAAU/P,KAAK6P,eAAeG,aAAehQ,KAAK6P,eAAeI,aAC5E,KAAKrL,EACD,OAAOmL,EAAU/P,KAAK6P,eAAeK,cAAgBlQ,KAAK6P,eAAeM,cAC7E,KAAKzN,EACD,OAAOqN,EAAU/P,KAAK6P,eAAeO,aAAepQ,KAAK6P,eAAeQ,aAC5E,KAAKjM,EACD,OAAO2L,EAAU/P,KAAK6P,eAAeS,eAAiBtQ,KAAK6P,eAAeU,eAC9E,KAAKlM,EACD,OAAO0L,EAAU/P,KAAK6P,eAAeW,eAAiBxQ,KAAK6P,eAAeY,eAC9E,KAAKnM,EACD,OAAOyL,EAAU/P,KAAK6P,eAAea,aAAe1Q,KAAK6P,eAAec,eAIpFnB,EAAA7P,UAAAiR,gBAAA,WACI5Q,KAAK6P,eAAiB,CAClBU,eAAgB,GAChBN,aAAc,GACdQ,eAAgB,GAChBN,cAAe,GACfE,aAAc,GACdC,eAAgB,GAChBN,aAAc,GACdQ,eAAgB,GAChBE,aAAc,GACdR,cAAe,GACfE,aAAc,GACdO,aAAc,QAzD1B,GEVAE,EAAA,WAAA,SAAAA,IACqB7Q,KAAA8Q,eAA2B,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,IAAK,KAE/D9Q,KAAA+Q,eAA2B,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAE1D/Q,KAAAgR,eAAc1P,EAAiBtB,KAAK8Q,gBACpC9Q,KAAAiR,eAAc3P,EAAiBtB,KAAK+Q,uBAE5CzR,OAAAoI,eAAImJ,EAAAlR,UAAA,UAAO,KAAX,WACI,OAAOK,KAAKgR,gDAGhB1R,OAAAoI,eAAImJ,EAAAlR,UAAA,UAAO,KAAX,WACI,OAAOK,KAAKiR,gDAGhBJ,EAAAlR,UAAA+J,QAAA,WACI1J,KAAKgR,eAAiBhR,KAAKgR,eAAetH,UAC1C1J,KAAKiR,eAAiBjR,KAAKiR,eAAevH,WAG9CmH,EAAAlR,UAAAqK,MAAA,WACIhK,KAAKkR,QAGDL,EAAAlR,UAAAuR,KAAA,WACJlR,KAAKgR,eAAc1P,EAAOtB,KAAK8Q,gBAC/B9Q,KAAKiR,eAAc3P,EAAOtB,KAAK+Q,mBA3BvC,GCGAI,EAAA,WAAA,SAAAA,YAEIA,EAAAxR,UAAAyR,UAAA,SAAU3E,EAAmB4E,EAAoBC,GACxCD,GACGC,IACA7E,EAAM8E,OAAOC,SAASC,iBAAiBC,MAAMC,UAAYL,MALzE,GCEAM,EAAA,WAII,SAAAA,IACI5R,KAAK6R,iBAAmB,IAAIV,SAGzBS,EAAAjS,UAAAkG,QAAA,SAAQ4G,EAAmB4E,EAAoBC,GAClDtR,KAAK6R,iBAAiBT,UAAU3E,EAAO4E,EAAWC,IAGtDM,EAAAjS,UAAAmS,oBAAA,SAAoBC,GAChB/R,KAAK6R,iBAAmBE,KAbhC,GCFAC,EAAA,WAAA,SAAAA,YAEIA,EAAArS,UAAAsS,YAAA,SAAYxF,GACR,IAAMiF,EAAQjF,EAAM8E,OAAOE,iBAAiBC,MAC5CA,EAAMQ,OAAS,OACfR,EAAMS,SAAW,cALzB,GCEAC,EAAA,WAII,SAAAA,IACIpS,KAAKqS,mBAAqB,IAAIL,SAG3BI,EAAAzS,UAAAkG,QAAA,SAAQ4G,GACXzM,KAAKqS,mBAAmBJ,YAAYxF,IAGxC2F,EAAAzS,UAAA2S,sBAAA,SAAsBP,GAClB/R,KAAKqS,mBAAqBN,KAblC,GCHAQ,EAAA,WAAA,SAAAA,YAEIA,EAAA5S,UAAA6N,QAAA,SAAQN,EAAWE,EAAYD,GAC3B,IAAItL,EAAQ,QAYZ,OAVIqL,GAAQE,KACRvL,EAAQ,OAERsL,IACAtL,EAAQ,SAEPuL,GAASF,IAASC,IACnBtL,EAAQ,UAGLA,KAff,GCCA2Q,EAAA,WAII,SAAAA,IACIxS,KAAKyS,eAAiB,IAAIF,SAG9BC,EAAA7S,UAAA6N,QAAA,SAAQN,EAAWE,EAAYD,GAC3B,OAAOnN,KAAKyS,eAAejF,QAAQN,EAAME,EAAOD,IAGpDqF,EAAA7S,UAAA+S,kBAAA,SAAkBD,GACdzS,KAAKyS,eAAiBA,KAb9B,GCCAE,EAAA,WAAA,SAAAA,IACY3S,KAAA4S,eAAiB,IAAI3E,EAAAA,gBAAyB,IAC9CjO,KAAA6S,gBAAkB,IAAI5E,EAAAA,gBAA0B,IAEjDjO,KAAA8S,QAAU9S,KAAK4S,eAAeG,eAC9B/S,KAAAgT,SAAWhT,KAAK6S,gBAAgBE,sBAEvCzT,OAAAoI,eAAYiL,EAAAhT,UAAA,UAAO,KAAnB,WACI,OAAOK,KAAK6S,gBAAgBjS,WAGhC,SAAoBqS,GAChBjT,KAAK6S,gBAAgBlS,KAAKsS,oCAG9B3T,OAAAoI,eAAYiL,EAAAhT,UAAA,SAAM,KAAlB,WACI,OAAOK,KAAK4S,eAAehS,WAG/B,SAAmBsS,GACflT,KAAK4S,eAAejS,KAAKuS,oCAG7BP,EAAAhT,UAAAwT,UAAA,SAAUC,GACNpT,KAAKiT,QAAO3R,EAAOtB,KAAKiT,QAAO,CAAEG,KAGrCT,EAAAhT,UAAA0T,aAAA,SAAaC,GACTtT,KAAKiT,QAAUjT,KAAKiT,QAAQ/K,QAAO,SAACkL,GAAW,OAACA,EAAO/Q,QAAQiR,OAGnEX,EAAAhT,UAAA4T,SAAA,SAASC,GACLxT,KAAKkT,OAAM5R,EAAOtB,KAAKkT,OAAM,CAAEM,KAGnCb,EAAAhT,UAAA8T,YAAA,SAAYA,GACRzT,KAAKkT,OAASlT,KAAKkT,OAAOhL,QAAO,SAACsL,GAAU,OAACA,EAAMnR,QAAQoR,OAG/Dd,EAAAhT,UAAA+T,eAAA,SAAeC,GACX,OAAO3T,KAAKiT,QAAQW,MAAK,SAACR,GAAW,OAAAA,EAAO/Q,QAAQsR,OAGxDhB,EAAAhT,UAAAkU,cAAA,SAAcC,GACV,OAAO9T,KAAKkT,OAAOU,MAAK,SAACJ,GAAiB,OAAAA,EAAMnR,QAAQyR,OAG5DnB,EAAAhT,UAAAgP,MAAA,WACI3O,KAAKkT,OAAS,GACdlT,KAAKiT,QAAU,MAjDvB,GCIAc,EAAA,SAAApR,GAAA,SAAAoH,0DAAyCjK,EAAAiK,EAAApH,GAE9BoH,EAAApK,UAAAkG,QAAA,SACH7D,EACAgS,EACA1L,EACAL,GAEAjI,KAAKiU,cAAgB,GACrBjU,KAAKkU,KAAQlU,KAAKiU,aAAevP,KAAKoI,MAAM9M,KAAKiU,eAAkB,EAAM,IAAMjU,KAAKiU,aAAe,KAAQ,IAE3G,IACIE,EADAC,EAAmB,GAGnBnM,IACAmM,EAAmBzM,EAAU2B,sCACzB3B,EAAU6B,aAAalB,EAAWtG,EAAMuC,UACxCvC,EACAgS,EAAYnS,OACdqG,QAAO,SAAAf,GAAS,OAAAA,EAAMlH,YAAY8E,OAASiP,EAAY/T,YAAY8E,SAEzEoP,EAAgBxM,EAAUmB,mCACtBnB,EAAU6B,aAAalB,EAAWtG,EAAMuC,UACxCvC,EACAgS,EAAYnS,OACdqG,QAAO,SAAAf,GAAS,OAAAA,EAAMlH,YAAY8E,OAASiP,EAAY/T,YAAY8E,QAEjEiP,aAAuB1P,IAAS2D,GAAyC,IAA5BmM,EAAiB1T,OAC9DV,KAAKkU,KAAOvM,EAAU6B,aAAalB,EAAWtG,EAAMuC,UAEhDyP,aAAuB1P,GAAQ2D,EAC/BjI,KAAKkU,KAAOvM,EAAU6B,aAClBwK,EAAYpS,MACZI,EAAMuC,UACRkG,UAAU,EAAG,GAAK,IAAM9C,EAAU6B,aAChClB,EACAtG,EAAMuC,UAGNyP,aAAuBxQ,GAA6D,IAApDkB,KAAKC,IAAIqP,EAAYpS,MAAMQ,IAAMkG,EAAUlG,KACvEJ,EAAMuC,SACNvE,KAAKkU,KAAO5L,EAAUlG,IAAM,EACtB,MACA,QAENpC,KAAKkU,KAAO5L,EAAUlG,IAAM,EACtB,QACA,QAGJ4R,aAAuB1P,IAAqC,IAA5B8P,EAAiB1T,QAAgByT,EAAczT,OAAS,EAC1FV,KAAKkU,KAAOvM,EAAU8B,oBAAoBuK,GAAerM,EAAU6B,aAC/DlB,EACAtG,EAAMuC,UAGN4P,GAA0C,IAAzBA,EAAczT,QAA4C,IAA5B0T,EAAiB1T,OAC5DV,KAAKqU,aACLF,EAAc,GACdA,EAAc,IAEdnU,KAAKkU,KAAOvM,EAAU8B,oBAClBuK,GAAerM,EAAU+B,QACzB1H,EACAgS,EAAYpS,MAAMO,KAClBwF,EAAU6B,aACVlB,EACAtG,EAAMuC,UAGVvE,KAAKkU,KAAOvM,EAAU8B,oBAClBuK,GAAerM,EAAUgC,UACzB3H,EACAgS,EAAYpS,MAAMQ,KAClBuF,EAAU6B,aACVlB,EACAtG,EAAMuC,UAIV6P,EAAiB1T,OAAS,EACrBV,KAAKqU,aACND,EAAiB,GACjBA,EAAiB,IAEjBpU,KAAKkU,KAAOvM,EAAU8B,oBAClBuK,GAAerM,EAAU+B,QACzB1H,EACAgS,EAAYpS,MAAMO,KAClB,IAAMwF,EAAU6B,aAChBlB,EACAtG,EAAMuC,UAGVvE,KAAKkU,KAAOvM,EAAU8B,oBAClBuK,GAAerM,EAAUgC,UACzB3H,EACAgS,EAAYpS,MAAMQ,KAClB,IAAMuF,EAAU6B,aAChBlB,EACAtG,EAAMuC,UAIdvE,KAAKkU,KAAOvM,EAAU8B,oBAClBuK,GAAe,IAAMrM,EAAU6B,aAC/BlB,EAAWtG,EAAMuC,UAS7CvE,KAAKkU,IAAMlU,KAAKkU,IAAI/I,QAGhBpB,EAAApK,UAAAgL,wBAAA,SAAwBP,EAAcjD,GAC1C,OAAOQ,EAAU8B,oBAAoBtC,KAAWiD,GAG5CL,EAAApK,UAAA0U,aAAA,SAAaC,EAAeC,GAChC,OAAOD,EAAO1S,MAAMQ,MAAQmS,EAAO3S,MAAMQ,OA3HjD,CCJA,WAAA,SAAAoS,IAEcxU,KAAAkU,IAAM,GACNlU,KAAAiU,aAAe,UASlBO,EAAA7U,UAAA8U,OAAA,WACH,OAAOzU,KAAKkU,KAGhBM,EAAA7U,UAAA+U,cAAA,SAAcC,EAAoB/G,EAAgBC,GAC1C8G,EACA3U,KAAKkU,KAAO,IAERtG,IACA5N,KAAKkU,KAAO,MAKxBM,EAAA7U,UAAAqK,MAAA,WACIhK,KAAKkU,IAAM,GACXlU,KAAKiU,aAAe,IAGxBO,EAAA7U,UAAAiV,mBAAA,SAAmBC,GACf,OAAQA,GACJ,KAAK,EACD7U,KAAKkU,KAAO,KACZ,MACJ,KAAK,EACDlU,KAAKkU,KAAO,KACZ,MACJ,KAAK,EACDlU,KAAKkU,KAAO,KACZ,MACJ,KAAK,EACDlU,KAAKkU,KAAO,OAKxBM,EAAA7U,UAAAmV,WAAA,WACI,GAAG9U,KAAKiU,cAAgB,GAAK,CACzBjU,KAAKiU,cAAgB,GACrB,IAAMc,EAAS,IAAIC,OAAQ,UAC3BD,EAAOrK,KAAK1K,KAAKkU,KACjBlU,KAAKkU,IAAMlU,KAAKkU,IAAIzJ,UAAU,EAAGsK,EAAOE,WAAW9J,WArD/D,ICiBA+J,EAAA,WAwBI,SAAAA,EAAsBlT,GAtBfhC,KAAAmV,kBAAuC,IAAI/C,EAC3CpS,KAAAoV,gBAAmC,IAAIxD,EACvC5R,KAAAqV,aAAqC,IAAItL,EACtC/J,KAAAiN,cAA+B,IAAIuF,EAEtCxS,KAAA4I,OAAyB,IAAIiI,EAC7B7Q,KAAAsV,eAAyBzG,EAAUG,aAEnChP,KAAAuV,UAAW,EAQXvV,KAAAwV,aAA6B,IAAI7C,EACjC3S,KAAAyV,iBAA0C,IAAIjG,EAC9CxP,KAAA0V,oBAA2C,IAAI3H,EAE/C/N,KAAAqR,WAAY,EAGfrR,KAAKgC,MAAQA,SA6BVkT,EAAAvV,UAAAgW,qBAAA,SAAqBxO,GACpBA,aAAiB7C,IACjB6C,EAAMtE,gBAAiB,IAIxBqS,EAAAvV,UAAAiW,iBAAA,SAAiBzO,GAChBA,aAAiBzE,IACjByE,EAAMtE,gBAAiB,IAIxBqS,EAAAvV,UAAAkW,iBAAA,SAAiB1O,GAChBA,aAAiB3D,IACjB2D,EAAMtE,gBAAiB,IAIxBqS,EAAAvV,UAAAmW,eAAA,WACH,OAAO9V,KAAK0V,oBAAoBhH,YAzExC,GCNAqH,EAAA,WAKI,SAAAA,EAAYhQ,EAAoCiQ,GAC5ChW,KAAK+F,aAAeA,EAGhB/F,KAAKgW,kBADLA,GAGyBlK,EAAyBK,6BAK1D4J,EAAApW,UAAAsW,UAAA,WACIrM,EAAoBC,kBAAkB7J,KAAK+F,aAAa/D,QAG5D+T,EAAApW,UAAAuW,QAAA,SAAQlQ,GACJhG,KAAKgW,kBAAkBnQ,QAAQG,EAAKhG,KAAK+F,eAG7CgQ,EAAApW,UAAAwW,QAAA,SAAQjC,GACJlU,KAAKgW,kBAAkBnQ,QAAQqO,EAAKlU,KAAK+F,eAG7CgQ,EAAApW,UAAAyW,gBAAA,SAAgBrQ,GACZ/F,KAAK+F,aAAeA,GAGxBgQ,EAAApW,UAAA0W,qBAAA,SAAqBL,GACjBhW,KAAKgW,kBAAoBA,KAjCjC,GCbAM,EAII,SAAYtU,GACRhC,KAAKgC,MAAQA,GCJrBuU,EAAA,WAAA,SAAAA,IACIvW,KAAAwW,eAAiB,IAAIvI,EAAAA,gBAA8B,WAEnD3O,OAAAoI,eAAI6O,EAAA5W,UAAA,SAAM,KAAV,WACI,OAAOK,KAAKwW,eAAe5V,WAG/B,SAAWsN,GACPlO,KAAKwW,eAAe7V,KAAKuN,oCAG7BqI,EAAA5W,UAAAwO,QAAA,SAAQM,GACJzO,KAAKkO,OAAM5M,EAAOtB,KAAKkO,OAAM,CAAEO,KAGnC8H,EAAA5W,UAAA8W,UAAA,WACI,OAAOzW,KAAKkO,QAGhBqI,EAAA5W,UAAA2O,IAAA,WACI,IAAMoI,EAAY1W,KAAK2W,eAEvB,OADA3W,KAAKkO,OAASlO,KAAKkO,OAAOhG,QAAO,SAACuG,GAAU,OAAAA,IAAUiI,KAC/CA,GAGXH,EAAA5W,UAAAiX,QAAA,WACI,OAA8B,IAAvB5W,KAAKkO,OAAOxN,QAGvB6V,EAAA5W,UAAAgP,MAAA,WACI3O,KAAKkO,OAAS,IAGlBqI,EAAA5W,UAAAgX,aAAA,WACI,OAAO3W,KAAKkO,OAAOlO,KAAK6W,sBAG5BN,EAAA5W,UAAAkX,kBAAA,WACI,OAAO7W,KAAKkO,OAAOxN,OAAS,KAtCpC,GCDAoW,EAAA,WAAA,SAAAA,YAIIA,EAAAnX,UAAA0C,QAAA,SAAQmR,GACJ,OAAOA,GAASxT,KAAK+W,MAAM1U,QAAQmR,EAAMuD,QAAU/W,KAAKgX,IAAI3U,QAAQmR,EAAMwD,QALlF,GCAAC,EAAA,WAAA,SAAAA,YAGIA,EAAAtX,UAAA0C,QAAA,SAAQ+Q,GACJ,OAAOA,GAAUpT,KAAKkX,UAAU7U,QAAQ+Q,EAAO8D,cAJvD,GCKAC,EAAA,SAAAxU,GAKI,SAAAwU,EAAYhQ,EAAsBiQ,EAAqBvV,EAAcG,GAArE,IAAAY,EACID,EAAA9C,KAAAG,KAAMmH,IAAMnH,YACZ4C,EAAKwU,aAAeA,EACpBxU,EAAKf,MAAQA,EACbe,EAAKZ,MAAQA,WATuBlC,EAAAqX,EAAAxU,GAYxCwU,EAAAxX,UAAAuD,oBAAA,WAAA,IAAAN,EAAA5C,KACI,OAAOA,KAAKmH,MACPjE,sBACAgF,QACG,SAACtG,GACG,OAAC+F,EAAUC,mBACPhF,EAAKf,MACLe,EAAKwU,aAAajV,IAClBS,EAAKwU,aAAahV,IAClBR,EAAMO,IACNP,EAAMQ,IACNQ,EAAKZ,WAKzBmV,EAAAxX,UAAAmD,iBAAA,WAAA,IAAAF,EAAA5C,KACI,OAAOA,KAAKmH,MACPrE,mBACAoF,QACG,SAACtG,GACG,OAAC+F,EAAUC,mBACPhF,EAAKf,MACLe,EAAKwU,aAAajV,IAClBS,EAAKwU,aAAahV,IAClBR,EAAMO,IACNP,EAAMQ,IACNQ,EAAKZ,aAvC7B,ECAI,SAAsBmF,GAClBnH,KAAKmH,MAAQA,KCCrBkQ,EAAA,WAAA,SAAAA,YAEWA,EAAAC,uBAAP,SAA8BtV,EAAcmF,EAAcoQ,GACtD,IAAMxH,EAAU5I,EAAMtF,QAAUJ,EAAM2B,MACtC,OAAQmU,GACJ,KAAK,EACDvV,EAAMgC,OAAO5C,KACT,IAAIwD,EACAuC,EAAMvF,MACNuF,EAAMtF,MACNkO,EACMlL,EAAiBI,YACjBJ,EAAiBU,YACvBvD,IAGR,MACJ,KAAK,EACDA,EAAMgC,OAAO5C,KACT,IAAIsB,EACAyE,EAAMvF,MACNuF,EAAMtF,MACNkO,EACMlL,EAAiBM,WACjBN,EAAiBY,WACvBzD,IAGR,MACJ,KAAK,EACDA,EAAMgC,OAAO5C,KACT,IAAIgD,EACA+C,EAAMvF,MACNuF,EAAMtF,MACNkO,EACMlL,EAAiBQ,aACjBR,EAAiBc,aACvB3D,IAGR,MACJ,KAAK,EACDA,EAAMgC,OAAO5C,KACT,IAAIiD,EACA8C,EAAMvF,MACNuF,EAAMtF,MACNkO,EACMlL,EAAiBK,aACjBL,EAAiBW,aACvBxD,QAjDxB,InBTA,SAAYsN,GAERA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,OAAA,GAAA,SACAA,EAAAA,EAAA,OAAA,GAAA,SACAA,EAAAA,EAAA,KAAA,GAAA,OACAA,EAAAA,EAAA,KAAA,GAAA,OAPJ,CAAYA,IAAAA,EAAc,KAW1B,SAAYC,GAERA,EAAAA,EAAA,MAAA,GAAA,QACAA,EAAAA,EAAA,KAAA,GAAA,OAHJ,CAAYA,IAAAA,EAAU,KoBMtB,IAAAiI,EAAA,WAAA,SAAAA,YAEWA,EAAAtX,OAAP,SACI6I,EACA0O,EACAC,EACA1V,GAEA,IAAImF,EACAtF,EAAQ6V,IAAenI,EAAWoI,MAChClW,EAAM2B,MACN3B,EAAM4B,MAEZ,OAAQoU,GACJ,KAAKnI,EAAesI,MAChBzQ,EAAQ,IAAIvC,EACR,IAAI1C,EAAM6G,EAAQzB,MAAOyB,EAAQ1B,OACjCxF,EACAA,IAAUJ,EAAM2B,MAAQyB,EAAiBI,YAAcJ,EAAiBU,YACxEvD,GAEJ,MACJ,KAAKsN,EAAeuI,KAChB1Q,EAAQ,IAAI3D,EACR,IAAItB,EAAM6G,EAAQzB,MAAOyB,EAAQ1B,OACjCxF,EACAA,IAAUJ,EAAM2B,MAAQyB,EAAiBC,WAAaD,EAAiBS,WACvEtD,GAGJ,MACJ,KAAKsN,EAAewI,OAChB3Q,EAAQ,IAAI9C,EACR,IAAInC,EAAM6G,EAAQzB,MAAOyB,EAAQ1B,OACjCxF,EACAA,IAAUJ,EAAM2B,MAAQyB,EAAiBK,aAAeL,EAAiBW,aACzExD,GAEJ,MACJ,KAAKsN,EAAeyI,OAChB5Q,EAAQ,IAAI/C,EACR,IAAIlC,EAAM6G,EAAQzB,MAAOyB,EAAQ1B,OACjCxF,EACAA,IAAUJ,EAAM2B,MAAQyB,EAAiBQ,aAAeR,EAAiBc,aACzE3D,GAEJ,MACJ,KAAKsN,EAAe0I,KAChB7Q,EAAQ,IAAIzE,EACR,IAAIR,EAAM6G,EAAQzB,MAAOyB,EAAQ1B,OACjCxF,EACAA,IAAUJ,EAAM2B,MAAQyB,EAAiBM,WAAaN,EAAiBY,WACvEzD,GAEJ,MACJ,KAAKsN,EAAe2I,KAChB9Q,EAAQ,IAAI7C,EACR,IAAIpC,EAAM6G,EAAQzB,MAAOyB,EAAQ1B,OACjCxF,EACAA,IAAUJ,EAAM2B,MAAQyB,EAAiBO,WAAaP,EAAiBa,WACvE1D,GAKZ,OAAOmF,KAjEf,GCUA+Q,GAAA,SAAAvV,GAWI,SAAAuV,EACIlW,EACAmW,GAFJ,IAAAvV,EAIID,EAAA9C,KAAAG,KAAMgC,IAAMhC,YAbhB4C,EAAAwV,WAAY,EAcRxV,EAAKuV,WAAaA,EAClBvV,EAAKyV,YAAc,IAAItC,EAAYnT,GACnCA,EAAKyV,YAAYpC,YACjBrT,EAAK0V,mBAAqB,IAAI/B,WAnBJzW,EAAAoY,EAAAvV,GAsBvBuV,EAAAvY,UAAAqK,MAAA,WACHhK,KAAKsY,mBAAmB3J,QACxB3O,KAAK0V,oBAAoB/G,QACzB3O,KAAKqY,YAAYpC,YACjBjW,KAAKgC,MAAMgI,QACXhK,KAAK4I,OAAOoB,QACZhK,KAAKwV,aAAa7G,QAClB3O,KAAKqV,aAAarL,SAGfkO,EAAAvY,UAAA4Y,KAAA,WACH,IAAKvY,KAAKsY,mBAAmB1B,UAAW,CACpC,IAAM4B,EAAYxY,KAAKsY,mBAAmBhK,MAAMtM,MAC5ChC,KAAKgC,MAAMuC,UACXiU,EAAU9O,UAEd1J,KAAKgC,MAAQwW,EACbxY,KAAKgC,MAAMoS,iBAAmB,GAC9BpU,KAAKgC,MAAMmS,cAAgB,GAC3BnU,KAAKgC,MAAMyW,YAAc,KACzBzY,KAAK0V,oBAAoBpH,MACzBtO,KAAKgC,MAAM8H,eACX9J,KAAKqV,aAAaP,eAI1BoD,EAAAvY,UAAA+Y,cAAA,WACI,IAAMjW,EAAQzC,KAAKgC,MAAMS,QAErBzC,KAAKgC,MAAMuC,UACX9B,EAAMiH,UAEV1J,KAAK2Y,kBAAkBxK,QAAQ,IAAImI,EAAW7T,KAG3CyV,EAAAvY,UAAAyK,KAAA,SAAKxB,GACR,GAAIA,EAAQ,CACR,IAAMgQ,EAAgBjR,EAAUgB,uBAC5BC,EAAO6B,UAAU,EAAG,GACpBzK,KAAKgC,MAAMuC,UAGTsU,EAAclR,EAAUgB,uBAC1BC,EAAO6B,UAAU,EAAG,GACpBzK,KAAKgC,MAAMuC,UAGTyD,EAAWhI,KAAKgC,MAAM8W,gBACxBF,EAActR,MACdsR,EAAcvR,OAGlB,GAAIW,EAAU,CACV,GACKhI,KAAKgC,MAAM6E,oBACRmB,EAASnG,QAAUJ,EAAM4B,QAC3BrD,KAAKgC,MAAM6E,oBACTmB,EAASnG,QAAUJ,EAAM2B,MAE7B,OAGJpD,KAAK+Y,mBAAmB/Q,EAAUA,EAASpG,OAGvC5B,KAAKgC,MAAMgX,uBACP,IAAI9W,EAAM2W,EAAYvR,MAAOuR,EAAYxR,SAE7CrH,KAAKgC,MAAMiX,0BACP,IAAI/W,EAAM2W,EAAYvR,MAAOuR,EAAYxR,SAG7CrH,KAAKkZ,YACLlZ,KAAKoL,UACDpD,EACA,IAAI9F,EAAM2W,EAAYvR,MAAOuR,EAAYxR,OACvB,IAAlBuB,EAAOlI,QAAgBkI,EAAO6B,UAAU,EAAG,GAAK,GAGpDzK,KAAKgC,MAAMmX,YAAc,IAAIjX,EACzB0W,EAActR,MACdsR,EAAcvR,OAElBrH,KAAKgC,MAAMoX,aAAe,IAAIlX,EAC1B2W,EAAYvR,MACZuR,EAAYxR,OAGhBrH,KAAKqZ,oBAELrZ,KAAKqZ,sBAOrBnB,EAAAvY,UAAAoZ,mBAAA,SAAmBO,EAAqBlC,GACpCpX,KAAKgC,MAAMyW,YAAca,EACzBtZ,KAAKoY,WAAY,EACjBpY,KAAKgC,MAAMoS,iBAAmB,IAAI+C,EAC9BmC,EACAlC,EACApX,KAAKgC,MAAM6E,mBAAqBpF,EAAM2B,MAAQ3B,EAAM4B,MACpDrD,KAAKgC,OACPkB,sBACFlD,KAAKgC,MAAMmS,cAAgB,IAAIgD,EAC3BmC,EACAlC,EACApX,KAAKgC,MAAM6E,mBAAqBpF,EAAM2B,MAAQ3B,EAAM4B,MACpDrD,KAAKgC,OACPc,oBAGNoV,EAAAvY,UAAA4Z,eAAA,SAAeD,EAAclC,GAEpBpX,KAAKgC,MAAM6E,oBAAsByS,EAAazX,QAAUJ,EAAM4B,QAC7DrD,KAAKgC,MAAM6E,oBAAsByS,EAAazX,QAAUJ,EAAM2B,OAKpEpD,KAAK+Y,mBAAmBO,EAAclC,IAGnCc,EAAAvY,UAAA6Z,iBAAA,SAAiBpC,EAAqBqC,GACzC,IAAIC,GAAS,GAET1Z,KAAKgC,MAAMgX,uBAAuB5B,IAClCpX,KAAKgC,MAAMiX,0BAA0B7B,IACpCpX,KAAKuV,WAAa6B,EAAa5U,cAChCxC,KAAKkZ,YACLlZ,KAAKgC,MAAMmX,YAAc,IAAIjX,EACzBlC,KAAKgC,MAAMyW,YAAY7W,MAAMO,IAC7BnC,KAAKgC,MAAMyW,YAAY7W,MAAMQ,KAEjCpC,KAAKgC,MAAMoX,aAAehC,EAAa3U,QACvCzC,KAAKoL,UAAUpL,KAAKgC,MAAMyW,YAAarB,GAElCpX,KAAKgC,MAAMyW,YAAY7W,MAAMS,QAAQrC,KAAKgC,MAAMmX,eACjDO,GAAS,KAIbD,GAAeC,IACf1Z,KAAKqZ,mBAETrZ,KAAKqZ,mBACL,IAAMC,EAAetZ,KAAKgC,MAAM8W,gBAC5B1B,EAAajV,IACbiV,EAAahV,KAEbkX,IAAiBI,IACjB1Z,KAAK2Z,WAAWL,GAChBtZ,KAAKuZ,eAAeD,EAAclC,KAI1Cc,EAAAvY,UAAAia,YAAA,SACInN,EACA2K,EACAxK,EACAF,GAGA,GADA1M,KAAK6Z,UAAW,EACK,IAAjBpN,EAAMqN,OAiBV,GAFA9Z,KAAKwV,aAAa7G,QAGd3O,KAAKgC,MAAMyW,aACXrB,EAAa/U,QAAQrC,KAAKgC,MAAMyW,YAAY7W,OAE5C5B,KAAKqR,WAAY,MAJrB,CAQA,IAAMiI,EAAetZ,KAAKgC,MAAM8W,gBAC5B1B,EAAajV,IACbiV,EAAahV,KAGjB,GAAIpC,KAAKuV,UACD+D,EAAc,CACd,GAAI7M,EAAMsN,QAEN,YADA/Z,KAAKgC,MAAMgC,OAAShE,KAAKgC,MAAMgC,OAAOkE,QAAO,SAAAhH,GAAK,OAAAA,IAAMoY,MAG5DtZ,KAAKgC,MAAM6E,mBAAsByS,EAAazX,QAAUJ,EAAM2B,MAIlEpD,KAAKga,gBAAgBV,KAIrBtZ,KAAKoY,UACLpY,KAAKwZ,iBAAiBpC,GAAc,GAEhCkC,IACAtZ,KAAK2Z,WAAWL,GAChBtZ,KAAKuZ,eAAeD,EAAclC,UAhDtCpX,KAAKkX,UAAY3K,EAAWQ,gBACxB/M,KAAKsV,eACLtV,KAAKiN,cACLR,EAAMJ,EACNI,EAAMH,EACNG,EAAMsN,QACNtN,EAAMwN,OACNxN,EAAMyN,SACNtN,EACAF,IA4CZwL,EAAAvY,UAAAwa,UAAA,SACI1N,EACA2K,EACAxK,EACAF,GAGA,GADA1M,KAAK6Z,UAAW,EACK,IAAjBpN,EAAMqN,QAAiB9Z,KAAKoa,cAchC,GAFApa,KAAKwV,aAAa7G,SAEd3O,KAAKqa,aAAT,CAIA,GACIra,KAAKgC,MAAMyW,aACXrB,EAAa/U,QAAQrC,KAAKgC,MAAMyW,YAAY7W,QAC5C5B,KAAKqR,UAIL,OAFArR,KAAKqZ,wBACLrZ,KAAKqR,WAAY,GAGrB,IAAMiI,EAAetZ,KAAKgC,MAAM8W,gBAC5B1B,EAAajV,IACbiV,EAAahV,KAGbpC,KAAKga,gBAAgBV,IAIrBtZ,KAAKoY,WACLpY,KAAKwZ,iBAAiBpC,GAAc,SApCpCpX,KAAKsa,aACD7N,EAAMJ,EACNI,EAAMH,EACNG,EAAMsN,QACNtN,EAAMwN,OACNxN,EAAMyN,SACNtN,EAAMF,IAmClBwL,EAAAvY,UAAAuZ,UAAA,WACI,IAAMzW,EAAQzC,KAAKgC,MAAMS,QAErBzC,KAAKgC,MAAMuC,UACX9B,EAAMiH,UAEV1J,KAAKsY,mBAAmBnK,QAAQ,IAAImI,EAAW7T,KAGnDyV,EAAAvY,UAAAyL,UAAA,SAAUmP,EAAoBC,EAAiBnQ,GAC3C,IAAMpC,EAAYjI,KAAKgC,MAAMgC,OAAOkD,MAChC,SAACC,GACG,OAAAA,EAAMvF,MAAMQ,MAAQoY,EAASpY,KAC7B+E,EAAMvF,MAAMO,MAAQqY,EAASrY,OAUrC,GAPAnC,KAAKqV,aAAaxP,QACd7F,KAAKgC,MACLuY,EACAC,EACAvS,GAGAA,GAAasS,EAAY1Y,QAAUoG,EAAUpG,MAC7C7B,KAAKgC,MAAMgC,OAAShE,KAAKgC,MAAMgC,OAAOkE,QAClC,SAACf,GAAU,OAAAA,IAAUc,UAGzB,GAAIA,GAAasS,EAAY1Y,QAAUoG,EAAUpG,MAC7C,OAYR,IARA7B,KAAKya,qBAAuB,IAAIhN,EAC5B9F,EAAUS,OAAOmS,EAAY3Y,MAAO4Y,EAAUxa,KAAKgC,MAAMuC,UACzDgW,EAAYzY,SAASiD,KACrBwV,EAAY1Y,QAAUJ,EAAM2B,MAAQ,QAAU,UAC5C6E,GAENjI,KAAK0V,oBAAoBvH,QAAQnO,KAAKya,sBAElCF,aAAuB/W,IACFkB,KAAKC,IAAI6V,EAASpY,IAAMmY,EAAY3Y,MAAMQ,KAC5C,EACf,GAAIoY,EAASpY,IAAM,EAAG,CAClB,IAAM6B,EAAWjE,KAAKgC,MAAMuB,gBACxBgX,EAAY3Y,MAAMO,IAClB,GAECnC,KAAKuV,WACNtR,EAASrC,MAAMQ,IAAMpC,KAAKgC,MAAMuC,SAAW,EAAI,OAEhD,CACH,IAAMJ,EAAYnE,KAAKgC,MAAMuB,gBACzBgX,EAAY3Y,MAAMO,IAClB,GAECnC,KAAKuV,WACNpR,EAAUvC,MAAMQ,IAAMpC,KAAKgC,MAAMuC,SAAW,EAAI,GAM5DgW,aAAuBjW,GACvBtE,KAAKgC,MAAM0Y,0BAA0BF,GACrCxa,KAAKgC,MAAM2Y,uBAAuBJ,EAAaC,KAE/Cxa,KAAKgC,MAAMwC,eAAiB,KAC5BxE,KAAKgC,MAAMyC,eAAiB,MAGhC8V,EAAY3Y,MAAQ4Y,EACpBxa,KAAK4a,wBACL5a,KAAKgC,MAAM6E,oBAAsB7G,KAAKgC,MAAM6E,mBAEvC7G,KAAK6a,oBAAoBN,EAAalQ,IACvCrK,KAAK8a,oBAIb5C,EAAAvY,UAAAkb,oBAAA,SAAoBE,EAAuB1Q,GACvC,GAAM0Q,aAA0BzW,EAIhC,OAAiC,IAA7ByW,EAAenZ,MAAMO,KAA0C,IAA7B4Y,EAAenZ,MAAMO,KACvDnC,KAAKgC,MAAMgC,OAAShE,KAAKgC,MAAMgC,OAAOkE,QAClC,SAACf,GAAU,OAAAA,IAAU4T,KAKpB1Q,GAGDgN,EAAuBC,uBACnBtX,KAAKgC,MACL+Y,EACA1Q,GAEJrK,KAAK8a,iBAAiBzQ,IAPtBrK,KAAKgb,kBAAkBD,IAUpB,QAlBX,GAsBJ7C,EAAAvY,UAAAmb,iBAAA,SAAiBzQ,SACbrK,KAAK2V,qBAAqB3V,KAAKgC,MAAMyW,aACrCzY,KAAK4V,iBAAiB5V,KAAKgC,MAAMyW,aACjCzY,KAAK6V,iBAAiB7V,KAAKgC,MAAMyW,aAEjCzY,KAAKgC,MAAMiZ,iBAAmBjb,KAAKgC,MAAM+B,cACrCtC,EAAM4B,MACNrD,KAAKgC,MAAMgC,QAEfhE,KAAKgC,MAAMkZ,iBAAmBlb,KAAKgC,MAAM+B,cACrCtC,EAAM2B,MACNpD,KAAKgC,MAAMgC,QAEf,IAAM4J,EACF5N,KAAKgC,MAAMiZ,kBAAoBjb,KAAKgC,MAAMkZ,iBACxCvG,EACF3U,KAAKmb,sBAAsB1Z,EAAM4B,QACjCrD,KAAKmb,sBAAsB1Z,EAAM2B,OAC/ByK,EACF7N,KAAKob,YAAY3Z,EAAM4B,QAAUrD,KAAKob,YAAY3Z,EAAM2B,OAEnC,QAAzBiY,EAAArb,KAAKya,4BAAoB,IAAAY,GAAAA,EAAE1N,cAAcC,EAAOC,EAAW8G,GAC3D3U,KAAKqV,aAAaX,cAAcC,EAAW/G,EAAOC,GAClD7N,KAAKqV,aAAaT,mBAAmBvK,GAErCrK,KAAKqR,WAAY,EACjBrR,KAAKgC,MAAM8H,eAEX,IAAMwR,EAAWtb,KAAK0V,oBAAoBlH,cACtC8M,GAAYjR,IACZiR,EAASlR,MAAQC,GAGrBrK,KAAKmY,WAAWoD,KAAIjc,OAAAkc,OAAAlc,OAAAkc,OAAA,GACbF,GAAQ,CACX1N,MAAKA,EACL+G,UAASA,EACT9G,UAASA,EACT7H,IAAKhG,KAAKgC,MAAMgE,IAChBkO,IAAK,CACDA,IAAKlU,KAAKqV,aAAaZ,UAE3Bc,SAAUvV,KAAKuV,YAGnBvV,KAAK6Z,UAAW,GAGpB3B,EAAAvY,UAAAyb,YAAA,SAAYvZ,GACR,OAAIA,IAAUJ,EAAM2B,OAAUpD,KAAKgC,MAAMkZ,oBAGjCrZ,IAAUJ,EAAM4B,OAAUrD,KAAKgC,MAAMiZ,uBAAzC,EAFOjb,KAAKmb,sBAAsBtZ,IAQ1CqW,EAAAvY,UAAAqb,kBAAA,SAAkB7T,GAAlB,IAAAvE,EAAA5C,KACQmH,EAAMtF,QAAU7B,KAAKgC,MAAMyW,YAAY5W,OACvC7B,KAAKyb,MAAMC,MAAK,SAACnE,GACbF,EAAuBC,uBACnB1U,EAAKZ,MACLmF,EACAoQ,GAEJ3U,EAAKkY,iBAAiBvD,OAKlCW,EAAAvY,UAAAwb,sBAAA,SAAsBtZ,GAAtB,IAAAe,EAAA5C,KACI,OAAQA,KAAKgC,MAAMgC,OACdkE,QAAO,SAACf,GAAU,OAAAA,EAAMtF,QAAUA,KAClC+R,MACG,SAACzM,GACG,OAAAA,EACKrE,mBACA8Q,MACG,SAACxJ,GACG,OAACzC,EAAUC,mBACP/F,EACAsF,EAAMvF,MAAMO,IACZgF,EAAMvF,MAAMQ,IACZgI,EAAKjI,IACLiI,EAAKhI,IACLQ,EAAKZ,WAGrBmF,EACKjE,sBACA0Q,MACG,SAAC+H,GACG,OAAChU,EAAUC,mBACP/F,EACAsF,EAAMvF,MAAMO,IACZgF,EAAMvF,MAAMQ,IACZuZ,EAAQxZ,IACRwZ,EAAQvZ,IACRQ,EAAKZ,cAMrCkW,EAAAvY,UAAA0Z,iBAAA,WACIrZ,KAAKoY,WAAY,EACjBpY,KAAKgC,MAAMoS,iBAAmB,GAC9BpU,KAAKgC,MAAMyW,YAAc,KACzBzY,KAAKgC,MAAMmS,cAAgB,IAM/B+D,EAAAvY,UAAAga,WAAA,SAAWL,GAEFtZ,KAAKuV,UAAN,MACA+D,IAMJtZ,KAAKgC,MAAM6E,mBAAqByS,EAAazX,QAAUJ,EAAM2B,QAGjE8U,EAAAvY,UAAAqa,gBAAA,SAAgBV,GACZ,GAAIA,GAAgBA,EAAa1X,OACR5B,KAAKgC,MAAMoS,iBAAiBlN,MAC7C,SAACyU,GACG,OAAAA,EAAQvZ,MAAQkX,EAAa1X,MAAMQ,KACnCuZ,EAAQxZ,MAAQmX,EAAa1X,MAAMO,OAIvC,OAAO,EAGf,OACImX,IACEtZ,KAAK4b,eAAiBtC,EAAazX,QAAUJ,EAAM2B,OAChDpD,KAAK6b,cAAgBvC,EAAazX,QAAUJ,EAAM4B,QAI/D6U,EAAAvY,UAAA2a,aAAA,SACIjO,EACAC,EACAwP,EACA3O,EACAC,EACAR,EACAF,GAEA,IAAMqP,EAAUxP,EAAWQ,gBACvB/M,KAAKsV,eACLtV,KAAKiN,cACLZ,EACAC,EACAwP,EACA3O,EACAC,EACAR,EACAF,GAGJ,GAAI1M,KAAKkX,UAAU7U,QAAQ0Z,GAAU,CACjC,IAAM3I,EAAS,IAAI6D,EACnB7D,EAAO8D,UAAY6E,EACd/b,KAAKwV,aAAa9B,eAAeN,GAGlCpT,KAAKwV,aAAanC,aAAaD,GAF/BpT,KAAKwV,aAAarC,UAAUC,OAI7B,CACH,IAAMI,EAAQ,IAAIsD,EAClBtD,EAAMuD,MAAQ/W,KAAKkX,UACnB1D,EAAMwD,IAAM+E,EAEP/b,KAAKwV,aAAa3B,cAAcL,GAGjCxT,KAAKwV,aAAa/B,YAAYD,GAF9BxT,KAAKwV,aAAajC,SAASC,KAOvC0E,EAAAvY,UAAAib,sBAAA,WACS5a,KAAKgC,MAAM6E,sBACV7G,KAAKgC,MAAMga,eAIrB9D,EAAAvY,UAAAsc,SAAA,SACIxE,EACAC,EACA9O,GAEA,GAAI5I,KAAKuV,UAAY3M,GAAU6O,EAAiB,GAAKC,EAAa,EAAG,CACjE,IAAI3O,EAAUpB,EAAUgB,uBACpBC,EACA5I,KAAKgC,MAAMuC,UAEX2X,EAAWlc,KAAKgC,MAAM8W,gBACtB/P,EAAQzB,MACRyB,EAAQ1B,OAER6U,IACAlc,KAAKgC,MAAMgC,OAAShE,KAAKgC,MAAMgC,OAAOkE,QAAO,SAAAhH,GAAK,OAAAA,IAAMgb,MAE5D,IAAIC,EAAe3E,EAAatX,OAC5B6I,EACA0O,EACAC,EACA1X,KAAKgC,OAEThC,KAAKkZ,YACLlZ,KAAKgC,MAAMgC,OAAO5C,KAAK+a,GACvBnc,KAAK8a,uBAzmBjB,CAAkC5F,GChBlCkH,GAAA,WAoBI,SAAAA,IAnBApc,KAAAgC,MAAoB,GACpBhC,KAAAgE,OAAkB,GAElBhE,KAAAwE,eAAwB,KACxBxE,KAAAyE,eAAwB,KACxBzE,KAAAmZ,YAAqB,KACrBnZ,KAAAoZ,aAAsB,KAItBpZ,KAAAoU,iBAA0B,GAC1BpU,KAAAmU,cAAyB,GAGzBnU,KAAA6G,oBAAqB,EACrB7G,KAAAuE,UAAW,EACXvE,KAAAgc,cAAgB,EAIZ,IAAK,IAAIvb,EAAI,EAAGA,EAAI,IAAKA,EAAG,CACxBT,KAAKgC,MAAMvB,GAAK,GAChB,IAAK,IAAIwC,EAAI,EAAGA,EAAI,IAAKA,EACrBjD,KAAKgC,MAAMvB,GAAGwC,GAAK,UAK/BmZ,EAAAzc,UAAA0c,oBAAA,SAAoBla,EAAaC,GAC7B,OAAOpC,KAAKmU,cAAcP,MAAK,SAACxJ,GAAS,OAAAA,EAAKjI,MAAQA,GAAOiI,EAAKhI,MAAQA,MAG9Ega,EAAAzc,UAAA2c,uBAAA,SAAuBna,EAAaC,GAChC,OAAOpC,KAAKoU,iBAAiBR,MAAK,SAAC+H,GAAY,OAAAA,EAAQxZ,MAAQA,GAAOwZ,EAAQvZ,MAAQA,MAG1Fga,EAAAzc,UAAA4c,iBAAA,SAAiB9b,EAAWwC,GACxB,OAAOjD,KAAKmZ,aAAenZ,KAAKmZ,YAAYhX,MAAQ1B,GAAKT,KAAKmZ,YAAY/W,MAAQa,GAGtFmZ,EAAAzc,UAAA6c,eAAA,SAAe/b,EAAWwC,GACtB,OAAOjD,KAAKoZ,cAAgBpZ,KAAKoZ,aAAajX,MAAQ1B,GAAKT,KAAKoZ,aAAahX,MAAQa,GAGzFmZ,EAAAzc,UAAA8c,iBAAA,SAAiBhc,EAAWwC,GACxB,OAAOjD,KAAKyY,aAAezY,KAAKyY,YAAY7W,MAAMO,MAAQ1B,GAAKT,KAAKyY,YAAY7W,MAAMQ,MAAQa,GAGlGmZ,EAAAzc,UAAAqZ,uBAAA,SAAuBpX,GACnB,OAAO5B,KAAKmU,cAAcP,MAAK,SAACxJ,GAAS,OAAAA,EAAKjI,MAAQP,EAAMO,KAAOiI,EAAKhI,MAAQR,EAAMQ,QAG1Fga,EAAAzc,UAAAsZ,0BAAA,SAA0BrX,GACtB,OAAO5B,KAAKoU,iBAAiBR,MAAK,SAAC+H,GAAY,OAAAA,EAAQxZ,MAAQP,EAAMO,KAAOwZ,EAAQvZ,MAAQR,EAAMQ,QAGtGga,EAAAzc,UAAAqK,MAAA,WACIhK,KAAKoZ,aAAe,KACpBpZ,KAAKmZ,YAAc,KACnBnZ,KAAKkb,kBAAmB,EACxBlb,KAAKib,kBAAmB,EACxBjb,KAAKoU,iBAAmB,GACxBpU,KAAKmU,cAAgB,GACrBnU,KAAKyY,YAAc,KACnBzY,KAAKuE,UAAW,EAChBvE,KAAK6G,oBAAqB,EAC1B7G,KAAKwE,eAAiB,KACtBxE,KAAKyE,eAAiB,KACtBzE,KAAKgc,cAAgB,EACrBhc,KAAK8J,gBAGLsS,EAAAzc,UAAA+J,QAAA,WAAA,IAAA9G,EAAA5C,KACAA,KAAKuE,UAAYvE,KAAKuE,SACtBvE,KAAKyY,YAAc,KACnBzY,KAAKmU,cAAgB,GACrBnU,KAAKoU,iBAAmB,GAExBpU,KAAKgE,OAAO0Y,SAAQ,SAACvV,GAAiB,OAAAvE,EAAK+Z,aAAaxV,EAAMvF,UAE9D5B,KAAK2c,aAAa3c,KAAKmZ,aACvBnZ,KAAK2c,aAAa3c,KAAKoZ,cAEnBpZ,KAAKwE,gBAAkBxE,KAAKyE,gBAC5BzE,KAAK2c,aAAa3c,KAAKwE,iBAI/B4X,EAAAzc,UAAA8C,MAAA,WACI,OAAOma,EAAAA,UAAU5c,OAGrBoc,EAAAzc,UAAAwD,oBAAA,SAAoBhB,EAAaC,EAAaya,GAC1C,QAAI1a,EAAM,GAAKA,EAAM,GAAKC,EAAM,GAAKA,EAAM,IAGpCpC,KAAKgE,OAAO4P,MACf,SAACzM,GAAU,OAAAA,EAAMvF,MAAMQ,MAAQA,GAAO+E,EAAMvF,MAAMO,MAAQA,GAAOgF,EAAMtF,QAAUgb,MAIzFT,EAAAzc,UAAAqD,aAAA,SAAab,EAAaC,GACtB,QAAID,EAAM,GAAKA,EAAM,GAAKC,EAAM,GAAKA,EAAM,KAGnCpC,KAAKgE,OAAO4P,MAAK,SAACzM,GAAU,OAAAA,EAAMvF,MAAMQ,MAAQA,GAAO+E,EAAMvF,MAAMO,MAAQA,MAGvFia,EAAAzc,UAAAkE,mBAAA,SAAmB1B,EAAaC,EAAaP,GACzC,OAAO7B,KAAKgE,OACPkE,QAAO,SAACf,GAAU,OAAAA,EAAMtF,QAAUA,KAClC+R,MAAK,SAACzM,GAAU,OAAAA,EAAM7D,mBAAmBsQ,MAAK,SAACkJ,GAAU,OAAAA,EAAM1a,MAAQA,GAAO0a,EAAM3a,MAAQA,SAGrGia,EAAAzc,UAAA4D,gBAAA,SAAgBpB,EAAaC,GACzB,IAAIpC,KAAKgD,aAAab,EAAKC,GAK3B,OAAOpC,KAAKgE,OAAOkD,MAAK,SAACC,GAAU,OAAAA,EAAMvF,MAAMQ,MAAQA,GAAO+E,EAAMvF,MAAMO,MAAQA,MAGtFia,EAAAzc,UAAAoE,cAAA,SAAclC,EAAcmC,GACxB,IAAM+Y,EAAO/Y,EAAOkD,MAAK,SAACC,GAAU,OAAAA,EAAMtF,QAAUA,GAASsF,aAAiB3D,KAE9E,QAAIuZ,GACO/Y,EAAO4P,MACV,SAACzM,GACG,OAAAA,EACKjE,sBACA0Q,MAAK,SAAChS,GAAU,OAAAA,EAAMQ,MAAQ2a,EAAKnb,MAAMQ,KAAOR,EAAMO,MAAQ4a,EAAKnb,MAAMO,QAC9EgF,EAAMtF,QAAUA,MAMhCua,EAAAzc,UAAAqd,eAAA,SAAenb,GACX,OAAO7B,KAAKgE,OAAOkD,MAAK,SAACC,GAAU,OAAAA,aAAiB3D,GAAQ2D,EAAMtF,QAAUA,MAGhFua,EAAAzc,UAAAsd,mBAAA,SAAmBpb,GACf,IAAMkb,EAAO/c,KAAKgd,eAAenb,GAEjC,IAAKkb,GAAQA,EAAKla,eACd,MAAO,GAGX,IAAImD,EAAM,GACJ/B,EAAWjE,KAAKuD,gBAAgBwZ,EAAKnb,MAAMO,IAAK,GAChDgC,EAAYnE,KAAKuD,gBAAgBwZ,EAAKnb,MAAMO,IAAK,GAevD,OAbIgC,aAAqBzB,GAAQyB,EAAUtC,QAAUA,IAC5CsC,EAAUtB,iBACXmD,GAAOhG,KAAKuE,SAAW,IAAM,MAIjCN,aAAoBvB,GAAQuB,EAASpC,QAAUA,IAC1CoC,EAASpB,iBACVmD,GAAOhG,KAAKuE,SAAW,IAAM,MAIrCyB,EAAMA,EAAIE,MAAM,IAAIgX,OAAOC,KAAK,IACzBtb,IAAUJ,EAAM4B,MAAQ2C,EAAMA,EAAIoX,eAG7ChB,EAAAzc,UAAA0d,sBAAA,WACI,OAAIrd,KAAKwE,eACDxE,KAAKuE,SACEkE,OAAOC,aAAa,IAAM1I,KAAKwE,eAAepC,MAAQpC,KAAKwE,eAAerC,IAAM,GAEhFsG,OAAOC,aAAa,GAAK1I,KAAKwE,eAAepC,MAAQsC,KAAKC,IAAI3E,KAAKwE,eAAerC,IAAM,GAAK,GAGjG,KAIfia,EAAAzc,UAAAmK,aAAA,WAEI,IADA,IAAI9D,EAAM,cACDvF,GAEL,IADA,IAAI6c,EAAc,aACTra,GACL,IAAMsa,EAAahT,EAAKvG,OAAOkD,MAAK,SAACC,GAAU,OAAAA,EAAMvF,MAAMQ,MAAQa,GAAKkE,EAAMvF,MAAMO,MAAQ1B,KACxF8c,GACID,EAAc,IACdtX,GAAOsX,EACPA,EAAc,GAGdC,aAAsB7a,EACtBsD,GAAOuX,EAAW1b,QAAUJ,EAAM4B,MAAQ,IAAM,IAE5Cka,aAAsBlZ,EACtB2B,GAAOuX,EAAW1b,QAAUJ,EAAM4B,MAAQ,IAAM,IAE5Cka,aAAsBnZ,EACtB4B,GAAOuX,EAAW1b,QAAUJ,EAAM4B,MAAQ,IAAM,IAE5Cka,aAAsB3Y,EACtBoB,GAAOuX,EAAW1b,QAAUJ,EAAM4B,MAAQ,IAAM,IAE5Cka,aAAsB/Z,EACtBwC,GAAOuX,EAAW1b,QAAUJ,EAAM4B,MAAQ,IAAM,IAE5Cka,aAAsBjZ,IACtB0B,GAAOuX,EAAW1b,QAAUJ,EAAM4B,MAAQ,IAAM,QAQtEia,GAhCDra,EAAI,EAAGA,EAAI,IAAKA,IAAhBA,GAoCLqa,EAAc,IACdtX,GAAOsX,GAGXtX,GAAO,YA1CFvF,EAAI,EAAGA,EAAI,IAAKA,IAAhBA,GA6CTuF,EAAMA,EAAIwX,OAAO,EAAGxX,EAAItF,OAAS,GAE7BV,KAAKuE,WACLyB,EAAMA,EAAIE,MAAM,IAAIwD,UAAUyT,KAAK,KAGvCnX,GAAO,KAAOhG,KAAK6G,mBAAqB,IAAM,KAC9C,IAEI4W,EAFmBzd,KAAKid,mBAAmBxb,EAAM2B,OAC9BpD,KAAKid,mBAAmBxb,EAAM4B,OAEhDoa,IACDA,EAAoB,KAGxBzX,GAAO,IAAMyX,EACbzX,GAAO,IAAMhG,KAAKqd,wBAClBrX,GAAO,KACPA,GAAO,IAAMhG,KAAKgc,cAClBhc,KAAKgG,IAAMA,GAGfoW,EAAAzc,UAAA+d,qBAAA,SAAqBjd,EAAWwC,GAC5B,OAAO,GAGHmZ,EAAAzc,UAAAgd,aAAA,SAAa/a,GACbA,IACAA,EAAMO,IAAMuC,KAAKC,IAAI/C,EAAMO,IAAM,GACjCP,EAAMQ,IAAMsC,KAAKC,IAAI/C,EAAMQ,IAAM,KAIlCga,EAAAzc,UAAAmZ,gBAAA,SAAgB3W,EAAaC,GAGhC,OAFAD,EAAMuC,KAAKoI,MAAM3K,GACjBC,EAAMsC,KAAKoI,MAAM1K,GACVpC,KAAKgE,OAAOkD,MACf,SAACC,GAAU,OAAAA,EAAMvF,MAAMQ,MAAQA,GAAO+E,EAAMvF,MAAMO,MAAQA,MAI3Dia,EAAAzc,UAAA+a,0BAAA,SAA0BF,GAA1B,IAAA5X,EAAA5C,KACCwa,EAASnY,QAAQrC,KAAKwE,kBACtBxE,KAAKgE,OAAShE,KAAKgE,OAAOkE,QACtB,SAACf,GAAU,OAAAA,IAAUvE,EAAK6B,kBAE9BzE,KAAKwE,eAAiB,KACtBxE,KAAKyE,eAAiB,OAIvB2X,EAAAzc,UAAAgb,uBAAA,SAAuBxT,EAAaqT,GACnC9V,KAAKC,IAAIwC,EAAMvF,MAAMO,IAAMqY,EAASrY,KAAO,GAC3CnC,KAAKyE,eAAiB0C,EACtBnH,KAAKwE,eAAiB,IAAItC,GACrBiF,EAAMvF,MAAMO,IAAMqY,EAASrY,KAAO,EACnCgF,EAAMvF,MAAMQ,OAGhBpC,KAAKwE,eAAiB,KACtBxE,KAAKyE,eAAiB,OAI9B2X,EAAAzc,UAAAge,cAAA,SAAcxW,GACV,GAAIA,aAAiB3D,EACjB,OAAO2D,EAAMtF,QAAUJ,EAAM2B,MACvBpD,KAAKkb,iBACLlb,KAAKib,kBAInBmB,EAAAzc,UAAAie,sBAAA,WACI,OAAO5d,KAAK6G,mBAAqBpF,EAAM2B,MAAQ3B,EAAM4B,SA7S7D,iBCRA,SAAAwa,IAIY7d,KAAA8d,0BAA4B,IAAIC,EAAAA,QAExC/d,KAAAge,uBAAyBhe,KAAK8d,0BAA0B/K,sBAExD8K,EAAAle,UAAAqK,MAAA,WACIhK,KAAK8d,0BAA0Bnd,gIATtCsd,EAAAA,WAAUC,KAAA,CAAC,CACRC,WAAY,6BCqEZ,SAAAC,EAAoBC,GAAAre,KAAAqe,qBAAAA,EA/BXre,KAAAse,cAAgBzP,EAAUC,wBAC1B9O,KAAAue,eAAyB1P,EAAUE,yBACnC/O,KAAAwe,YAAa,EACbxe,KAAAye,iBAA2B5P,EAAUM,2BACrCnP,KAAA0e,sBAAgC7P,EAAUO,gCAC1CpP,KAAA2e,qBAA+B9P,EAAUQ,+BACzCrP,KAAA4e,cAAe,EACf5e,KAAA6e,gBAAiB,EACjB7e,KAAA8e,iBAAkB,EAClB9e,KAAA+e,sBAAuB,EAItB/e,KAAAmY,WAAa,IAAI6G,EAAAA,aACjBhf,KAAA2U,UAAY,IAAIqK,EAAAA,aAChBhf,KAAA6N,UAAY,IAAImR,EAAAA,aAQ1Bhf,KAAAif,UAAW,EAGXjf,KAAAkf,YAAa,EACblf,KAAAmf,gBAAkB,GAKdnf,KAAK+F,aAAe,IAAImS,GACpB,IAAIkE,GACJpc,KAAKmY,mBAIb7Y,OAAAoI,eACW0W,EAAAze,UAAA,OAAI,KADf,SACgByf,GAERA,GACAA,GAAQvQ,EAAUI,gBAClBmQ,GAAQvQ,EAAUK,eAElBlP,KAAK+F,aAAauP,eAAiB8J,EAEnCpf,KAAK+F,aAAauP,eAAiBzG,EAAUG,aAEjDhP,KAAK+F,aAAayP,aAAa7G,QAC/B3O,KAAKqf,sDAGT/f,OAAAoI,eACW0W,EAAAze,UAAA,WAAQ,KADnB,SACoB4V,GAChBvV,KAAK+F,aAAawP,SAAWA,mCAGjCjW,OAAAoI,eACW0W,EAAAze,UAAA,eAAY,KADvB,SACwB0a,GACpBra,KAAK+F,aAAasU,aAAeA,mCAGrC/a,OAAAoI,eACW0W,EAAAze,UAAA,eAAY,KADvB,SACwBya,GACpBpa,KAAK+F,aAAaqU,aAAeA,mCAGrC9a,OAAAoI,eACW0W,EAAAze,UAAA,aAAU,KADrB,SACsB2f,GAClBtf,KAAK+F,aAAa0P,iBAAiB5F,eAAiByP,mCAGxDhgB,OAAAoI,eACW0W,EAAAze,UAAA,gBAAa,KADxB,SACyBic,GACrB5b,KAAK+F,aAAa6V,cAAgBA,mCAGtCtc,OAAAoI,eACW0W,EAAAze,UAAA,eAAY,KADvB,SACwBkc,GACpB7b,KAAK+F,aAAa8V,aAAeA,mCAIrCuC,EAAAze,UAAA4f,aAAA,SAAa9S,GACTA,EAAM+S,kBAGVpB,EAAAze,UAAA8f,YAAA,SAAYC,IAEHA,EAAQ9D,eACL5b,KAAK4b,eACL5b,KAAK+F,aAAa/D,MAAM6E,oBAC3B6Y,EAAQ7D,cACL7b,KAAK6b,eACJ7b,KAAK+F,aAAa/D,MAAM6E,sBAE7B7G,KAAK+F,aAAa/D,MAAMoS,iBAAmB,GAC3CpU,KAAK+F,aAAa/D,MAAMmS,cAAgB,KAIhDiK,EAAAze,UAAAggB,SAAA,WAAA,IAAA/c,EAAA5C,KACIA,KAAKqe,qBAAqBL,uBAAuB4B,WAAU,WACvDhd,EAAKmD,aAAaiE,YAK1BoU,EAAAze,UAAAkgB,gBAAA,WACI7f,KAAK+F,aAAa0V,MAAQzb,KAAKyb,MAC/Bzb,KAAKqf,sBAGTjB,EAAAze,UAAAwa,UAAA,SAAU1N,GACNzM,KAAK+F,aAAaoU,UACd1N,EACAzM,KAAKwM,cAAcC,GACnBzM,KAAK8f,SAASC,cAAcC,wBAAwBpT,KACpD5M,KAAK8f,SAASC,cAAcC,wBAAwBtT,MAI5D0R,EAAAze,UAAA+J,QAAA,WACI1J,KAAKif,UAAW,EAChBjf,KAAK+F,aAAa/D,MAAM0H,UACxB1J,KAAK+F,aAAa6C,OAAOc,WAG7B0U,EAAAze,UAAAsgB,YAAA,SAAYje,GACRhC,KAAK+F,aAAa/D,MAAQA,EAC1BhC,KAAKqY,YAAYjC,gBAAgBpW,KAAK+F,cACtC/F,KAAK+F,aAAa/D,MAAMoS,iBAAmB,GAC3CpU,KAAK+F,aAAa/D,MAAMmS,cAAgB,IAG5CiK,EAAAze,UAAAugB,OAAA,SAAOla,GACH,IACIhG,KAAK+F,aAAasS,YAAYhC,qBAC1BvK,EAAyBC,aAAarK,EAAauK,MAEvDjM,KAAK+F,aAAasS,YAAYnC,QAAQlQ,GACtChG,KAAK+F,aAAa/D,MAAMoS,iBAAmB,GAC3CpU,KAAK+F,aAAa/D,MAAMmS,cAAgB,GACxCnU,KAAK+F,aAAa6C,OAAOoB,QAC3B,MAAOmW,GACLngB,KAAK+F,aAAasS,YAAYpC,cAItCmI,EAAAze,UAAAygB,OAAA,SAAOlM,GACH,IACIlU,KAAK+F,aAAasP,aAAarL,QAC/BhK,KAAK+F,aAAasS,YAAYhC,qBAC1BvK,EAAyBC,aAAarK,EAAawK,MAEvDlM,KAAK+F,aAAasS,YAAYlC,QAAQjC,GACtClU,KAAK+F,aAAa/D,MAAMoS,iBAAmB,GAC3CpU,KAAK+F,aAAa/D,MAAMmS,cAAgB,GACxCnU,KAAK+F,aAAa6C,OAAOoB,QAC3B,MAAOmW,GACLE,QAAQC,IAAIH,GACZngB,KAAK+F,aAAasS,YAAYpC,cAItCmI,EAAAze,UAAA4gB,OAAA,WACI,OAAOvgB,KAAK+F,aAAa/D,MAAMgE,KAGnCoY,EAAAze,UAAAyR,UAAA,SAAU3E,GACNzM,KAAKkf,YAAa,EAClBlf,KAAK+F,aAAaqP,gBAAgBvP,QAC9B4G,EACAzM,KAAK+F,aAAa8T,SAClB7Z,KAAKmf,kBAIbf,EAAAze,UAAA6gB,UAAA,SAAU/T,GACNzM,KAAKkf,YAAa,EAClB,IAAIuB,EAAQhU,EAAM8E,OAAOE,iBAAiBC,MAAMC,UAAUzL,MAAM,MAEhElG,KAAKmf,gBAAmC,IAAjBsB,EAAM/f,OAAe+f,EAAM,GAAKA,EAAM,GAC7DzgB,KAAK+F,aAAaoP,kBAAkBtP,QAAQ4G,IAGhD2R,EAAAze,UAAAia,YAAA,SAAYnN,GACRzM,KAAK+F,aAAa6T,YAAYnN,EAAOzM,KAAKwM,cAAcC,GACpDzM,KAAK8f,SAASC,cAAcC,wBAAwBpT,KACpD5M,KAAK8f,SAASC,cAAcC,wBAAwBtT,MAI5D0R,EAAAze,UAAA6M,cAAA,SAAcC,GACV,OAAOF,EAAWC,cACdC,EACAzM,KAAK8f,SAASC,cAAcC,wBAAwBtT,IACpD1M,KAAK8f,SAASC,cAAcC,wBAAwBrT,OACpD3M,KAAK8f,SAASC,cAAcC,wBAAwBpT,KACpD5M,KAAK8f,SAASC,cAAcC,wBAAwBnT,QAIpDuR,EAAAze,UAAA0f,mBAAA,WACJrf,KAAK0gB,UAAY1gB,KAAK+F,aAAauP,eAAiB,GAIxD8I,EAAAze,UAAAghB,oBAAA,SAAoBxZ,GAChB,OAAOyZ,KAAKC,MACR,gCAA+B7gB,KAAK+F,aAAa0P,iBAAiB3F,aAC9D3I,GACH,UAITiX,EAAAze,UAAAyK,KAAA,SAAKxB,GACD5I,KAAK+F,aAAaqE,KAAKxB,IAG3BwV,EAAAze,UAAAmW,eAAA,WACI,OAAO9V,KAAK+F,aAAa+P,kBAG7BsI,EAAAze,UAAAqK,MAAA,WACIhK,KAAK+F,aAAaiE,SAGtBoU,EAAAze,UAAA4Y,KAAA,WACIvY,KAAK+F,aAAawS,QAGtB6F,EAAAze,UAAAsc,SAAA,SACIxE,EACAC,EACA9O,GAEA5I,KAAK+F,aAAakW,SAASxE,EAAgBC,EAAY9O,IAG3DwV,EAAAze,UAAA8U,OAAA,WACI,OAAOzU,KAAK+F,aAAasP,aAAaZ,UAG1C2J,EAAAze,UAAAmhB,UAAA,SAAUC,GACN,IAAI1U,EAAK0U,EAAOC,gBAAgB3U,EAAI0U,EAAOxP,OAAOE,iBAAiBwP,cAAcjB,wBAAwBpT,KAAS5M,KAAK0gB,UAAY,EAC/HpU,EAAKyU,EAAOC,gBAAgB1U,EAAIyU,EAAOxP,OAAOE,iBAAiBwP,cAAcjB,wBAAwBtT,IAAQ1M,KAAK0gB,UAAY,EAClIK,EAAOxP,OAAOE,iBAAiBC,MAAMC,UAAY,eAAiBtF,EAAI,SAC1D,WAGhB+R,EAAAze,UAAAuhB,uBAAA,SAAuBzgB,EAAGwC,GACtB,IAAIpB,GAAUpB,EAAIwC,GAAK,GAAM,EAAKjD,KAAKue,eAAiBve,KAAKse,cAY7D,OAVIte,KAAK4e,eACD5e,KAAK+F,aAAa/D,MAAMua,iBAAiB9b,EAAGwC,KAC5CpB,EAAQ7B,KAAKye,kBAGbze,KAAK+F,aAAa/D,MAAMwa,eAAe/b,EAAGwC,KAC1CpB,EAAQ7B,KAAK0e,wBAId7c,6BAjRdsf,EAAAA,UAASjD,KAAA,CAAC,CACPkD,SAAU,kBACVC,SAAA,spNATKxD,8CAeJyD,EAAAA,8BACAA,EAAAA,0BACAA,EAAAA,gCACAA,EAAAA,qCACAA,EAAAA,oCACAA,EAAAA,4BACAA,EAAAA,8BACAA,EAAAA,+BACAA,EAAAA,oCACAA,EAAAA,0BAIAC,EAAAA,0BACAA,EAAAA,0BACAA,EAAAA,yBAEAC,EAAAA,UAAStD,KAAA,CAAC,2BAEVsD,EAAAA,UAAStD,KAAA,CAAC,uBAmBVoD,EAAAA,MAAKpD,KAAA,CAAC,0BAeNoD,EAAAA,MAAKpD,KAAA,CAAC,kCAKNoD,EAAAA,MAAKpD,KAAA,CAAC,sCAKNoD,EAAAA,MAAKpD,KAAA,CAAC,oCAKNoD,EAAAA,MAAKpD,KAAA,CAAC,qCAKNoD,EAAAA,MAAKpD,KAAA,CAAC,uCAKNoD,EAAAA,MAAKpD,KAAA,CAAC,sCAKNuD,EAAAA,aAAYvD,KAAA,CAAC,cAAe,CAAC,gCC1HlC,SAAAwD,IAaI1hB,KAAA6B,MAAQ,QAER7B,KAAA2hB,QAAS,SAGTD,EAAA/hB,UAAA+b,KAAA,SAAKkG,GACD5hB,KAAK2hB,QAAS,EACd3hB,KAAK6hB,gBAAkBD,EACvB5hB,KAAKyb,MAAMsE,cAAcrO,MAAMoQ,QAAU,SAG7CJ,EAAA/hB,UAAAoiB,gBAAA,SAAgBxK,GACZvX,KAAKyb,MAAMsE,cAAcrO,MAAMoQ,QAAU,OACzC9hB,KAAK2hB,QAAS,EACd3hB,KAAK6hB,gBAAgBtK,IAGzBmK,EAAA/hB,UAAAmQ,aAAA,SAAa3I,GACT,IAAI6a,EAAe,GACnB,OAAQ7a,EAAM8a,eACV,IAAK,QACDD,EAA8B,UAAfhiB,KAAK6B,MAAoB7B,KAAK6P,eAAeK,cAAgBlQ,KAAK6P,eAAeM,cAChG,MACJ,IAAK,OACD6R,EAA8B,UAAfhiB,KAAK6B,MAAoB7B,KAAK6P,eAAeO,aAAepQ,KAAK6P,eAAeQ,aAC/F,MACJ,IAAK,SACD2R,EAA8B,UAAfhiB,KAAK6B,MAAoB7B,KAAK6P,eAAeS,eAAiBtQ,KAAK6P,eAAeU,eACjG,MACJ,IAAK,SACDyR,EAA8B,UAAfhiB,KAAK6B,MAAoB7B,KAAK6P,eAAeW,eAAiBxQ,KAAK6P,eAAeY,eAIzG,OAAOuR,6BA/Cdb,EAAAA,UAASjD,KAAA,CAAC,CACPkD,SAAU,4BACVC,SAAA,wmEAKCG,EAAAA,UAAStD,KAAA,CAAC,UAAW,CAACgE,QAAQ,4BAE9BZ,EAAAA,qBAGAA,EAAAA,2BCHL,SAAAa,YACWA,EAAAC,QAAP,WACI,MAAO,CACHC,SAAUF,EACVG,UAAW,CAACzE,gCATvB0E,EAAAA,SAAQrE,KAAA,CAAC,CACNsE,aAAc,CAACpE,GAAwBsD,IACvCe,QAAS,CAACC,EAAAA,aAAcC,EAAAA,gBACxBC,QAAS,CAACxE","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export enum Color {\r\n    WHITE,\r\n    BLACK,\r\n}\r\n","import { AbstractPiece } from '../../engine/piece-decorator/abstract-piece';\r\nimport { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { Point } from './point';\r\n\r\nexport abstract class Piece implements AbstractPiece {\r\n    point: Point;\r\n    color: Color;\r\n    constant: PieceConstant;\r\n    checkPoints: Point[] = [];\r\n    relValue: number;\r\n    board: Board;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        relValue: number,\r\n        board: Board\r\n    ) {\r\n        this.color = color;\r\n        this.constant = constant;\r\n        this.point = point;\r\n        this.relValue = relValue;\r\n        this.board = board;\r\n    }\r\n\r\n    abstract getPossibleMoves(): Point[];\r\n\r\n    abstract getPossibleCaptures(): Point[];\r\n\r\n    abstract getCoveredFields(): Point[]; // zwraca liste punktow ktore sa puste lub istnieje na nich pionek tego samego koloru\r\n}\r\n","import { NotationProcessor } from './notation-processor';\r\nimport {\r\n    DefaultFenProcessor,\r\n} from './fen-loader/default-fen-processor';\r\nimport { DefaultPgnProcessor } from './pgn-loader/default-pgn-processor';\r\n\r\nexport class NotationProcessorFactory {\r\n\r\n    static getProcessor(type: NotationType): NotationProcessor {\r\n        switch (type) {\r\n            case NotationType.FEN:\r\n                return new DefaultFenProcessor();\r\n\r\n            case NotationType.PGN:\r\n                return new DefaultPgnProcessor();\r\n\r\n        }\r\n    }\r\n\r\n    static getDefaultProcessor(): NotationProcessor {\r\n        return new DefaultFenProcessor();\r\n    }\r\n\r\n}\r\n\r\nexport enum NotationType {\r\n    FEN = 1,\r\n    PGN = 2\r\n}\r\n","export class Point {\n    row: number;\n    col: number;\n\n    constructor(row: number, col: number) {\n        this.row = row;\n        this.col = col;\n    }\n\n    isEqual(that: Point) {\n        return that && this.row === that.row && this.col === that.col;\n    }\n\n    hasCoordsEqual(row: number, col: number) {\n        return row && col && this.row === row && this.col === col;\n    }\n\n    isInRange(): boolean {\n        return this.row >= 0 && this.row <= 7 && this.col >= 0 && this.col <= 7;\n    }\n\n    clone() {\n        return new Point(this.row, this.col);\n    }\n}\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { King } from './king';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Rook extends Piece {\r\n    isMovedAlready = false;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 5, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    col,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    col,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\nimport { Rook } from './rook';\r\n\r\nexport class King extends Piece {\r\n    castledAlready = false;\r\n    shortCastled = false;\r\n    longCastled = false;\r\n    isMovedAlready;\r\n    isCastling = false;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 0, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        // lewo\r\n        if (\r\n            this.board.isFieldEmpty(row, col - 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row, col - 1));\r\n        }\r\n\r\n        // prawo\r\n        if (\r\n            this.board.isFieldEmpty(row, col + 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row, col + 1));\r\n        }\r\n\r\n        // dol\r\n        if (\r\n            this.board.isFieldEmpty(row + 1, col) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col));\r\n        }\r\n\r\n        // gora\r\n        if (\r\n            this.board.isFieldEmpty(row - 1, col) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col));\r\n        }\r\n\r\n        // lewo gora\r\n        if (\r\n            this.board.isFieldEmpty(row - 1, col - 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col - 1));\r\n        }\r\n        // prawo gora\r\n        if (\r\n            this.board.isFieldEmpty(row - 1, col + 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col + 1));\r\n        }\r\n\r\n        // lewo dol\r\n        if (\r\n            this.board.isFieldEmpty(row + 1, col - 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col - 1));\r\n        }\r\n        // prawo dol\r\n        if (\r\n            this.board.isFieldEmpty(row + 1, col + 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col + 1));\r\n        }\r\n\r\n        if (!this.isMovedAlready) {\r\n            let longCastlePossible = true;\r\n            for (let i = col - 1; i > 0; --i) {\r\n                if (\r\n                    !this.board.isFieldEmpty(row, i) ||\r\n                    this.board.isFieldUnderAttack(\r\n                        row,\r\n                        i,\r\n                        this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                    )\r\n                ) {\r\n                    longCastlePossible = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (longCastlePossible && !this.board.isKingInCheck(\r\n                this.color,\r\n                this.board.pieces\r\n            ) && this.board.getPieceByField(row, 0)) {\r\n                const leftRook = this.board.getPieceByField(row, 0);\r\n                if (leftRook instanceof Rook) {\r\n                    if (!leftRook.isMovedAlready) {\r\n                        possiblePoints.push(new Point(row, col - 2));\r\n                    }\r\n                }\r\n            }\r\n\r\n            let shortCastlePossible = true;\r\n            for (let i = col + 1; i < 7; ++i) {\r\n                if (\r\n                    !this.board.isFieldEmpty(row, i) ||\r\n                    this.board.isFieldUnderAttack(\r\n                        row,\r\n                        i,\r\n                        this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                    )\r\n                ) {\r\n                    shortCastlePossible = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (shortCastlePossible && !this.board.isKingInCheck(\r\n                this.color,\r\n                this.board.pieces\r\n            ) && this.board.getPieceByField(row, 7)) {\r\n                const rightRook = this.board.getPieceByField(row, 7);\r\n                if (rightRook instanceof Rook) {\r\n                    if (!rightRook.isMovedAlready) {\r\n                        possiblePoints.push(new Point(row, col + 2));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // lewo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row, col - 1));\r\n        }\r\n\r\n        // prawo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row, col + 1));\r\n        }\r\n\r\n        // dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col));\r\n        }\r\n\r\n        // gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col));\r\n        }\r\n\r\n        // lewo gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col - 1));\r\n        }\r\n        // prawo gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col + 1));\r\n        }\r\n\r\n        // lewo dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col - 1));\r\n        }\r\n        // prawo dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col + 1));\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // lewo\r\n        possiblePoints.push(new Point(row, col - 1));\r\n\r\n        // prawo\r\n        possiblePoints.push(new Point(row, col + 1));\r\n\r\n        // dol\r\n        possiblePoints.push(new Point(row + 1, col));\r\n\r\n        // gora\r\n        possiblePoints.push(new Point(row - 1, col));\r\n\r\n        // lewo gora\r\n        possiblePoints.push(new Point(row - 1, col - 1));\r\n\r\n        // prawo gora\r\n        possiblePoints.push(new Point(row - 1, col + 1));\r\n\r\n        // lewo dol\r\n        possiblePoints.push(new Point(row + 1, col - 1));\r\n\r\n        // prawo dol\r\n        possiblePoints.push(new Point(row + 1, col + 1));\r\n\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { King } from './king';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Bishop extends Piece {\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 3, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures() {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Knight extends Piece {\r\n    isMovedAlready = false;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 3, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // gora -> lewo\r\n        if (this.board.isFieldEmpty(row - 2, col - 1)) {\r\n            possiblePoints.push(new Point(row - 2, col - 1));\r\n        }\r\n\r\n        // gora -> prawo\r\n        if (this.board.isFieldEmpty(row - 2, col + 1)) {\r\n            possiblePoints.push(new Point(row - 2, col + 1));\r\n        }\r\n\r\n        // lewo -> gora\r\n        if (this.board.isFieldEmpty(row - 1, col - 2)) {\r\n            possiblePoints.push(new Point(row - 1, col - 2));\r\n        }\r\n\r\n        // prawo -> gora\r\n        if (this.board.isFieldEmpty(row - 1, col + 2)) {\r\n            possiblePoints.push(new Point(row - 1, col + 2));\r\n        }\r\n\r\n        // lewo -> dol\r\n        if (this.board.isFieldEmpty(row + 1, col - 2)) {\r\n            possiblePoints.push(new Point(row + 1, col - 2));\r\n        }\r\n\r\n        // prawo -> dol\r\n        if (this.board.isFieldEmpty(row + 1, col + 2)) {\r\n            possiblePoints.push(new Point(row + 1, col + 2));\r\n        }\r\n\r\n        // dol -> lewo\r\n        if (this.board.isFieldEmpty(row + 2, col - 1)) {\r\n            possiblePoints.push(new Point(row + 2, col - 1));\r\n        }\r\n\r\n        // dol -> prawo\r\n        if (this.board.isFieldEmpty(row + 2, col + 1)) {\r\n            possiblePoints.push(new Point(row + 2, col + 1));\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // gora -> lewo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 2,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 2, col - 1));\r\n        }\r\n\r\n        // gora -> prawo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 2,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 2, col + 1));\r\n        }\r\n\r\n        // lewo -> gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col - 2,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col - 2));\r\n        }\r\n\r\n        // prawo -> gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col + 2,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col + 2));\r\n        }\r\n\r\n        // lewo -> dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col - 2,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col - 2));\r\n        }\r\n\r\n        // prawo -> dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col + 2,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col + 2));\r\n        }\r\n\r\n        // dol -> lewo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 2,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 2, col - 1));\r\n        }\r\n\r\n        // dol -> prawo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 2,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 2, col + 1));\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // gora -> lewo\r\n        possiblePoints.push(new Point(row - 2, col - 1));\r\n\r\n        // gora -> prawo\r\n        possiblePoints.push(new Point(row - 2, col + 1));\r\n\r\n        // lewo -> gora\r\n        possiblePoints.push(new Point(row - 1, col - 2));\r\n\r\n        // prawo -> gora\r\n        possiblePoints.push(new Point(row - 1, col + 2));\r\n\r\n        // lewo -> dol\r\n        possiblePoints.push(new Point(row + 1, col - 2));\r\n\r\n        // prawo -> dol\r\n        possiblePoints.push(new Point(row + 1, col + 2));\r\n\r\n        // dol -> lewo\r\n        possiblePoints.push(new Point(row + 2, col - 1));\r\n\r\n        // dol -> prawo\r\n        possiblePoints.push(new Point(row + 2, col + 1));\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Pawn extends Piece {\r\n    isMovedAlready = false;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 1, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        if (\r\n            (!this.board.reverted && this.color === Color.WHITE) ||\r\n            (this.board.reverted && this.color === Color.BLACK)\r\n        ) {\r\n            if (this.board.isFieldEmpty(row - 1, col)) {\r\n                possiblePoints.push(new Point(row - 1, col));\r\n\r\n                if (\r\n                    !this.isMovedAlready &&\r\n                    this.board.isFieldEmpty(row - 2, col)\r\n                ) {\r\n                    possiblePoints.push(new Point(row - 2, col));\r\n                }\r\n            }\r\n        } else {\r\n            if (\r\n                /*!board.isFieldTakenByEnemy(row + 1, col, Color.WHITE) &&*/ this.board.isFieldEmpty(\r\n                    row + 1,\r\n                    col\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row + 1, col));\r\n\r\n                if (\r\n                    !this.isMovedAlready &&\r\n                    this.board.isFieldEmpty(row + 2, col)\r\n                ) {\r\n                    possiblePoints.push(new Point(row + 2, col));\r\n                }\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        if (\r\n            (!this.board.reverted && this.color === Color.WHITE) ||\r\n            (this.board.reverted && this.color === Color.BLACK)\r\n        ) {\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row - 1,\r\n                    col - 1,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row - 1, col - 1));\r\n            }\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row - 1,\r\n                    col + 1,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row - 1, col + 1));\r\n            }\r\n        } else {\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row + 1,\r\n                    col - 1,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row + 1, col - 1));\r\n            }\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row + 1,\r\n                    col + 1,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row + 1, col + 1));\r\n            }\r\n        }\r\n\r\n        if (\r\n            this.board.enPassantPoint &&\r\n            this.board.enPassantPiece.color ===\r\n                (this.color === Color.WHITE ? Color.BLACK : Color.WHITE)\r\n        ) {\r\n            if (\r\n                row === this.board.enPassantPiece.point.row &&\r\n                Math.abs(this.board.enPassantPiece.point.col - col) === 1\r\n            ) {\r\n                possiblePoints.push(this.board.enPassantPoint);\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        if (\r\n            (!this.board.reverted && this.color === Color.WHITE) ||\r\n            (this.board.reverted && this.color === Color.BLACK)\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col - 1));\r\n\r\n            possiblePoints.push(new Point(row - 1, col + 1));\r\n        } else {\r\n            possiblePoints.push(new Point(row + 1, col - 1));\r\n\r\n            possiblePoints.push(new Point(row + 1, col + 1));\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { King } from './king';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Queen extends Piece {\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 9, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    col,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    col,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, col) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, col) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(row, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(row, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","export interface PieceConstant {\r\n    name: string;\r\n    icon: string;\r\n}\r\n\r\nexport const UnicodeConstants = {\r\n    WHITE_KING: { name: 'King', icon: '&#x2654;' },\r\n    WHITE_QUEEN: { name: 'Queen', icon: '&#x2655;' },\r\n    WHITE_KNIGHT: { name: 'Knight', icon: '&#x2658' },\r\n    WHITE_ROOK: { name: 'Rook', icon: '&#x2656' },\r\n    WHITE_PAWN: { name: 'Pawn', icon: '&#x2659' },\r\n    WHITE_BISHOP: { name: 'Bishop', icon: '&#x2657' },\r\n\r\n    BLACK_KING: { name: 'King', icon: '&#x265A' },\r\n    BLACK_QUEEN: { name: 'Queen', icon: '&#x265B' },\r\n    BLACK_KNIGHT: { name: 'Knight', icon: '&#x265E' },\r\n    BLACK_ROOK: { name: 'Rook', icon: '&#x265C' },\r\n    BLACK_PAWN: { name: 'Pawn', icon: '&#x265F' },\r\n    BLACK_BISHOP: { name: 'Bishop', icon: '&#x265D' },\r\n};\r\n","import { Board } from '../../../../../models/board';\r\nimport { Bishop } from '../../../../../models/pieces/bishop';\r\nimport { Color } from '../../../../../models/pieces/color';\r\nimport { King } from '../../../../../models/pieces/king';\r\nimport { Knight } from '../../../../../models/pieces/knight';\r\nimport { Pawn } from '../../../../../models/pieces/pawn';\r\nimport { Point } from '../../../../../models/pieces/point';\r\nimport { Queen } from '../../../../../models/pieces/queen';\r\nimport { Rook } from '../../../../../models/pieces/rook';\r\nimport { UnicodeConstants } from '../../../../../utils/unicode-constants';\r\nimport { AbstractEngineFacade } from '../../../../abstract-engine-facade';\r\nimport { NotationProcessor } from '../notation-processor';\r\n\r\nexport class DefaultFenProcessor implements NotationProcessor {\r\n\r\n    public process(notation: string, engineFacade: AbstractEngineFacade): void {\r\n        let fen = notation;\r\n        if (notation) {\r\n            engineFacade.board.reverted = false;\r\n            engineFacade.board.pieces = [];\r\n            const split = fen.split('/');\r\n            for (let i = 0; i < 8; ++i) {\r\n                let pointer = 0;\r\n                for (let j = 0; j < split[i].split(' ')[0].length; ++j) {\r\n                    const chunk = split[i].charAt(j);\r\n                    if (chunk.match(/[0-9]/)) {\r\n                        pointer += Number(chunk);\r\n                    } else {\r\n                        switch (chunk) {\r\n                            case 'r':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Rook(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_ROOK,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n                            case 'n':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Knight(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_KNIGHT,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n\r\n                                break;\r\n                            case 'b':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Bishop(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_BISHOP,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n                            case 'q':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Queen(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_QUEEN,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n                            case 'k':\r\n                                engineFacade.board.pieces.push(\r\n                                    new King(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_KING,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n                            case 'p': {\r\n                                const pawn = new Pawn(\r\n                                    new Point(i, pointer),\r\n                                    Color.BLACK,\r\n                                    UnicodeConstants.BLACK_PAWN,\r\n                                    engineFacade.board\r\n                                );\r\n                                if (\r\n                                    (pawn.color === Color.BLACK && pawn.point.row !== 1) ||\r\n                                    (pawn.color === Color.WHITE && pawn.point.row !== 6)\r\n                                ) {\r\n                                    pawn.isMovedAlready = true;\r\n                                }\r\n                                engineFacade.board.pieces.push(pawn);\r\n                                break;\r\n                            }\r\n                            case 'R':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Rook(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_ROOK,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n\r\n                                break;\r\n                            case 'N':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Knight(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_KNIGHT,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n\r\n                            case 'B':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Bishop(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_BISHOP,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n\r\n                            case 'Q':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Queen(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_QUEEN,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n\r\n                            case 'K':\r\n                                engineFacade.board.pieces.push(\r\n                                    new King(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_KING,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n\r\n                            case 'P': {\r\n                                const pawn = new Pawn(\r\n                                    new Point(i, pointer),\r\n                                    Color.WHITE,\r\n                                    UnicodeConstants.WHITE_PAWN,\r\n                                    engineFacade.board\r\n                                );\r\n                                if (\r\n                                    (pawn.color === Color.BLACK && pawn.point.row !== 1) ||\r\n                                    (pawn.color === Color.WHITE && pawn.point.row !== 6)\r\n                                ) {\r\n                                    pawn.isMovedAlready = true;\r\n                                }\r\n                                engineFacade.board.pieces.push(pawn);\r\n                                break;\r\n                            }\r\n                        }\r\n                        ++pointer;\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setCurrentPlayer(engineFacade.board, fen);\r\n            this.setCastles(engineFacade.board, fen);\r\n            this.setEnPassant(fen);\r\n            this.setFullMoveCount(fen);\r\n            engineFacade.board.fen = fen;\r\n        } else {\r\n            throw Error('Incorrect FEN provided');\r\n        }\r\n    }\r\n\r\n\r\n    private setCurrentPlayer(board: Board, fen: string) {\r\n        if (fen) {\r\n            const split = fen.split(' ');\r\n            board.currentWhitePlayer = split[1] === 'w';\r\n        }\r\n    }\r\n\r\n    private setCastles(board: Board, fen: string) {\r\n        if (fen) {\r\n            const split = fen.split(' ');\r\n            const castleChunk = split[2];\r\n\r\n            if (!castleChunk.includes('K')) {\r\n                this.setRookAlreadyMoved(board, Color.WHITE, 7);\r\n            }\r\n\r\n            if (!castleChunk.includes('Q')) {\r\n                this.setRookAlreadyMoved(board, Color.WHITE, 0);\r\n            }\r\n\r\n            if (!castleChunk.includes('k')) {\r\n                this.setRookAlreadyMoved(board, Color.BLACK, 7);\r\n            }\r\n\r\n            if (!castleChunk.includes('q')) {\r\n                this.setRookAlreadyMoved(board, Color.BLACK, 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setFullMoveCount(fen: string) {}\r\n\r\n    private setEnPassant(fen: string) {\r\n        if (fen) {\r\n            const split = fen.split(' ');\r\n            const enPassantPoint = split[3];\r\n\r\n            if (enPassantPoint === '-') {\r\n                return;\r\n            }\r\n\r\n            // if()\r\n        }\r\n    }\r\n\r\n    private setRookAlreadyMoved(board: Board, color: Color, col: number) {\r\n        const rook = board.pieces.find(\r\n            (piece) => piece.color === color && piece instanceof Rook && piece.point.col === col\r\n        ) as Rook;\r\n\r\n        if (rook) {\r\n            rook.isMovedAlready = true;\r\n        }\r\n    }\r\n\r\n}\r\n","export class MoveTranslation {\r\n    private _xAxis: number;\r\n    private _yAxis: number;\r\n    private _reverted: boolean;\r\n\r\n    constructor(xAxis: number, yAxis: number, reverted: boolean) {\r\n        this._xAxis = xAxis;\r\n        this._yAxis = yAxis;\r\n        this._reverted = reverted;\r\n    }\r\n\r\n    get xAxis(): number {\r\n        return this._xAxis;\r\n    }\r\n\r\n    set xAxis(value: number) {\r\n        this._xAxis = value;\r\n    }\r\n\r\n    get yAxis(): number {\r\n        return this._yAxis;\r\n    }\r\n\r\n    set yAxis(value: number) {\r\n        this._yAxis = value;\r\n    }\r\n\r\n    get reverted(): boolean {\r\n        return this._reverted;\r\n    }\r\n\r\n    set reverted(value: boolean) {\r\n        this._reverted = value;\r\n    }\r\n}\r\n","import { Board } from '../models/board';\r\nimport { Bishop } from '../models/pieces/bishop';\r\nimport { Color } from '../models/pieces/color';\r\nimport { King } from '../models/pieces/king';\r\nimport { Knight } from '../models/pieces/knight';\r\nimport { Pawn } from '../models/pieces/pawn';\r\nimport { Piece } from '../models/pieces/piece';\r\nimport { Point } from '../models/pieces/point';\r\nimport { MoveTranslation } from '../models/move-translation';\r\nimport { Queen } from '../models/pieces/queen';\r\nimport { Rook } from '../models/pieces/rook';\r\n\r\nexport class MoveUtils {\r\n    public static willMoveCauseCheck(\r\n        currentColor: Color,\r\n        row: number,\r\n        col: number,\r\n        destRow: number,\r\n        destCol: number,\r\n        board: Board\r\n    ) {\r\n        const srcPiece = board.getPieceByField(row, col);\r\n        const destPiece = board.getPieceByField(destRow, destCol);\r\n\r\n        if (srcPiece) {\r\n            srcPiece.point.row = destRow;\r\n            srcPiece.point.col = destCol;\r\n        }\r\n\r\n        if (destPiece) {\r\n            board.pieces = board.pieces.filter((piece) => piece !== destPiece);\r\n        }\r\n        const isBound = board.isKingInCheck(currentColor, board.pieces);\r\n\r\n        if (srcPiece) {\r\n            srcPiece.point.col = col;\r\n            srcPiece.point.row = row;\r\n        }\r\n\r\n        if (destPiece) {\r\n            board.pieces.push(destPiece);\r\n        }\r\n\r\n        return isBound;\r\n    }\r\n\r\n    public static format(\r\n        sourcePoint: Point,\r\n        destPoint: Point,\r\n        reverted: boolean\r\n    ) {\r\n        if (reverted) {\r\n            const sourceX = 104 - sourcePoint.col;\r\n            const destX = 104 - destPoint.col;\r\n            return (\r\n                String.fromCharCode(sourceX) +\r\n                (sourcePoint.row + 1) +\r\n                String.fromCharCode(destX) +\r\n                (destPoint.row + 1)\r\n            );\r\n        } else {\r\n            const incrementX = 97;\r\n            return (\r\n                String.fromCharCode(sourcePoint.col + incrementX) +\r\n                (Math.abs(sourcePoint.row - 7) + 1) +\r\n                String.fromCharCode(destPoint.col + incrementX) +\r\n                (Math.abs(destPoint.row - 7) + 1)\r\n            );\r\n        }\r\n    }\r\n\r\n    public static translateCoordsToIndex(coords: string, reverted: boolean) {\r\n        let xAxis: number;\r\n        let yAxis: number;\r\n        if (reverted) {\r\n            xAxis = 104 - coords.charCodeAt(0);\r\n            yAxis = +coords.charAt(1) - 1;\r\n        } else {\r\n            xAxis = coords.charCodeAt(0) - 97;\r\n            yAxis = Math.abs(+coords.charAt(1) - 8);\r\n        }\r\n\r\n        return new MoveTranslation(xAxis, yAxis, reverted);\r\n    }\r\n\r\n    public static findPieceByPossibleMovesContaining(\r\n        coords: string,\r\n        board: Board,\r\n        color: Color\r\n    ): Piece[] {\r\n        let indexes = this.translateCoordsToIndex(coords, board.reverted);\r\n        let destPoint = new Point(indexes.yAxis, indexes.xAxis);\r\n        let foundPieces = [];\r\n\r\n        for (let piece of board.pieces.filter(piece => piece.color === color)) {\r\n            for (let point of piece.getPossibleMoves()) {\r\n                if (!MoveUtils.willMoveCauseCheck(\r\n                    piece.color,\r\n                    piece.point.row,\r\n                    piece.point.col,\r\n                    indexes.yAxis,\r\n                    indexes.xAxis,\r\n                    board\r\n                ) && point.isEqual(destPoint)) {\r\n                    foundPieces.push(piece);\r\n                }\r\n            }\r\n        }\r\n        return foundPieces;\r\n    }\r\n\r\n    public static findPieceByPossibleCapturesContaining(\r\n        coords: string,\r\n        board: Board,\r\n        color: Color\r\n    ): Piece[] {\r\n        let indexes = this.translateCoordsToIndex(coords, board.reverted);\r\n        let destPoint = new Point(indexes.yAxis, indexes.xAxis);\r\n        let foundPieces = [];\r\n        for (let piece of board.pieces.filter(piece => piece.color === color)) {\r\n            for (let point of piece.getPossibleCaptures()) {\r\n                if (!MoveUtils.willMoveCauseCheck(\r\n                    piece.color,\r\n                    piece.point.row,\r\n                    piece.point.col,\r\n                    indexes.yAxis,\r\n                    indexes.xAxis,\r\n                    board\r\n                ) && point.isEqual(destPoint)) {\r\n                    foundPieces.push(piece);\r\n                }\r\n            }\r\n        }\r\n\r\n        return foundPieces;\r\n    }\r\n\r\n    public static formatSingle(point: Point, reverted: boolean): string {\r\n        if (reverted) {\r\n            const sourceX = 104 - point.col;\r\n            return (\r\n                String.fromCharCode(sourceX) +\r\n                (point.row + 1)\r\n            );\r\n        } else {\r\n            const incrementX = 97;\r\n            return (\r\n                String.fromCharCode(point.col + incrementX) +\r\n                (Math.abs(point.row - 7) + 1)\r\n            );\r\n        }\r\n    }\r\n\r\n    public static getFirstLetterPiece(piece: Piece): string {\r\n        if (piece instanceof Pawn) {\r\n            return 'P';\r\n        } else {\r\n            if (piece instanceof Knight) {\r\n                return 'N';\r\n            } else {\r\n                if (piece instanceof Bishop) {\r\n                    return 'B';\r\n                } else {\r\n                    if (piece instanceof Rook) {\r\n                        return 'R';\r\n                    } else {\r\n                        if (piece instanceof King) {\r\n                            return 'K';\r\n                        } else {\r\n                            if (piece instanceof Queen) {\r\n                                return 'Q';\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return '';\r\n    }\r\n\r\n    static reverse(board: Board, row: number) {\r\n        return board.reverted\r\n            ? row + 1\r\n            : Math.abs(row - 7) + 1;\r\n    }\r\n\r\n    static formatCol(board: Board, col: number): string {\r\n        return board.reverted\r\n            ? String.fromCharCode(104 - col)\r\n            : String.fromCharCode(97 + col);\r\n    }\r\n}\r\n","import { Board } from '../../../models/board';\r\nimport { Bishop } from '../../../models/pieces/bishop';\r\nimport { Color } from '../../../models/pieces/color';\r\nimport { King } from '../../../models/pieces/king';\r\nimport { Knight } from '../../../models/pieces/knight';\r\nimport { Pawn } from '../../../models/pieces/pawn';\r\nimport { Point } from '../../../models/pieces/point';\r\nimport { Queen } from '../../../models/pieces/queen';\r\nimport { Rook } from '../../../models/pieces/rook';\r\nimport { UnicodeConstants } from '../../../utils/unicode-constants';\r\n\r\nexport class DefaultPiecesLoader {\r\n\r\n    static loadDefaultPieces(board: Board) {\r\n        board.pieces = [];\r\n        // piony czarne\r\n        for (let i = 0; i < 8; ++i) {\r\n            board.pieces.push(new Pawn(\r\n                new Point(1, i),\r\n                Color.BLACK,\r\n                UnicodeConstants.BLACK_PAWN,\r\n                board\r\n            ));\r\n        }\r\n        board.pieces.push(new Rook(\r\n            new Point(0, 0),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_ROOK,\r\n            board\r\n        ));\r\n        board.pieces.push(new Knight(\r\n            new Point(0, 1),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_KNIGHT,\r\n            board\r\n        ));\r\n        board.pieces.push(new Bishop(\r\n            new Point(0, 2),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_BISHOP,\r\n            board\r\n        ));\r\n        board.pieces.push(new Queen(\r\n            new Point(0, 3),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_QUEEN,\r\n            board\r\n        ));\r\n        board.pieces.push(new King(\r\n            new Point(0, 4),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_KING,\r\n            board\r\n        ));\r\n        board.pieces.push(new Bishop(\r\n            new Point(0, 5),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_BISHOP,\r\n            board\r\n        ));\r\n        board.pieces.push(new Knight(\r\n            new Point(0, 6),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_KNIGHT,\r\n            board\r\n        ));\r\n        board.pieces.push(new Rook(\r\n            new Point(0, 7),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_ROOK,\r\n            board\r\n        ));\r\n\r\n        // piony biale\r\n        for (let i = 0; i < 8; ++i) {\r\n            board.pieces.push(new Pawn(\r\n                new Point(6, i),\r\n                Color.WHITE,\r\n                UnicodeConstants.WHITE_PAWN,\r\n                board\r\n            ));\r\n        }\r\n        board.pieces.push(new Rook(\r\n            new Point(7, 0),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_ROOK,\r\n            board\r\n        ));\r\n        board.pieces.push(new Knight(\r\n            new Point(7, 1),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_KNIGHT,\r\n            board\r\n        ));\r\n        board.pieces.push(new Bishop(\r\n            new Point(7, 2),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_BISHOP,\r\n            board\r\n        ));\r\n        board.pieces.push(new Queen(\r\n            new Point(7, 3),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_QUEEN,\r\n            board\r\n        ));\r\n        board.pieces.push(new King(\r\n            new Point(7, 4),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_KING,\r\n            board\r\n        ));\r\n        board.pieces.push(new Bishop(\r\n            new Point(7, 5),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_BISHOP,\r\n            board\r\n        ));\r\n        board.pieces.push(new Knight(\r\n            new Point(7, 6),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_KNIGHT,\r\n            board\r\n        ));\r\n        board.pieces.push(new Rook(\r\n            new Point(7, 7),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_ROOK,\r\n            board\r\n        ));\r\n\r\n        board.calculateFEN();\r\n\r\n    }\r\n\r\n}\r\n","import { Board } from '../../../../../models/board';\nimport { Bishop } from '../../../../../models/pieces/bishop';\nimport { Color } from '../../../../../models/pieces/color';\nimport { King } from '../../../../../models/pieces/king';\nimport { Knight } from '../../../../../models/pieces/knight';\nimport { Pawn } from '../../../../../models/pieces/pawn';\nimport { Piece } from '../../../../../models/pieces/piece';\nimport { Point } from '../../../../../models/pieces/point';\nimport { Queen } from '../../../../../models/pieces/queen';\nimport { Rook } from '../../../../../models/pieces/rook';\nimport { MoveUtils } from '../../../../../utils/move-utils';\nimport { AbstractEngineFacade } from '../../../../abstract-engine-facade';\nimport { DefaultPiecesLoader } from '../../default-pieces-loader';\nimport { NotationProcessor } from '../notation-processor';\n\nexport class DefaultPgnProcessor implements NotationProcessor {\n\n    public process(notation: string, engineFacade: AbstractEngineFacade): void {\n        if (notation) {\n            engineFacade.board.reverted = false;\n            engineFacade.board.pieces = [];\n            engineFacade.reset();\n            DefaultPiecesLoader.loadDefaultPieces(engineFacade.board);\n            let moves = this.extractMoves(notation);\n            let counter = -1;\n            for (let move of moves) {\n                ++counter;\n                move = move.replace(/[+#]/g, '');\n                let promotionIndex = '';\n\n                if (move.includes('=')) {\n                    promotionIndex = this.resolvePromotion(move.substring(move.length - 1));\n                    move = move.substring(0, move.length - 2);\n                }\n\n                let color = (counter === 0 || counter % 2 === 0)\n                    ? Color.WHITE\n                    : Color.BLACK;\n\n                if (/^[a-z]\\d$/g.test(move)) { // zwykly ruch na wolne pole e4\n                    let piece = MoveUtils.findPieceByPossibleMovesContaining(\n                        move,\n                        engineFacade.board,\n                        color\n                    ).find(piece => piece instanceof Pawn);\n\n                    // en passant check\n                    if (!piece) {\n                        piece = MoveUtils.findPieceByPossibleCapturesContaining(\n                            move, engineFacade.board, color\n                        ).find(piece => piece instanceof Pawn);\n                    }\n\n                    // if piece is found for sure\n                    if (piece) {\n                        engineFacade.move(MoveUtils.formatSingle(\n                            piece.point,\n                            false\n                        ) + move + promotionIndex);\n                    }\n                } else {\n                    if (/^[A-Z][a-h]\\d$/g.test(move)) {// jezeli ma wielka litere, czyli trzeba odszukac ktora figura Nf3\n                        let pieces = MoveUtils.findPieceByPossibleMovesContaining(\n                            move.substring(1),\n                            engineFacade.board,\n                            color\n                        );\n                        let piece = pieces.find(piece => this.resolvePieceByFirstChar(\n                            move.charAt(0),\n                            piece\n                        ));\n                        if (piece) {\n                            engineFacade.move(MoveUtils.formatSingle(\n                                piece.point,\n                                false\n                            ) + move.substring(1) + promotionIndex);\n                        } else {\n                        }\n                    } else {\n                        if ('O-O' === move) {\n                            engineFacade.move(color === Color.WHITE ? 'e1g1' : 'e8g8');\n                        } else {\n                            if (/^[a-z]x[a-z]\\d$/g.test(move)) { //exd5\n                                let pieces = MoveUtils.findPieceByPossibleCapturesContaining(\n                                    move.substring(move.indexOf('x') + 1),\n                                    engineFacade.board,\n                                    color\n                                ).filter(piece => piece instanceof Pawn);\n\n                                let piece;\n                                if (pieces.length > 1) {\n                                    piece = this.resolveByCol(\n                                        pieces,\n                                        move.substring(0, 1)\n                                    );\n                                } else {\n                                    piece = pieces[0];\n                                }\n\n                                if (piece) {\n                                    engineFacade.move(MoveUtils.formatSingle(\n                                        piece.point,\n                                        false\n                                    ) + move.substring(move.indexOf('x') + 1) + promotionIndex);\n                                } else {\n                                }\n                            } else {\n                                if (/^[A-Z]x[a-z]\\d$/g.test(move)) {\n                                    let piece = MoveUtils.findPieceByPossibleCapturesContaining(\n                                        move.substring(move.indexOf('x') + 1),\n                                        engineFacade.board,\n                                        color\n                                    ).find(piece => this.resolvePieceByFirstChar(\n                                        move.substring(0, 1),\n                                        piece\n                                    ));\n                                    if (piece) {\n                                        engineFacade.move(MoveUtils.formatSingle(\n                                            piece.point,\n                                            false\n                                        ) + move.substring(move.indexOf('x') + 1) + promotionIndex);\n                                    } else {\n                                    }\n                                } else {\n                                    if (move === 'O-O-O') {\n                                        engineFacade.move(color === Color.WHITE ? 'e1c1' : 'e8c8');\n                                    } else {\n                                        if (/^[A-Z]\\dx[a-z]\\d$/g.test(move)) {  //Ngxe4 sytuacja 2 skoczkow pion bicie\n                                            let pieces = MoveUtils.findPieceByPossibleCapturesContaining(\n                                                move.substring(move.indexOf('x') + 1),\n                                                engineFacade.board,\n                                                color\n                                            ).filter(piece => this.resolvePieceByFirstChar(\n                                                move.charAt(0),\n                                                piece\n                                            ));\n\n                                            let piece = this.resolveByRow(\n                                                pieces,\n                                                move.substring(1, 2)\n                                            );\n\n                                            if (piece) {\n                                                engineFacade.move(MoveUtils.formatSingle(\n                                                    piece.point,\n                                                    false\n                                                ) + move.substring(move.indexOf(\n                                                    'x') + 1) + promotionIndex);\n                                            }\n                                        } else {\n                                            if (/^[A-Z][a-z][a-z]\\d$/g.test(move)) { // dwie wieze bez bicia Rac1 pion\n                                                let pieces = MoveUtils.findPieceByPossibleMovesContaining(\n                                                    move.substring(2, 4),\n                                                    engineFacade.board,\n                                                    color\n                                                ).filter(piece => this.resolvePieceByFirstChar(\n                                                    move.charAt(0),\n                                                    piece\n                                                ));\n\n                                                let piece = this.resolveByCol(\n                                                    pieces,\n                                                    move.substring(1, 2)\n                                                );\n\n                                                if (piece) {\n                                                    engineFacade.move(MoveUtils.formatSingle(\n                                                        piece.point,\n                                                        false\n                                                    ) + move.substring(\n                                                        2,\n                                                        4\n                                                    ) + promotionIndex);\n                                                }\n                                            } else {\n                                                if (/^[A-Z][a-z]x[a-z]\\d$/g.test(\n                                                    move)) {\n                                                    let pieces = MoveUtils.findPieceByPossibleCapturesContaining(\n                                                        move.substring(move.indexOf(\n                                                            'x') + 1),\n                                                        engineFacade.board,\n                                                        color\n                                                    ).filter(piece => this.resolvePieceByFirstChar(\n                                                        move.charAt(0),\n                                                        piece\n                                                    ));\n\n                                                    let piece = this.resolveByCol(\n                                                        pieces,\n                                                        move.substring(1, 2)\n                                                    );\n\n                                                    if (piece) {\n                                                        engineFacade.move(\n                                                            MoveUtils.formatSingle(\n                                                                piece.point,\n                                                                false\n                                                            ) + move.substring(\n                                                            move.indexOf(\n                                                                'x') + 1) + promotionIndex);\n                                                    }\n                                                } else {\n                                                    this.processR1f2(\n                                                        move,\n                                                        engineFacade,\n                                                        color,\n                                                        promotionIndex\n                                                    );\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    private processR1f2(move, engineFacade, color, promotionIndex) {\n        if (/^[A-Z]\\d[a-z]\\d$/g.test(move)) { // R1f2\n            let pieces = MoveUtils.findPieceByPossibleMovesContaining(\n                move.substring(2, 4),\n                engineFacade.board,\n                color\n            ).filter(piece => this.resolvePieceByFirstChar(\n                move.charAt(0),\n                piece\n            ));\n\n            let piece = this.resolveByRow(\n                pieces,\n                move.substring(1, 2)\n            );\n\n            if (piece) {\n                engineFacade.move(MoveUtils.formatSingle(\n                    piece.point,\n                    false\n                ) + move.substring(\n                    2,\n                    4\n                ) + promotionIndex);\n            }\n        }\n    }\n\n    protected extractMoves(notation: string) {\n        return notation.substring(notation.lastIndexOf(']') + 1)\n            .replace(/[0-9]+\\./g, '')\n            .replace(/\\s+/g, ' ')\n            .replace(/{[^}]*}/g, '')\n            .trim()\n            .split(' ')\n            .filter(s => s);\n    }\n\n    protected movePiece(piece: Piece, board: Board, move: string) {\n        let indexes = MoveUtils.translateCoordsToIndex(move, board.reverted);\n        piece.point.col = indexes.xAxis;\n        piece.point.row = indexes.yAxis;\n    }\n\n    hasUpperCase(move: string) {\n        return /[A-Z]/.test(move);\n    }\n\n    private resolvePieceByFirstChar(move: string, piece: Piece) {\n        let piecesFirstChar = '';\n        if (piece instanceof King) {\n            piecesFirstChar = 'K';\n        } else {\n            if (piece instanceof Queen) {\n                piecesFirstChar = 'Q';\n            } else {\n                if (piece instanceof Rook) {\n                    piecesFirstChar = 'R';\n                } else {\n                    if (piece instanceof Bishop) {\n                        piecesFirstChar = 'B';\n                    } else {\n                        if (piece instanceof Knight) {\n                            piecesFirstChar = 'N';\n                        } else {\n                            if (piece instanceof Pawn) {\n                                piecesFirstChar = 'P';\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return move === piecesFirstChar;\n    }\n\n    private isShortCastle(move: string) {\n        return move === 'O-O';\n    }\n\n    private removePiece(coords: string, board: Board) {\n        let indexes = MoveUtils.translateCoordsToIndex(coords, board.reverted);\n\n        board.pieces = board.pieces.filter(e => !e.point.isEqual(new Point(\n            indexes.yAxis,\n            indexes.xAxis\n        )));\n    }\n\n    private isLongCastle(move: string) {\n        return move === 'O-O-O';\n    }\n\n    private resolveByCol(pieces: Piece[], char: string): Piece {\n        let firstPieceFormat = MoveUtils.formatSingle(pieces[0].point, false);\n        let secondPieceFormat = MoveUtils.formatSingle(pieces[1].point, false);\n        return firstPieceFormat.substring(0, 1) === char\n            ? pieces[0]\n            : pieces[1];\n    }\n\n    private resolveByRow(pieces: Piece[], char: string) {\n        let firstPieceFormat = MoveUtils.formatSingle(pieces[0].point, false);\n        let secondPieceFormat = MoveUtils.formatSingle(pieces[1].point, false);\n        return firstPieceFormat.substring(1, 2) === char\n            ? pieces[0]\n            : pieces[1];\n    }\n\n    private replacePromotion(move: string) {\n        return move\n            .replace('=Q', '1')\n            .replace('=R', '2')\n            .replace('=B', '3')\n            .replace('=K', '4');\n    }\n\n    private resolvePromotion(promotionChar: string) {\n        switch (promotionChar) {\n            case 'Q':\n                return '1';\n            case 'R':\n                return '2';\n            case 'B':\n                return '3';\n            case 'N':\n                return '4';\n        }\n        return '';\n    }\n}\n","export class DrawPoint {\r\n    x: number;\r\n    y: number;\r\n    color: string;\r\n\r\n    constructor(x: number, y: number, color: string) {\r\n        this.x = x + 0.5;\r\n        this.y = y + 0.5;\r\n        this.color = color;\r\n    }\r\n\r\n    isEqual(that: DrawPoint) {\r\n        return that && that.x === this.x && this.y === that.y;\r\n    }\r\n}\r\n","import { Point } from '../../models/pieces/point';\nimport { ColorStrategy } from '../drawing-tools/colors/color-strategy';\nimport { DrawPoint } from '../drawing-tools/draw-point';\n\nexport class ClickUtils {\n\n    static getClickPoint(\n        event: any,\n        top: number,\n        height: number,\n        left: number,\n        width: number\n    ) {\n        return new Point(\n            Math.floor((event.y - top) / (height / 8)),\n            Math.floor((event.x - left) / (width / 8)\n            )\n        );\n    }\n\n    static getDrawingPoint(\n        tileSize: number,\n        colorStrategy: ColorStrategy,\n        x: number,\n        y: number,\n        ctrl: boolean,\n        alt: boolean,\n        shift: boolean,\n        xAxis: number,\n        yAxis: number\n    ) {\n        const squareSize = tileSize / 8;\n        const xx = Math.floor(\n            (x - xAxis) /\n            squareSize\n        );\n        const yy = Math.floor(\n            (y - yAxis) /\n            squareSize\n        );\n\n        let color = colorStrategy.resolve(ctrl, shift, alt);\n\n        return new DrawPoint(\n            Math.floor(xx * squareSize + squareSize / 2),\n            Math.floor(yy * squareSize + squareSize / 2),\n            color\n        );\n    }\n\n}\n","export class HistoryMove {\n    move: string;\n    piece: string;\n    color: string;\n    x: boolean;\n    check: boolean;\n    stalemate: boolean;\n    mate: boolean;\n\n    constructor(move: string, piece: string, color: string, captured: boolean) {\n        this.move = move;\n        this.piece = piece;\n        this.color = color;\n        this.x = captured;\n    }\n\n    setGameStates(check: boolean, stalemate: boolean, mate: boolean): void {\n        this.check = check;\n        this.stalemate = stalemate;\n        this.mate = mate;\n    }\n\n}\n","import { BehaviorSubject } from 'rxjs';\r\nimport { HistoryMove } from './history-move';\r\n\r\nexport class HistoryMoveProvider {\r\n    historyMovesSubject$ = new BehaviorSubject<HistoryMove[]>([]);\r\n\r\n    get historyMoves(): HistoryMove[] {\r\n        return this.historyMovesSubject$.value;\r\n    }\r\n\r\n    set historyMoves(states: HistoryMove[]) {\r\n        this.historyMovesSubject$.next(states);\r\n    }\r\n\r\n    addMove(historyMove: HistoryMove) {\r\n        this.historyMoves = [...this.historyMoves, historyMove];\r\n    }\r\n\r\n    pop(): HistoryMove {\r\n        const lastHistoryMove = this.getLastMove();\r\n        this.historyMoves = this.historyMoves.filter(\r\n            (state) => state !== lastHistoryMove\r\n        );\r\n        return lastHistoryMove;\r\n    }\r\n\r\n    getAll() {\r\n        return this.historyMoves;\r\n    }\r\n\r\n    clear() {\r\n        this.historyMoves = [];\r\n    }\r\n\r\n    getLastMove() {\r\n        return this.historyMoves[this.getLastMoveIndex()];\r\n    }\r\n\r\n    getLastMoveIndex() {\r\n        return this.historyMoves.length - 1;\r\n    }\r\n}\r\n","export class Constants {\r\n    static readonly DEFAULT_DARK_TILE_COLOR = 'rgb(97, 84, 61)';\r\n    static readonly DEFAULT_LIGHT_TILE_COLOR = '#BAA378';\r\n\r\n    static readonly DEFAULT_SIZE = 500;\r\n    static readonly MIN_BOARD_SIZE = 100;\r\n    static readonly MAX_BOARD_SIZE = 4000;\r\n\r\n    static readonly DEFAULT_SOURCE_POINT_COLOR = 'rgba(146, 111, 26, 0.79)';\r\n    static readonly DEFAULT_DESTINATION_POINT_COLOR = '#b28e1a';\r\n    static readonly DEFAULT_LEGAL_MOVE_POINT_COLOR = 'radial-gradient(#13262F 15%, transparent 20%);';\r\n\r\n}\r\n","import { Bishop } from '../../models/pieces/bishop';\r\nimport { Color } from '../../models/pieces/color';\r\nimport { King } from '../../models/pieces/king';\r\nimport { Knight } from '../../models/pieces/knight';\r\nimport { Pawn } from '../../models/pieces/pawn';\r\nimport { Piece } from '../../models/pieces/piece';\r\nimport { Queen } from '../../models/pieces/queen';\r\nimport { Rook } from '../../models/pieces/rook';\r\nimport { PieceIconInput } from './piece-icon-input';\r\n\r\nexport class PieceIconInputManager {\r\n\r\n    private _defaultIcons: boolean = false;\r\n    private _pieceIconInput: PieceIconInput;\r\n\r\n    get pieceIconInput(): PieceIconInput {\r\n        return this._pieceIconInput;\r\n    }\r\n\r\n    set pieceIconInput(value: PieceIconInput) {\r\n        this._pieceIconInput = value;\r\n    }\r\n\r\n\r\n    get defaultIcons(): boolean {\r\n        return this._defaultIcons;\r\n    }\r\n\r\n    set defaultIcons(value: boolean) {\r\n        this._defaultIcons = value;\r\n    }\r\n\r\n    isDefaultIcons(): boolean {\r\n        return this.pieceIconInput === undefined || this.pieceIconInput === null;\r\n    }\r\n\r\n    getPieceIcon(piece: Piece): string {\r\n        let isWhite = (piece.color === Color.WHITE);\r\n        switch (piece.constructor) {\r\n            case King:\r\n                return isWhite ? this.pieceIconInput.whiteKingUrl : this.pieceIconInput.blackKingUrl;\r\n            case Queen:\r\n                return isWhite ? this.pieceIconInput.whiteQueenUrl : this.pieceIconInput.blackQueenUrl;\r\n            case Rook:\r\n                return isWhite ? this.pieceIconInput.whiteRookUrl : this.pieceIconInput.blackRookUrl;\r\n            case Bishop:\r\n                return isWhite ? this.pieceIconInput.whiteBishopUrl : this.pieceIconInput.blackBishopUrl;\r\n            case Knight:\r\n                return isWhite ? this.pieceIconInput.whiteKnightUrl : this.pieceIconInput.blackKnightUrl;\r\n            case Pawn:\r\n                return isWhite ? this.pieceIconInput.whitePawnUrl : this.pieceIconInput.blackPawnUrl;\r\n        }\r\n    }\r\n\r\n    loadDefaultData(){\r\n        this.pieceIconInput = {\r\n            blackBishopUrl: '',\r\n            blackKingUrl: '',\r\n            blackKnightUrl: '',\r\n            blackQueenUrl: '',\r\n            blackRookUrl: '',\r\n            whiteBishopUrl: '',\r\n            whiteKingUrl: '',\r\n            whiteKnightUrl: '',\r\n            whitePawnUrl: '',\r\n            whiteQueenUrl: '',\r\n            whiteRookUrl: '',\r\n            blackPawnUrl: 'a'\r\n        }\r\n    }\r\n\r\n}\r\n","export enum PieceTypeInput {\r\n\r\n    KING = 1,\r\n    QUEEN = 2,\r\n    BISHOP = 3,\r\n    KNIGHT = 4,\r\n    ROOK = 5,\r\n    PAWN = 6\r\n\r\n}\r\n\r\nexport enum ColorInput {\r\n\r\n    LIGHT = 1,\r\n    DARK = 2\r\n\r\n}\r\n","export class CoordsProvider {\r\n    private readonly defaultXCoords: string[] = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\r\n\r\n    private readonly defaultYCoords: number[] = [8, 7, 6, 5, 4, 3, 2, 1];\r\n\r\n    private currentXCoords: string[] = [...this.defaultXCoords];\r\n    private currentYCoords: number[] = [...this.defaultYCoords];\r\n\r\n    get xCoords(): string[] {\r\n        return this.currentXCoords;\r\n    }\r\n\r\n    get yCoords(): number[] {\r\n        return this.currentYCoords;\r\n    }\r\n\r\n    reverse() {\r\n        this.currentXCoords = this.currentXCoords.reverse();\r\n        this.currentYCoords = this.currentYCoords.reverse();\r\n    }\r\n\r\n    reset() {\r\n        this.init();\r\n    }\r\n\r\n    private init() {\r\n        this.currentXCoords = [...this.defaultXCoords];\r\n        this.currentYCoords = [...this.defaultYCoords];\r\n    }\r\n}\r\n","import { CdkDragEnd, CdkDragStart } from '@angular/cdk/drag-drop';\r\nimport { DragEndProcessor } from './drag-end-processor';\r\n\r\nexport class AnimationDragEndProcessor implements DragEndProcessor {\r\n\r\n    dragEnded(event: CdkDragEnd, disabling: boolean, startTrans: string) {\r\n        if (!disabling) {\r\n            if (startTrans) {\r\n                event.source._dragRef.getRootElement().style.transform = startTrans;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n","import { CdkDragEnd } from '@angular/cdk/drag-drop';\r\nimport { AnimationDragEndProcessor } from './animation-drag-end-processor';\r\nimport { DefaultDragEndProcessor } from './default-drag-end-processor';\r\nimport { DragEndProcessor } from './drag-end-processor';\r\n\r\nexport class DragEndStrategy {\r\n\r\n    private dragEndProcessor: DragEndProcessor;\r\n\r\n    constructor() {\r\n        this.dragEndProcessor = new AnimationDragEndProcessor();\r\n    }\r\n\r\n    public process(event: CdkDragEnd, disabling: boolean, startTrans: string): void {\r\n        this.dragEndProcessor.dragEnded(event, disabling, startTrans);\r\n    }\r\n\r\n    setDragEndProcessor(processor: DragEndProcessor) {\r\n        this.dragEndProcessor = processor;\r\n    }\r\n\r\n}\r\n","import { CdkDragStart } from '@angular/cdk/drag-drop';\r\nimport { DragStartProcessor } from './drag-start-processor';\r\n\r\nexport class AnimationDragStartProcessor implements DragStartProcessor {\r\n\r\n    dragStarted(event: CdkDragStart) {\r\n        const style = event.source.getRootElement().style;\r\n        style.zIndex = '1000';\r\n        style.position = 'absolute';\r\n    }\r\n\r\n}\r\n","import { CdkDragStart } from '@angular/cdk/drag-drop';\r\nimport { AnimationDragStartProcessor } from './animation-drag-start-processor';\r\nimport { DefaultDragStartProcessor } from './default-drag-start-processor';\r\nimport { DragStartProcessor } from './drag-start-processor';\r\n\r\nexport class DragStartStrategy {\r\n\r\n    private dragStartProcessor: DragStartProcessor;\r\n\r\n    constructor() {\r\n        this.dragStartProcessor = new AnimationDragStartProcessor();\r\n    }\r\n\r\n    public process(event: CdkDragStart): void {\r\n        this.dragStartProcessor.dragStarted(event);\r\n    }\r\n\r\n    setDragStartProcessor(processor: DragStartProcessor) {\r\n        this.dragStartProcessor = processor;\r\n    }\r\n\r\n}\r\n","import { ColorProcessor } from './color-processor';\r\n\r\nexport class DefaultColorProcessor implements ColorProcessor{\r\n\r\n    resolve(ctrl: any, shift: any, alt: any): string{\r\n        let color = 'green';\r\n\r\n        if (ctrl || shift) {\r\n            color = 'red';\r\n        }\r\n        if (alt) {\r\n            color = 'blue';\r\n        }\r\n        if ((shift || ctrl) && alt) {\r\n            color = 'orange';\r\n        }\r\n\r\n        return color;\r\n    }\r\n\r\n}\r\n","import { ColorProcessor } from './color-processor';\r\nimport { DefaultColorProcessor } from './default-color-processor';\r\n\r\nexport class ColorStrategy {\r\n\r\n    colorProcessor: ColorProcessor;\r\n\r\n    constructor() {\r\n        this.colorProcessor = new DefaultColorProcessor();\r\n    }\r\n\r\n    resolve(ctrl: any, shift: any, alt: any) {\r\n        return this.colorProcessor.resolve(ctrl, shift, alt);\r\n    }\r\n\r\n    setColorProcessor(colorProcessor: ColorProcessor) {\r\n        this.colorProcessor = colorProcessor;\r\n    }\r\n\r\n}\r\n","import { BehaviorSubject } from 'rxjs';\r\nimport { Arrow } from './shapes/arrow';\r\nimport { Circle } from './shapes/circle';\r\n\r\nexport class DrawProvider {\r\n    private arrowsSubject$ = new BehaviorSubject<Arrow[]>([]);\r\n    private circlesSubject$ = new BehaviorSubject<Circle[]>([]);\r\n\r\n    public arrows$ = this.arrowsSubject$.asObservable();\r\n    public circles$ = this.circlesSubject$.asObservable();\r\n\r\n    private get circles(): Circle[] {\r\n        return this.circlesSubject$.value;\r\n    }\r\n\r\n    private set circles(circles: Circle[]) {\r\n        this.circlesSubject$.next(circles);\r\n    }\r\n\r\n    private get arrows(): Arrow[] {\r\n        return this.arrowsSubject$.value;\r\n    }\r\n\r\n    private set arrows(arrows: Arrow[]) {\r\n        this.arrowsSubject$.next(arrows);\r\n    }\r\n\r\n    addCircle(circle: Circle) {\r\n        this.circles = [...this.circles, circle];\r\n    }\r\n\r\n    reomveCircle(removeCircle: Circle) {\r\n        this.circles = this.circles.filter((circle) => !circle.isEqual(removeCircle));\r\n    }\r\n\r\n    addArrow(arrow: Arrow) {\r\n        this.arrows = [...this.arrows, arrow];\r\n    }\r\n\r\n    removeArrow(removeArrow: Arrow) {\r\n        this.arrows = this.arrows.filter((arrow) => !arrow.isEqual(removeArrow));\r\n    }\r\n\r\n    containsCircle(checkCircle: Circle) {\r\n        return this.circles.some((circle) => circle.isEqual(checkCircle));\r\n    }\r\n\r\n    containsArrow(checkArrow: Arrow) {\r\n        return this.arrows.some((arrow: Arrow) => arrow.isEqual(checkArrow));\r\n    }\r\n\r\n    clear() {\r\n        this.arrows = [];\r\n        this.circles = [];\r\n    }\r\n}\r\n","import { Board } from '../../models/board';\r\nimport { King } from '../../models/pieces/king';\r\nimport { Pawn } from '../../models/pieces/pawn';\r\nimport { Piece } from '../../models/pieces/piece';\r\nimport { Point } from '../../models/pieces/point';\r\nimport { MoveUtils } from '../../utils/move-utils';\r\nimport { AbstractPgnProcessor } from './abstract-pgn-processor';\r\n\r\nexport class DefaultPgnProcessor extends AbstractPgnProcessor {\r\n\r\n    public process(\r\n        board: Board,\r\n        sourcePiece: Piece,\r\n        destPoint: Point,\r\n        destPiece?: Piece\r\n    ): void {\r\n        this.currentIndex += 0.5;\r\n        this.pgn += (this.currentIndex % Math.floor(this.currentIndex) === 0) ? (' ' + this.currentIndex + '. ') : ' ';\r\n\r\n        let possibleCaptures = [];\r\n        let possibleMoves = [];\r\n\r\n        if (destPiece) {\r\n            possibleCaptures = MoveUtils.findPieceByPossibleCapturesContaining(\r\n                MoveUtils.formatSingle(destPoint, board.reverted),\r\n                board,\r\n                sourcePiece.color\r\n            ).filter(piece => piece.constructor.name === sourcePiece.constructor.name);\r\n        }\r\n        possibleMoves = MoveUtils.findPieceByPossibleMovesContaining(\r\n            MoveUtils.formatSingle(destPoint, board.reverted),\r\n            board,\r\n            sourcePiece.color\r\n        ).filter(piece => piece.constructor.name === sourcePiece.constructor.name);\r\n\r\n        if (sourcePiece instanceof Pawn && !destPiece && possibleCaptures.length === 0) {\r\n            this.pgn += MoveUtils.formatSingle(destPoint, board.reverted);\r\n        } else {\r\n            if (sourcePiece instanceof Pawn && destPiece) {\r\n                this.pgn += MoveUtils.formatSingle(\r\n                    sourcePiece.point,\r\n                    board.reverted\r\n                ).substring(0, 1) + 'x' + MoveUtils.formatSingle(\r\n                    destPoint,\r\n                    board.reverted\r\n                );\r\n            } else {\r\n                if (sourcePiece instanceof King && (Math.abs(sourcePiece.point.col - destPoint.col) === 2)) {\r\n                    if (board.reverted) {\r\n                        this.pgn += destPoint.col < 2\r\n                            ? 'O-O'\r\n                            : 'O-O-O';\r\n                    } else {\r\n                        this.pgn += destPoint.col < 3\r\n                            ? 'O-O-O'\r\n                            : 'O-O';\r\n                    }\r\n                } else {\r\n                    if (!(sourcePiece instanceof Pawn) && possibleCaptures.length === 0 && possibleMoves.length < 2) {     // Nf3\r\n                        this.pgn += MoveUtils.getFirstLetterPiece(sourcePiece) + MoveUtils.formatSingle(\r\n                            destPoint,\r\n                            board.reverted\r\n                        );\r\n                    } else {\r\n                        if (possibleMoves && possibleMoves.length === 2 && possibleCaptures.length === 0) {    // Nbd7\r\n                            if (this.isEqualByCol(\r\n                                possibleMoves[0],\r\n                                possibleMoves[1]\r\n                            )) {\r\n                                this.pgn += MoveUtils.getFirstLetterPiece(\r\n                                    sourcePiece) + MoveUtils.reverse(\r\n                                    board,\r\n                                    sourcePiece.point.row\r\n                                ) + MoveUtils.formatSingle(\r\n                                    destPoint,\r\n                                    board.reverted\r\n                                );\r\n                            } else {\r\n                                this.pgn += MoveUtils.getFirstLetterPiece(\r\n                                    sourcePiece) + MoveUtils.formatCol(\r\n                                    board,\r\n                                    sourcePiece.point.col\r\n                                ) + MoveUtils.formatSingle(\r\n                                    destPoint,\r\n                                    board.reverted\r\n                                );\r\n                            }\r\n                        } else {\r\n                            if (possibleCaptures.length > 1) {\r\n                                if ((this.isEqualByCol(\r\n                                    possibleCaptures[0],\r\n                                    possibleCaptures[1]\r\n                                ))) {\r\n                                    this.pgn += MoveUtils.getFirstLetterPiece(\r\n                                        sourcePiece) + MoveUtils.reverse(\r\n                                        board,\r\n                                        sourcePiece.point.row\r\n                                    ) + 'x' + MoveUtils.formatSingle(\r\n                                        destPoint,\r\n                                        board.reverted\r\n                                    );\r\n                                } else {\r\n                                    this.pgn += MoveUtils.getFirstLetterPiece(\r\n                                        sourcePiece) + MoveUtils.formatCol(\r\n                                        board,\r\n                                        sourcePiece.point.col\r\n                                    ) + 'x' + MoveUtils.formatSingle(\r\n                                        destPoint,\r\n                                        board.reverted\r\n                                    );\r\n                                }\r\n                            } else {\r\n                                this.pgn += MoveUtils.getFirstLetterPiece(\r\n                                    sourcePiece) + 'x' + MoveUtils.formatSingle(\r\n                                    destPoint, board.reverted\r\n                                );\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.pgn = this.pgn.trim();\r\n    }\r\n\r\n    private resolvePieceByFirstChar(move: string, piece: Piece) {\r\n        return MoveUtils.getFirstLetterPiece(piece) === move;\r\n    }\r\n\r\n    private isEqualByCol(aPiece: Piece, bPiece: Piece) {\r\n        return aPiece.point.col === bPiece.point.col;\r\n    }\r\n\r\n}\r\n","import { Board } from '../../models/board';\r\nimport { Piece } from '../../models/pieces/piece';\r\nimport { Point } from '../../models/pieces/point';\r\n\r\nexport abstract class AbstractPgnProcessor {\r\n\r\n    protected pgn = '';\r\n    protected currentIndex = 0.5;\r\n\r\n    public abstract process(\r\n        board: Board,\r\n        sourcePiece: Piece,\r\n        destPoint: Point,\r\n        destPiece?: Piece\r\n    ): void;\r\n\r\n    public getPGN() {\r\n        return this.pgn;\r\n    }\r\n\r\n    processChecks(checkmate: boolean, check: boolean, stalemate: boolean) {\r\n        if (checkmate) {\r\n            this.pgn += '#';\r\n        } else {\r\n            if (check) {\r\n                this.pgn += '+';\r\n            }\r\n        }\r\n    }\r\n\r\n    reset() {\r\n        this.pgn = '';\r\n        this.currentIndex = 0.5;\r\n    }\r\n\r\n    addPromotionChoice(promotion) {\r\n        switch (promotion) {\r\n            case 1:\r\n                this.pgn += '=Q';\r\n                break;\r\n            case 2:\r\n                this.pgn += '=R';\r\n                break;\r\n            case 3:\r\n                this.pgn += '=B';\r\n                break;\r\n            case 4:\r\n                this.pgn += '=N';\r\n                break;\r\n        }\r\n    }\r\n\r\n    removeLast() {\r\n        if(this.currentIndex >= 0.5) {\r\n            this.currentIndex -= 0.5;\r\n            const regex1 = new RegExp( /\\d+\\./g );\r\n            regex1.test(this.pgn);\r\n            this.pgn = this.pgn.substring(0, regex1.lastIndex).trim();\r\n        }\r\n    }\r\n\r\n}\r\n","import { PiecePromotionModalComponent } from '../piece-promotion/piece-promotion-modal/piece-promotion-modal.component';\r\nimport { HistoryMove } from '../history-move-provider/history-move';\r\nimport { HistoryMoveProvider } from '../history-move-provider/history-move-provider';\r\nimport { Board } from '../models/board';\r\nimport { King } from '../models/pieces/king';\r\nimport { Pawn } from '../models/pieces/pawn';\r\nimport { Piece } from '../models/pieces/piece';\r\nimport { Point } from '../models/pieces/point';\r\nimport { Rook } from '../models/pieces/rook';\r\nimport { Constants } from '../utils/constants';\r\nimport { PieceIconInputManager } from '../utils/inputs/piece-icon-input-manager';\r\nimport { ColorInput, PieceTypeInput } from '../utils/inputs/piece-type-input';\r\nimport { BoardLoader } from './board-state-provider/board-loader/board-loader';\r\nimport { CoordsProvider } from './coords/coords-provider';\r\nimport { DragEndStrategy } from './drag/end/drag-end-strategy';\r\nimport { DragStartStrategy } from './drag/start/drag-start-strategy';\r\nimport { ColorStrategy } from './drawing-tools/colors/color-strategy';\r\nimport { DrawProvider } from './drawing-tools/draw-provider';\r\nimport { DefaultPgnProcessor } from './pgn/default-pgn-processor';\r\nimport { AbstractPgnProcessor } from './pgn/abstract-pgn-processor';\r\n\r\nexport abstract class AbstractEngineFacade {\r\n\r\n    public dragStartStrategy: DragStartStrategy = new DragStartStrategy();\r\n    public dragEndStrategy: DragEndStrategy = new DragEndStrategy();\r\n    public pgnProcessor: AbstractPgnProcessor = new DefaultPgnProcessor();\r\n    protected colorStrategy: ColorStrategy = new ColorStrategy();\r\n\r\n    public coords: CoordsProvider = new CoordsProvider();\r\n    public heightAndWidth: number = Constants.DEFAULT_SIZE;\r\n\r\n    public freeMode = false;\r\n    public dragDisabled: boolean;\r\n    public drawDisabled: boolean;\r\n    public lightDisabled: boolean;\r\n    public darkDisabled: boolean;\r\n    public board: Board;\r\n    public modal: PiecePromotionModalComponent;\r\n    public boardLoader: BoardLoader;\r\n    public drawProvider: DrawProvider = new DrawProvider();\r\n    public pieceIconManager: PieceIconInputManager = new PieceIconInputManager();\r\n    public moveHistoryProvider: HistoryMoveProvider = new HistoryMoveProvider();\r\n    public moveDone: boolean;\r\n    public disabling = false;\r\n\r\n    protected constructor(board: Board) {\r\n        this.board = board;\r\n    }\r\n\r\n    public abstract reset(): void;\r\n\r\n    public abstract undo(): void;\r\n\r\n    public abstract move(coords: string): void;\r\n\r\n    public abstract addPiece(\r\n        pieceTypeInput: PieceTypeInput,\r\n        colorInput: ColorInput,\r\n        coords: string\r\n    ): void;\r\n\r\n    public abstract onMouseUp(\r\n        event: MouseEvent,\r\n        pointClicked: Point,\r\n        left: number,\r\n        top: number\r\n    ): void;\r\n\r\n    public abstract onMouseDown(\r\n        event: MouseEvent,\r\n        pointClicked: Point,\r\n        left?: number,\r\n        top?: number\r\n    ): void;\r\n\r\n    public checkIfPawnFirstMove(piece: Piece) {\r\n        if (piece instanceof Pawn) {\r\n            piece.isMovedAlready = true;\r\n        }\r\n    }\r\n\r\n    public checkIfRookMoved(piece: Piece) {\r\n        if (piece instanceof Rook) {\r\n            piece.isMovedAlready = true;\r\n        }\r\n    }\r\n\r\n    public checkIfKingMoved(piece: Piece) {\r\n        if (piece instanceof King) {\r\n            piece.isMovedAlready = true;\r\n        }\r\n    }\r\n\r\n    public getMoveHistory(): HistoryMove[] {\r\n        return this.moveHistoryProvider.getAll();\r\n    }\r\n\r\n}\r\n","import { Board } from '../../../models/board';\r\nimport { Bishop } from '../../../models/pieces/bishop';\r\nimport { Color } from '../../../models/pieces/color';\r\nimport { King } from '../../../models/pieces/king';\r\nimport { Knight } from '../../../models/pieces/knight';\r\nimport { Pawn } from '../../../models/pieces/pawn';\r\nimport { Point } from '../../../models/pieces/point';\r\nimport { Queen } from '../../../models/pieces/queen';\r\nimport { Rook } from '../../../models/pieces/rook';\r\nimport { UnicodeConstants } from '../../../utils/unicode-constants';\r\nimport { AbstractEngineFacade } from '../../abstract-engine-facade';\r\nimport { DefaultPiecesLoader } from './default-pieces-loader';\r\nimport { NotationProcessor } from './notation-processors/notation-processor';\r\nimport { NotationProcessorFactory } from './notation-processors/notation-processor-factory';\r\n\r\nexport class BoardLoader {\r\n\r\n    private engineFacade: AbstractEngineFacade;\r\n    private notationProcessor: NotationProcessor;\r\n\r\n    constructor(engineFacade: AbstractEngineFacade, notationProcessor?: NotationProcessor) {\r\n        this.engineFacade = engineFacade;\r\n\r\n        if (notationProcessor) {\r\n            this.notationProcessor = notationProcessor;\r\n        } else {\r\n            this.notationProcessor = NotationProcessorFactory.getDefaultProcessor();\r\n        }\r\n\r\n    }\r\n\r\n    addPieces() {\r\n        DefaultPiecesLoader.loadDefaultPieces(this.engineFacade.board);\r\n    }\r\n\r\n    loadFEN(fen: string) {\r\n        this.notationProcessor.process(fen, this.engineFacade);\r\n    }\r\n\r\n    loadPGN(pgn: string) {\r\n        this.notationProcessor.process(pgn, this.engineFacade)\r\n    }\r\n\r\n    setEngineFacade(engineFacade: AbstractEngineFacade) {\r\n        this.engineFacade = engineFacade;\r\n    }\r\n\r\n    setNotationProcessor(notationProcessor: NotationProcessor) {\r\n        this.notationProcessor = notationProcessor;\r\n    }\r\n\r\n}\r\n","import { Board } from '../../../models/board';\r\n\r\nexport class BoardState {\r\n\r\n    board: Board;\r\n\r\n    constructor(board: Board) {\r\n        this.board = board;\r\n    }\r\n\r\n}\r\n","import { BehaviorSubject } from 'rxjs';\r\nimport { BoardState } from './board-state';\r\n\r\nexport class BoardStateProvider {\r\n    statesSubject$ = new BehaviorSubject<BoardState[]>([]);\r\n\r\n    get states(): BoardState[] {\r\n        return this.statesSubject$.value;\r\n    }\r\n\r\n    set states(states: BoardState[]) {\r\n        this.statesSubject$.next(states);\r\n    }\r\n\r\n    addMove(state: BoardState) {\r\n        this.states = [...this.states, state];\r\n    }\r\n\r\n    getStates(): BoardState[] {\r\n        return this.states;\r\n    }\r\n\r\n    pop(): BoardState {\r\n        const lastState = this.getLastState();\r\n        this.states = this.states.filter((state) => state !== lastState);\r\n        return lastState;\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.states.length === 0;\r\n    }\r\n\r\n    clear() {\r\n        this.states = [];\r\n    }\r\n\r\n    getLastState() {\r\n        return this.states[this.getLastStateIndex()];\r\n    }\r\n\r\n    getLastStateIndex(): number {\r\n        return this.states.length - 1;\r\n    }\r\n}\r\n","import { DrawPoint } from '../draw-point';\r\n\r\nexport class Arrow {\r\n    start: DrawPoint;\r\n    end: DrawPoint;\r\n\r\n    isEqual(arrow: Arrow) {\r\n        return arrow && this.start.isEqual(arrow.start) && this.end.isEqual(arrow.end);\r\n    }\r\n}\r\n","import { DrawPoint } from '../draw-point';\r\n\r\nexport class Circle {\r\n    drawPoint: DrawPoint;\r\n\r\n    isEqual(circle: Circle) {\r\n        return circle && this.drawPoint.isEqual(circle.drawPoint);\r\n    }\r\n}\r\n","import { Board } from '../../models/board';\r\nimport { Color } from '../../models/pieces/color';\r\nimport { Point } from '../../models/pieces/point';\r\nimport { MoveUtils } from '../../utils/move-utils';\r\nimport { AbstractPiece } from './abstract-piece';\r\nimport { PieceAbstractDecorator } from './piece-abstract-decorator';\r\n\r\nexport class AvailableMoveDecorator extends PieceAbstractDecorator {\r\n    private pointClicked: Point;\r\n    private color: Color;\r\n    private board: Board;\r\n\r\n    constructor(piece: AbstractPiece, pointClicked: Point, color: Color, board: Board) {\r\n        super(piece);\r\n        this.pointClicked = pointClicked;\r\n        this.color = color;\r\n        this.board = board;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        return this.piece\r\n            .getPossibleCaptures()\r\n            .filter(\r\n                (point) =>\r\n                    !MoveUtils.willMoveCauseCheck(\r\n                        this.color,\r\n                        this.pointClicked.row,\r\n                        this.pointClicked.col,\r\n                        point.row,\r\n                        point.col,\r\n                        this.board\r\n                    )\r\n            );\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        return this.piece\r\n            .getPossibleMoves()\r\n            .filter(\r\n                (point) =>\r\n                    !MoveUtils.willMoveCauseCheck(\r\n                        this.color,\r\n                        this.pointClicked.row,\r\n                        this.pointClicked.col,\r\n                        point.row,\r\n                        point.col,\r\n                        this.board\r\n                    )\r\n            );\r\n    }\r\n}\r\n","import { Point } from '../../models/pieces/point';\r\nimport { AbstractPiece } from './abstract-piece';\r\n\r\nexport abstract class PieceAbstractDecorator implements AbstractPiece {\r\n\r\n    piece: AbstractPiece;\r\n\r\n    protected constructor(piece: AbstractPiece) {\r\n        this.piece = piece;\r\n    }\r\n\r\n    abstract getPossibleCaptures(): Point[];\r\n\r\n    abstract getPossibleMoves(): Point[];\r\n\r\n}\r\n","import { Board } from '../models/board';\r\nimport { Bishop } from '../models/pieces/bishop';\r\nimport { Color } from '../models/pieces/color';\r\nimport { Knight } from '../models/pieces/knight';\r\nimport { Piece } from '../models/pieces/piece';\r\nimport { Queen } from '../models/pieces/queen';\r\nimport { Rook } from '../models/pieces/rook';\r\nimport { UnicodeConstants } from '../utils/unicode-constants';\r\n\r\nexport class PiecePromotionResolver {\r\n\r\n    static resolvePromotionChoice(board: Board, piece: Piece, index: number) {\r\n        const isWhite = piece.color === Color.WHITE;\r\n        switch (index) {\r\n            case 1:\r\n                board.pieces.push(\r\n                    new Queen(\r\n                        piece.point,\r\n                        piece.color,\r\n                        isWhite\r\n                            ? UnicodeConstants.WHITE_QUEEN\r\n                            : UnicodeConstants.BLACK_QUEEN,\r\n                        board\r\n                    )\r\n                );\r\n                break;\r\n            case 2:\r\n                board.pieces.push(\r\n                    new Rook(\r\n                        piece.point,\r\n                        piece.color,\r\n                        isWhite\r\n                            ? UnicodeConstants.WHITE_ROOK\r\n                            : UnicodeConstants.BLACK_ROOK,\r\n                        board\r\n                    )\r\n                );\r\n                break;\r\n            case 3:\r\n                board.pieces.push(\r\n                    new Bishop(\r\n                        piece.point,\r\n                        piece.color,\r\n                        isWhite\r\n                            ? UnicodeConstants.WHITE_BISHOP\r\n                            : UnicodeConstants.BLACK_BISHOP,\r\n                        board\r\n                    )\r\n                );\r\n                break;\r\n            case 4:\r\n                board.pieces.push(\r\n                    new Knight(\r\n                        piece.point,\r\n                        piece.color,\r\n                        isWhite\r\n                            ? UnicodeConstants.WHITE_KNIGHT\r\n                            : UnicodeConstants.BLACK_KNIGHT,\r\n                        board\r\n                    )\r\n                );\r\n                break;\r\n        }\r\n    }\r\n\r\n}\r\n","import { Board } from '../../models/board';\r\nimport { MoveTranslation } from '../../models/move-translation';\r\nimport { Bishop } from '../../models/pieces/bishop';\r\nimport { Color } from '../../models/pieces/color';\r\nimport { King } from '../../models/pieces/king';\r\nimport { Knight } from '../../models/pieces/knight';\r\nimport { Pawn } from '../../models/pieces/pawn';\r\nimport { Piece } from '../../models/pieces/piece';\r\nimport { Point } from '../../models/pieces/point';\r\nimport { Queen } from '../../models/pieces/queen';\r\nimport { Rook } from '../../models/pieces/rook';\r\nimport {\r\n    ColorInput,\r\n    PieceTypeInput\r\n} from '../../utils/inputs/piece-type-input';\r\nimport { UnicodeConstants } from '../../utils/unicode-constants';\r\n\r\nexport class PieceFactory {\r\n\r\n    static create(\r\n        indexes: MoveTranslation,\r\n        pieceTypeInput: PieceTypeInput,\r\n        colorInput: ColorInput,\r\n        board: Board\r\n    ): Piece {\r\n        let piece;\r\n        let color = colorInput === ColorInput.LIGHT\r\n            ? Color.WHITE\r\n            : Color.BLACK;\r\n\r\n        switch (pieceTypeInput) {\r\n            case PieceTypeInput.QUEEN:\r\n                piece = new Queen(\r\n                    new Point(indexes.yAxis, indexes.xAxis),\r\n                    color,\r\n                    color === Color.WHITE ? UnicodeConstants.WHITE_QUEEN : UnicodeConstants.BLACK_QUEEN,\r\n                    board\r\n                );\r\n                break;\r\n            case PieceTypeInput.KING:\r\n                piece = new King(\r\n                    new Point(indexes.yAxis, indexes.xAxis),\r\n                    color,\r\n                    color === Color.WHITE ? UnicodeConstants.WHITE_KING : UnicodeConstants.BLACK_KING,\r\n                    board\r\n                );\r\n\r\n                break;\r\n            case PieceTypeInput.KNIGHT:\r\n                piece = new Knight(\r\n                    new Point(indexes.yAxis, indexes.xAxis),\r\n                    color,\r\n                    color === Color.WHITE ? UnicodeConstants.WHITE_KNIGHT : UnicodeConstants.BLACK_KNIGHT,\r\n                    board\r\n                );\r\n                break;\r\n            case PieceTypeInput.BISHOP:\r\n                piece = new Bishop(\r\n                    new Point(indexes.yAxis, indexes.xAxis),\r\n                    color,\r\n                    color === Color.WHITE ? UnicodeConstants.WHITE_BISHOP : UnicodeConstants.BLACK_BISHOP,\r\n                    board\r\n                );\r\n                break;\r\n            case PieceTypeInput.ROOK:\r\n                piece = new Rook(\r\n                    new Point(indexes.yAxis, indexes.xAxis),\r\n                    color,\r\n                    color === Color.WHITE ? UnicodeConstants.WHITE_ROOK : UnicodeConstants.BLACK_ROOK,\r\n                    board\r\n                );\r\n                break;\r\n            case PieceTypeInput.PAWN:\r\n                piece = new Pawn(\r\n                    new Point(indexes.yAxis, indexes.xAxis),\r\n                    color,\r\n                    color === Color.WHITE ? UnicodeConstants.WHITE_PAWN : UnicodeConstants.BLACK_PAWN,\r\n                    board\r\n                );\r\n                break;\r\n        }\r\n\r\n        return piece;\r\n    }\r\n}\r\n","import { EventEmitter } from '@angular/core';\nimport { HistoryMove } from '../history-move-provider/history-move';\nimport { ColorInput, PieceTypeInput } from '../utils/inputs/piece-type-input';\nimport { AbstractEngineFacade } from './abstract-engine-facade';\n\nimport { BoardLoader } from './board-state-provider/board-loader/board-loader';\nimport { BoardState } from './board-state-provider/board-state/board-state';\nimport { BoardStateProvider } from './board-state-provider/board-state/board-state-provider';\nimport { MoveStateProvider } from './board-state-provider/board-state/move-state-provider';\nimport { ClickUtils } from './click/click-utils';\nimport { Arrow } from './drawing-tools/shapes/arrow';\nimport { Circle } from './drawing-tools/shapes/circle';\nimport { DrawPoint } from './drawing-tools/draw-point';\nimport { DrawProvider } from './drawing-tools/draw-provider';\nimport { Board } from '../models/board';\nimport { Color } from '../models/pieces/color';\nimport { King } from '../models/pieces/king';\nimport { Pawn } from '../models/pieces/pawn';\nimport { Piece } from '../models/pieces/piece';\nimport { Point } from '../models/pieces/point';\nimport { DefaultPgnProcessor } from './pgn/default-pgn-processor';\nimport { AvailableMoveDecorator } from './piece-decorator/available-move-decorator';\nimport { PiecePromotionResolver } from '../piece-promotion/piece-promotion-resolver';\nimport { MoveUtils } from '../utils/move-utils';\nimport { MoveChange } from './outputs/move-change/move-change';\nimport { PieceFactory } from './utils/piece-factory';\n\nexport class EngineFacade extends AbstractEngineFacade {\n\n    _selected = false;\n    drawPoint: DrawPoint;\n    drawProvider: DrawProvider;\n    boardStateProvider: BoardStateProvider;\n    moveStateProvider: MoveStateProvider;\n    moveChange: EventEmitter<MoveChange>;\n\n    private historyMoveCandidate: HistoryMove;\n\n    constructor(\n        board: Board,\n        moveChange: EventEmitter<MoveChange>\n    ) {\n        super(board);\n        this.moveChange = moveChange;\n        this.boardLoader = new BoardLoader(this);\n        this.boardLoader.addPieces();\n        this.boardStateProvider = new BoardStateProvider();\n    }\n\n    public reset(): void {\n        this.boardStateProvider.clear();\n        this.moveHistoryProvider.clear();\n        this.boardLoader.addPieces();\n        this.board.reset();\n        this.coords.reset();\n        this.drawProvider.clear();\n        this.pgnProcessor.reset();\n    }\n\n    public undo(): void {\n        if (!this.boardStateProvider.isEmpty()) {\n            const lastBoard = this.boardStateProvider.pop().board;\n            if (this.board.reverted) {\n                lastBoard.reverse();\n            }\n            this.board = lastBoard;\n            this.board.possibleCaptures = [];\n            this.board.possibleMoves = [];\n            this.board.activePiece = null;\n            this.moveHistoryProvider.pop();\n            this.board.calculateFEN();\n            this.pgnProcessor.removeLast();\n        }\n    }\n\n    saveMoveClone() {\n        const clone = this.board.clone();\n\n        if (this.board.reverted) {\n            clone.reverse();\n        }\n        this.moveStateProvider.addMove(new BoardState(clone));\n    }\n\n    public move(coords: string) {\n        if (coords) {\n            const sourceIndexes = MoveUtils.translateCoordsToIndex(\n                coords.substring(0, 2),\n                this.board.reverted\n            );\n\n            const destIndexes = MoveUtils.translateCoordsToIndex(\n                coords.substring(2, 4),\n                this.board.reverted\n            );\n\n            const srcPiece = this.board.getPieceByPoint(\n                sourceIndexes.yAxis,\n                sourceIndexes.xAxis\n            );\n\n            if (srcPiece) {\n                if (\n                    (this.board.currentWhitePlayer &&\n                        srcPiece.color === Color.BLACK) ||\n                    (!this.board.currentWhitePlayer &&\n                        srcPiece.color === Color.WHITE)\n                ) {\n                    return;\n                }\n\n                this.prepareActivePiece(srcPiece, srcPiece.point);\n\n                if (\n                    this.board.isPointInPossibleMoves(\n                        new Point(destIndexes.yAxis, destIndexes.xAxis)\n                    ) ||\n                    this.board.isPointInPossibleCaptures(\n                        new Point(destIndexes.yAxis, destIndexes.xAxis)\n                    )\n                ) {\n                    this.saveClone();\n                    this.movePiece(\n                        srcPiece,\n                        new Point(destIndexes.yAxis, destIndexes.xAxis),\n                        coords.length === 5 ? +coords.substring(4, 5) : 0\n                    );\n\n                    this.board.lastMoveSrc = new Point(\n                        sourceIndexes.yAxis,\n                        sourceIndexes.xAxis\n                    );\n                    this.board.lastMoveDest = new Point(\n                        destIndexes.yAxis,\n                        destIndexes.xAxis\n                    );\n\n                    this.disableSelection();\n                } else {\n                    this.disableSelection();\n                }\n            }\n        }\n\n    }\n\n    prepareActivePiece(pieceClicked: Piece, pointClicked: Point) {\n        this.board.activePiece = pieceClicked;\n        this._selected = true;\n        this.board.possibleCaptures = new AvailableMoveDecorator(\n            pieceClicked,\n            pointClicked,\n            this.board.currentWhitePlayer ? Color.WHITE : Color.BLACK,\n            this.board\n        ).getPossibleCaptures();\n        this.board.possibleMoves = new AvailableMoveDecorator(\n            pieceClicked,\n            pointClicked,\n            this.board.currentWhitePlayer ? Color.WHITE : Color.BLACK,\n            this.board\n        ).getPossibleMoves();\n    }\n\n    onPieceClicked(pieceClicked, pointClicked) {\n        if (\n            (this.board.currentWhitePlayer && pieceClicked.color === Color.BLACK) ||\n            (!this.board.currentWhitePlayer && pieceClicked.color === Color.WHITE)\n        ) {\n            return;\n        }\n\n        this.prepareActivePiece(pieceClicked, pointClicked);\n    }\n\n    public handleClickEvent(pointClicked: Point, isMouseDown: boolean) {\n        let moving = false;\n        if (((\n            this.board.isPointInPossibleMoves(pointClicked) ||\n            this.board.isPointInPossibleCaptures(pointClicked)\n        ) || this.freeMode) && pointClicked.isInRange()) {\n            this.saveClone();\n            this.board.lastMoveSrc = new Point(\n                this.board.activePiece.point.row,\n                this.board.activePiece.point.col\n            );\n            this.board.lastMoveDest = pointClicked.clone();\n            this.movePiece(this.board.activePiece, pointClicked);\n\n            if (!this.board.activePiece.point.isEqual(this.board.lastMoveSrc)) {\n                moving = true;\n            }\n        }\n\n        if (isMouseDown || moving) {\n            this.disableSelection();\n        }\n        this.disableSelection();\n        const pieceClicked = this.board.getPieceByPoint(\n            pointClicked.row,\n            pointClicked.col\n        );\n        if (pieceClicked && !moving) {\n            this.onFreeMode(pieceClicked);\n            this.onPieceClicked(pieceClicked, pointClicked);\n        }\n    }\n\n    onMouseDown(\n        event: MouseEvent,\n        pointClicked: Point,\n        left?: number,\n        top?: number\n    ) {\n        this.moveDone = false;\n        if (event.button !== 0) {\n            this.drawPoint = ClickUtils.getDrawingPoint(\n                this.heightAndWidth,\n                this.colorStrategy,\n                event.x,\n                event.y,\n                event.ctrlKey,\n                event.altKey,\n                event.shiftKey,\n                left,\n                top\n            );\n            return;\n        }\n\n        this.drawProvider.clear();\n\n        if (\n            this.board.activePiece &&\n            pointClicked.isEqual(this.board.activePiece.point)\n        ) {\n            this.disabling = true;\n            return;\n        }\n\n        const pieceClicked = this.board.getPieceByPoint(\n            pointClicked.row,\n            pointClicked.col\n        );\n\n        if (this.freeMode) {\n            if (pieceClicked) {\n                if (event.ctrlKey) {\n                    this.board.pieces = this.board.pieces.filter(e => e !== pieceClicked);\n                    return;\n                }\n                this.board.currentWhitePlayer = (pieceClicked.color === Color.WHITE);\n            }\n        }\n\n        if (this.isPieceDisabled(pieceClicked)) {\n            return;\n        }\n\n        if (this._selected) {\n            this.handleClickEvent(pointClicked, true);\n        } else {\n            if (pieceClicked) {\n                this.onFreeMode(pieceClicked);\n                this.onPieceClicked(pieceClicked, pointClicked);\n            }\n        }\n    }\n\n    onMouseUp(\n        event: MouseEvent,\n        pointClicked: Point,\n        left: number,\n        top: number\n    ) {\n        this.moveDone = false;\n        if (event.button !== 0 && !this.drawDisabled) {\n            this.addDrawPoint(\n                event.x,\n                event.y,\n                event.ctrlKey,\n                event.altKey,\n                event.shiftKey,\n                left, top\n            );\n            return;\n        }\n\n        this.drawProvider.clear();\n\n        if (this.dragDisabled) {\n            return;\n        }\n\n        if (\n            this.board.activePiece &&\n            pointClicked.isEqual(this.board.activePiece.point) &&\n            this.disabling\n        ) {\n            this.disableSelection();\n            this.disabling = false;\n            return;\n        }\n        const pieceClicked = this.board.getPieceByPoint(\n            pointClicked.row,\n            pointClicked.col\n        );\n\n        if (this.isPieceDisabled(pieceClicked)) {\n            return;\n        }\n\n        if (this._selected) {\n            this.handleClickEvent(pointClicked, false);\n            //   this.possibleMoves = activePiece.getPossibleMoves();\n        }\n    }\n\n    saveClone() {\n        const clone = this.board.clone();\n\n        if (this.board.reverted) {\n            clone.reverse();\n        }\n        this.boardStateProvider.addMove(new BoardState(clone));\n    }\n\n    movePiece(toMovePiece: Piece, newPoint: Point, promotionIndex?: number) {\n        const destPiece = this.board.pieces.find(\n            (piece) =>\n                piece.point.col === newPoint.col &&\n                piece.point.row === newPoint.row\n        );\n\n        this.pgnProcessor.process(\n            this.board,\n            toMovePiece,\n            newPoint,\n            destPiece\n        );\n\n        if (destPiece && toMovePiece.color !== destPiece.color) {\n            this.board.pieces = this.board.pieces.filter(\n                (piece) => piece !== destPiece\n            );\n        } else {\n            if (destPiece && toMovePiece.color === destPiece.color) {\n                return;\n            }\n        }\n\n        this.historyMoveCandidate = new HistoryMove(\n            MoveUtils.format(toMovePiece.point, newPoint, this.board.reverted),\n            toMovePiece.constant.name,\n            toMovePiece.color === Color.WHITE ? 'white' : 'black',\n            !!destPiece\n        );\n        this.moveHistoryProvider.addMove(this.historyMoveCandidate);\n\n        if (toMovePiece instanceof King) {\n            const squaresMoved = Math.abs(newPoint.col - toMovePiece.point.col);\n            if (squaresMoved > 1) {\n                if (newPoint.col < 3) {\n                    const leftRook = this.board.getPieceByField(\n                        toMovePiece.point.row,\n                        0\n                    );\n                    if (!this.freeMode) {\n                        leftRook.point.col = this.board.reverted ? 2 : 3;\n                    }\n                } else {\n                    const rightRook = this.board.getPieceByField(\n                        toMovePiece.point.row,\n                        7\n                    );\n                    if (!this.freeMode) {\n                        rightRook.point.col = this.board.reverted ? 4 : 5;\n                    }\n                }\n            }\n        }\n\n        if (toMovePiece instanceof Pawn) {\n            this.board.checkIfPawnTakesEnPassant(newPoint);\n            this.board.checkIfPawnEnpassanted(toMovePiece, newPoint);\n        } else {\n            this.board.enPassantPoint = null;\n            this.board.enPassantPiece = null;\n        }\n\n        toMovePiece.point = newPoint;\n        this.increaseFullMoveCount();\n        this.board.currentWhitePlayer = !this.board.currentWhitePlayer;\n\n        if (!this.checkForPawnPromote(toMovePiece, promotionIndex)) {\n            this.afterMoveActions();\n        }\n    }\n\n    checkForPawnPromote(toPromotePiece: Piece, promotionIndex?: number) {\n        if (!(toPromotePiece instanceof Pawn)) {\n            return;\n        }\n\n        if (toPromotePiece.point.row === 0 || toPromotePiece.point.row === 7) {\n            this.board.pieces = this.board.pieces.filter(\n                (piece) => piece !== toPromotePiece\n            );\n\n            // When we make move manually, we pass promotion index already, so we don't need\n            // to acquire it from promote dialog\n            if (!promotionIndex) {\n                this.openPromoteDialog(toPromotePiece);\n            } else {\n                PiecePromotionResolver.resolvePromotionChoice(\n                    this.board,\n                    toPromotePiece,\n                    promotionIndex\n                );\n                this.afterMoveActions(promotionIndex);\n            }\n\n            return true;\n        }\n    }\n\n    afterMoveActions(promotionIndex?: number) {\n        this.checkIfPawnFirstMove(this.board.activePiece);\n        this.checkIfRookMoved(this.board.activePiece);\n        this.checkIfKingMoved(this.board.activePiece);\n\n        this.board.blackKingChecked = this.board.isKingInCheck(\n            Color.BLACK,\n            this.board.pieces\n        );\n        this.board.whiteKingChecked = this.board.isKingInCheck(\n            Color.WHITE,\n            this.board.pieces\n        );\n        const check =\n            this.board.blackKingChecked || this.board.whiteKingChecked;\n        const checkmate =\n            this.checkForPossibleMoves(Color.BLACK) ||\n            this.checkForPossibleMoves(Color.WHITE);\n        const stalemate =\n            this.checkForPat(Color.BLACK) || this.checkForPat(Color.WHITE);\n\n        this.historyMoveCandidate?.setGameStates(check, stalemate, checkmate);\n        this.pgnProcessor.processChecks(checkmate, check, stalemate);\n        this.pgnProcessor.addPromotionChoice(promotionIndex);\n\n        this.disabling = false;\n        this.board.calculateFEN();\n\n        const lastMove = this.moveHistoryProvider.getLastMove();\n        if (lastMove && promotionIndex) {\n            lastMove.move += promotionIndex;\n        }\n\n        this.moveChange.emit({\n            ...lastMove,\n            check,\n            checkmate,\n            stalemate,\n            fen: this.board.fen,\n            pgn: {\n                pgn: this.pgnProcessor.getPGN()\n            },\n            freeMode: this.freeMode\n        });\n\n        this.moveDone = true;\n    }\n\n    checkForPat(color: Color) {\n        if (color === Color.WHITE && !this.board.whiteKingChecked) {\n            return this.checkForPossibleMoves(color);\n        } else {\n            if (color === Color.BLACK && !this.board.blackKingChecked) {\n                return this.checkForPossibleMoves(color);\n            }\n        }\n    }\n\n    openPromoteDialog(piece: Piece) {\n        if (piece.color === this.board.activePiece.color) {\n            this.modal.open((index) => {\n                PiecePromotionResolver.resolvePromotionChoice(\n                    this.board,\n                    piece,\n                    index\n                );\n                this.afterMoveActions(index);\n            });\n        }\n    }\n\n    checkForPossibleMoves(color: Color): boolean {\n        return !this.board.pieces\n            .filter((piece) => piece.color === color)\n            .some(\n                (piece) =>\n                    piece\n                        .getPossibleMoves()\n                        .some(\n                            (move) =>\n                                !MoveUtils.willMoveCauseCheck(\n                                    color,\n                                    piece.point.row,\n                                    piece.point.col,\n                                    move.row,\n                                    move.col,\n                                    this.board\n                                )\n                        ) ||\n                    piece\n                        .getPossibleCaptures()\n                        .some(\n                            (capture) =>\n                                !MoveUtils.willMoveCauseCheck(\n                                    color,\n                                    piece.point.row,\n                                    piece.point.col,\n                                    capture.row,\n                                    capture.col,\n                                    this.board\n                                )\n                        )\n            );\n    }\n\n    disableSelection() {\n        this._selected = false;\n        this.board.possibleCaptures = [];\n        this.board.activePiece = null;\n        this.board.possibleMoves = [];\n    }\n\n    /**\n     * Processes logic to allow freeMode based logic processing\n     */\n    onFreeMode(pieceClicked) {\n        if (\n            !this.freeMode ||\n            pieceClicked === undefined ||\n            pieceClicked === null\n        ) {\n            return;\n        }\n        // sets player as white in-case white pieces are selected, and vice-versa when black is selected\n        this.board.currentWhitePlayer = pieceClicked.color === Color.WHITE;\n    }\n\n    isPieceDisabled(pieceClicked: Piece) {\n        if (pieceClicked && pieceClicked.point) {\n            const foundCapture = this.board.possibleCaptures.find(\n                (capture) =>\n                    capture.col === pieceClicked.point.col &&\n                    capture.row === pieceClicked.point.row\n            );\n\n            if (foundCapture) {\n                return false;\n            }\n        }\n        return (\n            pieceClicked &&\n            ((this.lightDisabled && pieceClicked.color === Color.WHITE) ||\n                (this.darkDisabled && pieceClicked.color === Color.BLACK))\n        );\n    }\n\n    addDrawPoint(\n        x: number,\n        y: number,\n        crtl: boolean,\n        alt: boolean,\n        shift: boolean,\n        left: number,\n        top: number\n    ) {\n        const upPoint = ClickUtils.getDrawingPoint(\n            this.heightAndWidth,\n            this.colorStrategy,\n            x,\n            y,\n            crtl,\n            alt,\n            shift,\n            left,\n            top\n        );\n\n        if (this.drawPoint.isEqual(upPoint)) {\n            const circle = new Circle();\n            circle.drawPoint = upPoint;\n            if (!this.drawProvider.containsCircle(circle)) {\n                this.drawProvider.addCircle(circle);\n            } else {\n                this.drawProvider.reomveCircle(circle);\n            }\n        } else {\n            const arrow = new Arrow();\n            arrow.start = this.drawPoint;\n            arrow.end = upPoint;\n\n            if (!this.drawProvider.containsArrow(arrow)) {\n                this.drawProvider.addArrow(arrow);\n            } else {\n                this.drawProvider.removeArrow(arrow);\n            }\n        }\n    }\n\n    increaseFullMoveCount() {\n        if (!this.board.currentWhitePlayer) {\n            ++this.board.fullMoveCount;\n        }\n    }\n\n    addPiece(\n        pieceTypeInput: PieceTypeInput,\n        colorInput: ColorInput,\n        coords: string\n    ) {\n        if (this.freeMode && coords && pieceTypeInput > 0 && colorInput > 0) {\n            let indexes = MoveUtils.translateCoordsToIndex(\n                coords,\n                this.board.reverted\n            );\n            let existing = this.board.getPieceByPoint(\n                indexes.yAxis,\n                indexes.xAxis\n            );\n            if (existing) {\n                this.board.pieces = this.board.pieces.filter(e => e !== existing);\n            }\n            let createdPiece = PieceFactory.create(\n                indexes,\n                pieceTypeInput,\n                colorInput,\n                this.board\n            );\n            this.saveClone();\n            this.board.pieces.push(createdPiece);\n            this.afterMoveActions();\n        }\n    }\n}\n","import { cloneDeep } from 'lodash';\r\nimport { Bishop } from './pieces/bishop';\r\nimport { Color } from './pieces/color';\r\nimport { King } from './pieces/king';\r\nimport { Knight } from './pieces/knight';\r\nimport { Pawn } from './pieces/pawn';\r\nimport { Piece } from './pieces/piece';\r\nimport { Point } from './pieces/point';\r\nimport { Queen } from './pieces/queen';\r\nimport { Rook } from './pieces/rook';\r\n\r\nexport class Board {\r\n    board: number[][] = [];\r\n    pieces: Piece[] = [];\r\n\r\n    enPassantPoint: Point = null;\r\n    enPassantPiece: Piece = null;\r\n    lastMoveSrc: Point = null;\r\n    lastMoveDest: Point = null;\r\n    activePiece: Piece;\r\n\r\n    blackKingChecked: boolean;\r\n    possibleCaptures: any[] = [];\r\n    possibleMoves: Point[] = [];\r\n    whiteKingChecked: boolean;\r\n\r\n    currentWhitePlayer = true;\r\n    reverted = false;\r\n    fullMoveCount = 1;\r\n    fen: string;\r\n\r\n    constructor() {\r\n        for (let i = 0; i < 8; ++i) {\r\n            this.board[i] = [];\r\n            for (let j = 0; j < 8; ++j) {\r\n                this.board[i][j] = 0;\r\n            }\r\n        }\r\n    }\r\n\r\n    isXYInPossibleMoves(row: number, col: number): boolean {\r\n        return this.possibleMoves.some((move) => move.row === row && move.col === col);\r\n    }\r\n\r\n    isXYInPossibleCaptures(row: number, col: number): boolean {\r\n        return this.possibleCaptures.some((capture) => capture.row === row && capture.col === col);\r\n    }\r\n\r\n    isXYInSourceMove(i: number, j: number) {\r\n        return this.lastMoveSrc && this.lastMoveSrc.row === i && this.lastMoveSrc.col === j;\r\n    }\r\n\r\n    isXYInDestMove(i: number, j: number) {\r\n        return this.lastMoveDest && this.lastMoveDest.row === i && this.lastMoveDest.col === j;\r\n    }\r\n\r\n    isXYInActiveMove(i: number, j: number) {\r\n        return this.activePiece && this.activePiece.point.row === i && this.activePiece.point.col === j;\r\n    }\r\n\r\n    isPointInPossibleMoves(point: Point): boolean {\r\n        return this.possibleMoves.some((move) => move.row === point.row && move.col === point.col);\r\n    }\r\n\r\n    isPointInPossibleCaptures(point: Point): boolean {\r\n        return this.possibleCaptures.some((capture) => capture.row === point.row && capture.col === point.col);\r\n    }\r\n\r\n    reset() {\r\n        this.lastMoveDest = null;\r\n        this.lastMoveSrc = null;\r\n        this.whiteKingChecked = false;\r\n        this.blackKingChecked = false;\r\n        this.possibleCaptures = [];\r\n        this.possibleMoves = [];\r\n        this.activePiece = null;\r\n        this.reverted = false;\r\n        this.currentWhitePlayer = true;\r\n        this.enPassantPoint = null;\r\n        this.enPassantPiece = null;\r\n        this.fullMoveCount = 1;\r\n        this.calculateFEN();\r\n    }\r\n\r\n        reverse() {\r\n        this.reverted = !this.reverted;\r\n        this.activePiece = null;\r\n        this.possibleMoves = [];\r\n        this.possibleCaptures = [];\r\n\r\n        this.pieces.forEach((piece: Piece) => this.reversePoint(piece.point));\r\n\r\n        this.reversePoint(this.lastMoveSrc);\r\n        this.reversePoint(this.lastMoveDest);\r\n\r\n        if (this.enPassantPoint && this.enPassantPiece) {\r\n            this.reversePoint(this.enPassantPoint);\r\n        }\r\n    }\r\n\r\n    clone(): Board {\r\n        return cloneDeep(this);\r\n    }\r\n\r\n    isFieldTakenByEnemy(row: number, col: number, enemyColor: Color): boolean {\r\n        if (row > 7 || row < 0 || col > 7 || col < 0) {\r\n            return false;\r\n        }\r\n        return this.pieces.some(\r\n            (piece) => piece.point.col === col && piece.point.row === row && piece.color === enemyColor\r\n        );\r\n    }\r\n\r\n    isFieldEmpty(row: number, col: number): boolean {\r\n        if (row > 7 || row < 0 || col > 7 || col < 0) {\r\n            return false;\r\n        }\r\n        return !this.pieces.some((piece) => piece.point.col === col && piece.point.row === row);\r\n    }\r\n\r\n    isFieldUnderAttack(row: number, col: number, color: Color) {\r\n        return this.pieces\r\n            .filter((piece) => piece.color === color)\r\n            .some((piece) => piece.getCoveredFields().some((field) => field.col === col && field.row === row));\r\n    }\r\n\r\n    getPieceByField(row: number, col: number): Piece {\r\n        if (this.isFieldEmpty(row, col)) {\r\n            //   throw new Error('Piece not found');\r\n            return undefined;\r\n        }\r\n\r\n        return this.pieces.find((piece) => piece.point.col === col && piece.point.row === row);\r\n    }\r\n\r\n    isKingInCheck(color: Color, pieces: Piece[]): boolean {\r\n        const king = pieces.find((piece) => piece.color === color && piece instanceof King);\r\n\r\n        if (king) {\r\n            return pieces.some(\r\n                (piece) =>\r\n                    piece\r\n                        .getPossibleCaptures()\r\n                        .some((point) => point.col === king.point.col && point.row === king.point.row) &&\r\n                    piece.color !== color\r\n            );\r\n        }\r\n        return false;\r\n    }\r\n\r\n    getKingByColor(color: Color): King {\r\n        return this.pieces.find((piece) => piece instanceof King && piece.color === color) as King;\r\n    }\r\n\r\n    getCastleFENString(color: Color) {\r\n        const king = this.getKingByColor(color);\r\n\r\n        if (!king || king.isMovedAlready) {\r\n            return '';\r\n        }\r\n\r\n        let fen = '';\r\n        const leftRook = this.getPieceByField(king.point.row, 0);\r\n        const rightRook = this.getPieceByField(king.point.row, 7);\r\n\r\n        if (rightRook instanceof Rook && rightRook.color === color) {\r\n            if (!rightRook.isMovedAlready) {\r\n                fen += this.reverted ? 'q' : 'k';\r\n            }\r\n        }\r\n\r\n        if (leftRook instanceof Rook && leftRook.color === color) {\r\n            if (!leftRook.isMovedAlready) {\r\n                fen += this.reverted ? 'k' : 'q';\r\n            }\r\n        }\r\n\r\n        fen = fen.split('').sort().join('');\r\n        return color === Color.BLACK ? fen : fen.toUpperCase();\r\n    }\r\n\r\n    getEnPassantFENString() {\r\n        if (this.enPassantPoint) {\r\n            if (this.reverted) {\r\n                return String.fromCharCode(104 - this.enPassantPoint.col) + (this.enPassantPoint.row + 1);\r\n            } else {\r\n                return String.fromCharCode(97 + this.enPassantPoint.col) + (Math.abs(this.enPassantPoint.row - 7) + 1);\r\n            }\r\n        } else {\r\n            return '-';\r\n        }\r\n    }\r\n\r\n    calculateFEN() {\r\n        let fen = '';\r\n        for (let i = 0; i < 8; ++i) {\r\n            let emptyFields = 0;\r\n            for (let j = 0; j < 8; ++j) {\r\n                const foundPiece = this.pieces.find((piece) => piece.point.col === j && piece.point.row === i);\r\n                if (foundPiece) {\r\n                    if (emptyFields > 0) {\r\n                        fen += emptyFields;\r\n                        emptyFields = 0;\r\n                    }\r\n\r\n                    if (foundPiece instanceof Rook) {\r\n                        fen += foundPiece.color === Color.BLACK ? 'r' : 'R';\r\n                    } else {\r\n                        if (foundPiece instanceof Knight) {\r\n                            fen += foundPiece.color === Color.BLACK ? 'n' : 'N';\r\n                        } else {\r\n                            if (foundPiece instanceof Bishop) {\r\n                                fen += foundPiece.color === Color.BLACK ? 'b' : 'B';\r\n                            } else {\r\n                                if (foundPiece instanceof Queen) {\r\n                                    fen += foundPiece.color === Color.BLACK ? 'q' : 'Q';\r\n                                } else {\r\n                                    if (foundPiece instanceof King) {\r\n                                        fen += foundPiece.color === Color.BLACK ? 'k' : 'K';\r\n                                    } else {\r\n                                        if (foundPiece instanceof Pawn) {\r\n                                            fen += foundPiece.color === Color.BLACK ? 'p' : 'P';\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    ++emptyFields;\r\n                }\r\n            }\r\n\r\n            if (emptyFields > 0) {\r\n                fen += emptyFields;\r\n            }\r\n\r\n            fen += '/';\r\n        }\r\n\r\n        fen = fen.substr(0, fen.length - 1);\r\n\r\n        if (this.reverted) {\r\n            fen = fen.split('').reverse().join('');\r\n        }\r\n\r\n        fen += ' ' + (this.currentWhitePlayer ? 'w' : 'b');\r\n        const whiteEnPassant = this.getCastleFENString(Color.WHITE);\r\n        const blackEnPassant = this.getCastleFENString(Color.BLACK);\r\n        let concatedEnPassant = whiteEnPassant + blackEnPassant;\r\n        if (!concatedEnPassant) {\r\n            concatedEnPassant = '-';\r\n        }\r\n\r\n        fen += ' ' + concatedEnPassant;\r\n        fen += ' ' + this.getEnPassantFENString();\r\n        fen += ' ' + 0;\r\n        fen += ' ' + this.fullMoveCount;\r\n        this.fen = fen;\r\n    }\r\n\r\n    isXYInPointSelection(i: number, j: number) {\r\n        return false;\r\n    }\r\n\r\n    private reversePoint(point: Point) {\r\n        if (point) {\r\n            point.row = Math.abs(point.row - 7);\r\n            point.col = Math.abs(point.col - 7);\r\n        }\r\n    }\r\n\r\n    public getPieceByPoint(row: number, col: number): Piece {\r\n        row = Math.floor(row);\r\n        col = Math.floor(col);\r\n        return this.pieces.find(\r\n            (piece) => piece.point.col === col && piece.point.row === row\r\n        );\r\n    }\r\n\r\n    public checkIfPawnTakesEnPassant(newPoint: Point) {\r\n        if (newPoint.isEqual(this.enPassantPoint)) {\r\n            this.pieces = this.pieces.filter(\r\n                (piece) => piece !== this.enPassantPiece\r\n            );\r\n            this.enPassantPoint = null;\r\n            this.enPassantPiece = null;\r\n        }\r\n    }\r\n\r\n    public checkIfPawnEnpassanted(piece: Pawn, newPoint: Point) {\r\n        if (Math.abs(piece.point.row - newPoint.row) > 1) {\r\n            this.enPassantPiece = piece;\r\n            this.enPassantPoint = new Point(\r\n                (piece.point.row + newPoint.row) / 2,\r\n                piece.point.col\r\n            );\r\n        } else {\r\n            this.enPassantPoint = null;\r\n            this.enPassantPiece = null;\r\n        }\r\n    }\r\n\r\n    isKingChecked(piece: Piece) {\r\n        if (piece instanceof King) {\r\n            return piece.color === Color.WHITE\r\n                ? this.whiteKingChecked\r\n                : this.blackKingChecked;\r\n        }\r\n    }\r\n\r\n    getCurrentPlayerColor(): number {\r\n        return this.currentWhitePlayer ? Color.WHITE : Color.BLACK;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class NgxChessBoardService {\r\n    private componentMethodCallSource = new Subject<any>();\r\n\r\n    componentMethodCalled$ = this.componentMethodCallSource.asObservable();\r\n\r\n    reset() {\r\n        this.componentMethodCallSource.next();\r\n    }\r\n}\r\n","import { CdkDragEnd, CdkDragMove, CdkDragStart } from '@angular/cdk/drag-drop';\r\nimport {\r\n    AfterViewInit,\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostListener,\r\n    Input,\r\n    OnChanges,\r\n    OnInit,\r\n    Output,\r\n    SimpleChanges,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { AbstractEngineFacade } from './engine/abstract-engine-facade';\r\nimport { BoardLoader } from './engine/board-state-provider/board-loader/board-loader';\r\nimport {\r\n    NotationProcessorFactory, NotationType,\r\n} from './engine/board-state-provider/board-loader/notation-processors/notation-processor-factory';\r\nimport { ClickUtils } from './engine/click/click-utils';\r\nimport { EngineFacade } from './engine/engine-facade';\r\nimport { MoveChange } from './engine/outputs/move-change/move-change';\r\nimport { HistoryMove } from './history-move-provider/history-move';\r\nimport { Board } from './models/board';\r\nimport { Piece } from './models/pieces/piece';\r\nimport { NgxChessBoardView } from './ngx-chess-board-view';\r\nimport { PiecePromotionModalComponent } from './piece-promotion/piece-promotion-modal/piece-promotion-modal.component';\r\nimport { NgxChessBoardService } from './service/ngx-chess-board.service';\r\nimport { Constants } from './utils/constants';\r\nimport { PieceIconInput } from './utils/inputs/piece-icon-input';\r\nimport { PieceIconInputManager } from './utils/inputs/piece-icon-input-manager';\r\nimport { ColorInput, PieceTypeInput } from './utils/inputs/piece-type-input';\r\n\r\n\r\n@Component({\r\n    selector: 'ngx-chess-board',\r\n    templateUrl: './ngx-chess-board.component.html',\r\n    styleUrls: ['./ngx-chess-board.component.scss'],\r\n})\r\nexport class NgxChessBoardComponent\r\n    implements OnInit, OnChanges, NgxChessBoardView, AfterViewInit {\r\n\r\n    @Input() darkTileColor = Constants.DEFAULT_DARK_TILE_COLOR;\r\n    @Input() lightTileColor: string = Constants.DEFAULT_LIGHT_TILE_COLOR;\r\n    @Input() showCoords = true;\r\n    @Input() sourcePointColor: string = Constants.DEFAULT_SOURCE_POINT_COLOR;\r\n    @Input() destinationPointColor: string = Constants.DEFAULT_DESTINATION_POINT_COLOR;\r\n    @Input() legalMovesPointColor: string = Constants.DEFAULT_LEGAL_MOVE_POINT_COLOR;\r\n    @Input() showLastMove = true;\r\n    @Input() showLegalMoves = true;\r\n    @Input() showActivePiece = true;\r\n    @Input() showPossibleCaptures = true;\r\n    /**\r\n     * Enabling free mode removes turn-based restriction and allows to move any piece freely!\r\n     */\r\n    @Output() moveChange = new EventEmitter<MoveChange>();\r\n    @Output() checkmate = new EventEmitter<void>();\r\n    @Output() stalemate = new EventEmitter<void>();\r\n\r\n    @ViewChild('boardRef')\r\n    boardRef: ElementRef;\r\n    @ViewChild('modal')\r\n    modal: PiecePromotionModalComponent;\r\n\r\n    pieceSize: number;\r\n    selected = false;\r\n    boardLoader: BoardLoader;\r\n    pieceIconManager: PieceIconInputManager;\r\n    isDragging = false;\r\n    startTransition = '';\r\n\r\n    engineFacade: AbstractEngineFacade;\r\n\r\n    constructor(private ngxChessBoardService: NgxChessBoardService) {\r\n        this.engineFacade = new EngineFacade(\r\n            new Board(),\r\n            this.moveChange\r\n        );\r\n    }\r\n\r\n    @Input('size')\r\n    public set size(size: number) {\r\n        if (\r\n            size &&\r\n            size >= Constants.MIN_BOARD_SIZE &&\r\n            size <= Constants.MAX_BOARD_SIZE\r\n        ) {\r\n            this.engineFacade.heightAndWidth = size;\r\n        } else {\r\n            this.engineFacade.heightAndWidth = Constants.DEFAULT_SIZE;\r\n        }\r\n        this.engineFacade.drawProvider.clear();\r\n        this.calculatePieceSize();\r\n    }\r\n\r\n    @Input('freeMode')\r\n    public set freeMode(freeMode: boolean) {\r\n        this.engineFacade.freeMode = freeMode;\r\n    }\r\n\r\n    @Input('dragDisabled')\r\n    public set dragDisabled(dragDisabled: boolean) {\r\n        this.engineFacade.dragDisabled = dragDisabled;\r\n    }\r\n\r\n    @Input('drawDisabled')\r\n    public set drawDisabled(drawDisabled: boolean) {\r\n        this.engineFacade.drawDisabled = drawDisabled;\r\n    }\r\n\r\n    @Input('pieceIcons')\r\n    public set pieceIcons(pieceIcons: PieceIconInput) {\r\n        this.engineFacade.pieceIconManager.pieceIconInput = pieceIcons;\r\n    }\r\n\r\n    @Input('lightDisabled')\r\n    public set lightDisabled(lightDisabled: boolean) {\r\n        this.engineFacade.lightDisabled = lightDisabled;\r\n    }\r\n\r\n    @Input('darkDisabled')\r\n    public set darkDisabled(darkDisabled: boolean) {\r\n        this.engineFacade.darkDisabled = darkDisabled;\r\n    }\r\n\r\n    @HostListener('contextmenu', ['$event'])\r\n    onRightClick(event: MouseEvent) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (\r\n            (changes.lightDisabled &&\r\n                this.lightDisabled &&\r\n                this.engineFacade.board.currentWhitePlayer) ||\r\n            (changes.darkDisabled &&\r\n                this.darkDisabled &&\r\n                !this.engineFacade.board.currentWhitePlayer)\r\n        ) {\r\n            this.engineFacade.board.possibleCaptures = [];\r\n            this.engineFacade.board.possibleMoves = [];\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.ngxChessBoardService.componentMethodCalled$.subscribe(() => {\r\n            this.engineFacade.reset();\r\n        });\r\n\r\n    }\r\n\r\n    ngAfterViewInit(): void {\r\n        this.engineFacade.modal = this.modal;\r\n        this.calculatePieceSize();\r\n    }\r\n\r\n    onMouseUp(event: MouseEvent) {\r\n        this.engineFacade.onMouseUp(\r\n            event,\r\n            this.getClickPoint(event),\r\n            this.boardRef.nativeElement.getBoundingClientRect().left,\r\n            this.boardRef.nativeElement.getBoundingClientRect().top\r\n        );\r\n    }\r\n\r\n    reverse(): void {\r\n        this.selected = false;\r\n        this.engineFacade.board.reverse();\r\n        this.engineFacade.coords.reverse();\r\n    }\r\n\r\n    updateBoard(board: Board) {\r\n        this.engineFacade.board = board;\r\n        this.boardLoader.setEngineFacade(this.engineFacade);\r\n        this.engineFacade.board.possibleCaptures = [];\r\n        this.engineFacade.board.possibleMoves = [];\r\n    }\r\n\r\n    setFEN(fen: string): void {\r\n        try {\r\n            this.engineFacade.boardLoader.setNotationProcessor(\r\n                NotationProcessorFactory.getProcessor(NotationType.FEN)\r\n            );\r\n            this.engineFacade.boardLoader.loadFEN(fen);\r\n            this.engineFacade.board.possibleCaptures = [];\r\n            this.engineFacade.board.possibleMoves = [];\r\n            this.engineFacade.coords.reset();\r\n        } catch (exception) {\r\n            this.engineFacade.boardLoader.addPieces();\r\n        }\r\n    }\r\n\r\n    setPGN(pgn: string): void {\r\n        try {\r\n            this.engineFacade.pgnProcessor.reset();\r\n            this.engineFacade.boardLoader.setNotationProcessor(\r\n                NotationProcessorFactory.getProcessor(NotationType.PGN)\r\n            );\r\n            this.engineFacade.boardLoader.loadPGN(pgn);\r\n            this.engineFacade.board.possibleCaptures = [];\r\n            this.engineFacade.board.possibleMoves = [];\r\n            this.engineFacade.coords.reset();\r\n        } catch (exception) {\r\n            console.log(exception);\r\n            this.engineFacade.boardLoader.addPieces();\r\n        }\r\n    }\r\n\r\n    getFEN(): string {\r\n        return this.engineFacade.board.fen;\r\n    }\r\n\r\n    dragEnded(event: CdkDragEnd): void {\r\n        this.isDragging = false;\r\n        this.engineFacade.dragEndStrategy.process(\r\n            event,\r\n            this.engineFacade.moveDone,\r\n            this.startTransition\r\n        );\r\n    }\r\n\r\n    dragStart(event: CdkDragStart): void {\r\n        this.isDragging = true;\r\n        let trans = event.source.getRootElement().style.transform.split(') ');\r\n        //   this.startTrans= trans;\r\n        this.startTransition = trans.length === 2 ? trans[1] : trans[0];\r\n        this.engineFacade.dragStartStrategy.process(event);\r\n    }\r\n\r\n    onMouseDown(event: MouseEvent) {\r\n        this.engineFacade.onMouseDown(event, this.getClickPoint(event),\r\n            this.boardRef.nativeElement.getBoundingClientRect().left,\r\n            this.boardRef.nativeElement.getBoundingClientRect().top\r\n        );\r\n    }\r\n\r\n    getClickPoint(event) {\r\n        return ClickUtils.getClickPoint(\r\n            event,\r\n            this.boardRef.nativeElement.getBoundingClientRect().top,\r\n            this.boardRef.nativeElement.getBoundingClientRect().height,\r\n            this.boardRef.nativeElement.getBoundingClientRect().left,\r\n            this.boardRef.nativeElement.getBoundingClientRect().width\r\n        );\r\n    }\r\n\r\n    private calculatePieceSize() {\r\n        this.pieceSize = this.engineFacade.heightAndWidth / 8;\r\n    }\r\n\r\n\r\n    getCustomPieceIcons(piece: Piece) {\r\n        return JSON.parse(\r\n            `{ \"background-image\": \"url('${this.engineFacade.pieceIconManager.getPieceIcon(\r\n                piece\r\n            )}')\"}`\r\n        );\r\n    }\r\n\r\n    move(coords: string): void {\r\n        this.engineFacade.move(coords);\r\n    }\r\n\r\n    getMoveHistory(): HistoryMove[] {\r\n        return this.engineFacade.getMoveHistory();\r\n    }\r\n\r\n    reset(): void {\r\n        this.engineFacade.reset();\r\n    }\r\n\r\n    undo(): void {\r\n        this.engineFacade.undo();\r\n    }\r\n\r\n    addPiece(\r\n        pieceTypeInput: PieceTypeInput,\r\n        colorInput: ColorInput,\r\n        coords: string\r\n    ) {\r\n        this.engineFacade.addPiece(pieceTypeInput, colorInput, coords);\r\n    }\r\n\r\n    getPGN() {\r\n        return this.engineFacade.pgnProcessor.getPGN();\r\n    }\r\n\r\n    dragMoved($event: CdkDragMove<any>) {\r\n        let x = ($event.pointerPosition.x - $event.source.getRootElement().parentElement.getBoundingClientRect().left) - (this.pieceSize / 2);\r\n        let y = ($event.pointerPosition.y - $event.source.getRootElement().parentElement.getBoundingClientRect().top) - (this.pieceSize / 2);\r\n        $event.source.getRootElement().style.transform = 'translate3d(' + x + 'px, '\r\n            + (y) + 'px,0px)';\r\n    }\r\n\r\n    getTileBackgroundColor(i, j): string {\r\n        let color = ((i + j) % 2 === 0) ? this.lightTileColor : this.darkTileColor;\r\n\r\n        if (this.showLastMove) {\r\n            if (this.engineFacade.board.isXYInSourceMove(i, j)) {\r\n                color = this.sourcePointColor;\r\n            }\r\n\r\n            if (this.engineFacade.board.isXYInDestMove(i, j)) {\r\n                color = this.destinationPointColor;\r\n            }\r\n        }\r\n\r\n        return color;\r\n    }\r\n}\r\n","import { Component, ElementRef, Input, ViewChild } from '@angular/core';\r\nimport { PieceIconInput } from '../../utils/inputs/piece-icon-input';\r\n\r\n@Component({\r\n    selector: 'app-piece-promotion-modal',\r\n    templateUrl: './piece-promotion-modal.component.html',\r\n    styleUrls: ['./piece-promotion-modal.component.scss']\r\n})\r\nexport class PiecePromotionModalComponent {\r\n\r\n    @ViewChild('myModal', {static: false}) modal: ElementRef;\r\n\r\n    @Input()\r\n    pieceIconInput: PieceIconInput;\r\n\r\n    @Input()\r\n    color = 'white';\r\n\r\n    opened = false;\r\n    private onCloseCallback: (index: number) => void;\r\n\r\n    open(closeCallback: (index: number) => void) {\r\n        this.opened = true;\r\n        this.onCloseCallback = closeCallback;\r\n        this.modal.nativeElement.style.display = 'block';\r\n    }\r\n\r\n    changeSelection(index: number){\r\n        this.modal.nativeElement.style.display = 'none';\r\n        this.opened = false;\r\n        this.onCloseCallback(index);\r\n    }\r\n\r\n    getPieceIcon(piece: string): string {\r\n        let coloredPiece = '';\r\n        switch (piece.toLowerCase()) {\r\n            case 'queen':\r\n                coloredPiece = this.color === 'white' ? this.pieceIconInput.whiteQueenUrl : this.pieceIconInput.blackQueenUrl;\r\n                break;\r\n            case 'rook':\r\n                coloredPiece = this.color === 'white' ? this.pieceIconInput.whiteRookUrl : this.pieceIconInput.blackRookUrl;\r\n                break;\r\n            case 'bishop':\r\n                coloredPiece = this.color === 'white' ? this.pieceIconInput.whiteBishopUrl : this.pieceIconInput.blackBishopUrl;\r\n                break;\r\n            case 'knight':\r\n                coloredPiece = this.color === 'white' ? this.pieceIconInput.whiteKnightUrl : this.pieceIconInput.blackKnightUrl;\r\n                break;\r\n        }\r\n\r\n        return coloredPiece;\r\n    }\r\n}\r\n","import { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { NgxChessBoardComponent } from './ngx-chess-board.component';\r\nimport { PiecePromotionModalComponent } from './piece-promotion/piece-promotion-modal/piece-promotion-modal.component';\r\nimport { NgxChessBoardService } from './service/ngx-chess-board.service';\r\n\r\n@NgModule({\r\n    declarations: [NgxChessBoardComponent, PiecePromotionModalComponent],\r\n    imports: [CommonModule, DragDropModule],\r\n    exports: [NgxChessBoardComponent],\r\n})\r\nexport class NgxChessBoardModule {\r\n    static forRoot(): ModuleWithProviders<NgxChessBoardModule> {\r\n        return {\r\n            ngModule: NgxChessBoardModule,\r\n            providers: [NgxChessBoardService],\r\n        };\r\n    }\r\n}\r\n"]}