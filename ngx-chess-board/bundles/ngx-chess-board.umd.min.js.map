{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","../../../projects/ngx-chess-board/src/lib/models/pieces/color.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/piece.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/notation-processors/notation-processor-factory.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/point.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/rook.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/king.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/bishop.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/knight.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/pawn.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/queen.ts","../../../projects/ngx-chess-board/src/lib/utils/unicode-constants.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/notation-processors/fen-loader/default-fen-processor.ts","../../../projects/ngx-chess-board/src/lib/models/move-translation.ts","../../../projects/ngx-chess-board/src/lib/utils/move-utils.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/default-pieces-loader.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/notation-processors/pgn-loader/default-pgn-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/draw-point.ts","../../../projects/ngx-chess-board/src/lib/engine/click/click-utils.ts","../../../projects/ngx-chess-board/src/lib/history-move-provider/history-move.ts","../../../projects/ngx-chess-board/src/lib/history-move-provider/history-move-provider.ts","../../../projects/ngx-chess-board/src/lib/utils/constants.ts","../../../projects/ngx-chess-board/src/lib/utils/inputs/piece-icon-input-manager.ts","../../../projects/ngx-chess-board/src/lib/utils/inputs/piece-type-input.ts","../../../projects/ngx-chess-board/src/lib/engine/coords/coords-provider.ts","../../../projects/ngx-chess-board/src/lib/engine/drag/end/default-drag-end-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/drag/end/drag-end-strategy.ts","../../../projects/ngx-chess-board/src/lib/engine/drag/start/default-drag-start-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/drag/start/drag-start-strategy.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/colors/default-color-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/colors/color-strategy.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/draw-provider.ts","../../../projects/ngx-chess-board/src/lib/engine/pgn/default-pgn-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/pgn/abstract-pgn-processor.ts","../../../projects/ngx-chess-board/src/lib/engine/abstract-engine-facade.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-loader/board-loader.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-state/board-state.ts","../../../projects/ngx-chess-board/src/lib/engine/board-state-provider/board-state/board-state-provider.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/shapes/arrow.ts","../../../projects/ngx-chess-board/src/lib/engine/drawing-tools/shapes/circle.ts","../../../projects/ngx-chess-board/src/lib/engine/piece-decorator/available-move-decorator.ts","../../../projects/ngx-chess-board/src/lib/engine/piece-decorator/piece-abstract-decorator.ts","../../../projects/ngx-chess-board/src/lib/piece-promotion/piece-promotion-resolver.ts","../../../projects/ngx-chess-board/src/lib/engine/utils/piece-factory.ts","../../../projects/ngx-chess-board/src/lib/engine/engine-facade.ts","../../../projects/ngx-chess-board/src/lib/models/board.ts","../../../projects/ngx-chess-board/src/lib/service/ngx-chess-board.service.ts","../../../projects/ngx-chess-board/src/lib/ngx-chess-board.component.ts","../../../projects/ngx-chess-board/src/lib/piece-promotion/piece-promotion-modal/piece-promotion-modal.component.ts","../../../projects/ngx-chess-board/src/lib/ngx-chess-board.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","__","this","constructor","create","__values","o","s","Symbol","iterator","m","i","length","next","value","done","TypeError","__read","n","r","e","ar","push","error","__spread","arguments","concat","Color","NotationType","Piece","point","color","constant","relValue","board","checkPoints","Point","row","col","isEqual","that","hasCoordsEqual","clone","Rook","_super","_this","isMovedAlready","getPossibleMoves","possiblePoints","isFieldEmpty","j","getPossibleCaptures","isFieldTakenByEnemy","WHITE","BLACK","getCoveredFields","getPieceByField","King","castledAlready","shortCastled","longCastled","isCastling","isFieldUnderAttack","longCastlePossible","isKingInCheck","pieces","leftRook","shortCastlePossible","rightRook","Bishop","Knight","Pawn","reverted","enPassantPoint","enPassantPiece","Math","abs","Queen","UnicodeConstants","WHITE_KING","name","icon","WHITE_QUEEN","WHITE_KNIGHT","WHITE_ROOK","WHITE_PAWN","WHITE_BISHOP","BLACK_KING","BLACK_QUEEN","BLACK_KNIGHT","BLACK_ROOK","BLACK_PAWN","BLACK_BISHOP","DefaultFenProcessor","process","notation","engineFacade","fen","Error","split","pointer","chunk","charAt","match","Number","pawn","setCurrentPlayer","setCastles","setEnPassant","setFullMoveCount","currentWhitePlayer","castleChunk","includes","setRookAlreadyMoved","rook","find","piece","MoveTranslation","xAxis","yAxis","_xAxis","_yAxis","_reverted","defineProperty","MoveUtils","willMoveCauseCheck","currentColor","destRow","destCol","srcPiece","destPiece","filter","isBound","format","sourcePoint","destPoint","sourceX","destX","String","fromCharCode","translateCoordsToIndex","coords","charCodeAt","findPieceByPossibleMovesContaining","indexes","foundPieces","_c","_d","_e","e_2","_f","findPieceByPossibleCapturesContaining","e_4","formatSingle","getFirstLetterPiece","reverse","formatCol","DefaultPiecesLoader","loadDefaultPieces","calculateFEN","DefaultPgnProcessor","reset","moves","extractMoves","counter","move","promotionIndex","replace","this_1","resolvePromotion","substring","test","resolvePieceByFirstChar","indexOf","resolveByCol","resolveByRow","moves_1","moves_1_1","lastIndexOf","trim","movePiece","hasUpperCase","piecesFirstChar","isShortCastle","removePiece","isLongCastle","char","firstPieceFormat","replacePromotion","promotionChar","NotationProcessorFactory","getProcessor","type","FEN","PGN","getDefaultProcessor","DrawPoint","x","y","ClickUtils","getClickPoint","event","top","height","left","width","floor","getDrawingPoint","tileSize","colorStrategy","ctrl","alt","shift","squareSize","xx","yy","resolve","captured","HistoryMoveProvider","historyMovesSubject$","BehaviorSubject","states","addMove","historyMove","historyMoves","pop","lastHistoryMove","getLastMove","state","getAll","clear","getLastMoveIndex","Constants","DEFAULT_DARK_TILE_COLOR","DEFAULT_LIGHT_TILE_COLOR","DEFAULT_SIZE","MIN_BOARD_SIZE","MAX_BOARD_SIZE","PieceTypeInput","ColorInput","PieceIconInputManager","_defaultIcons","_pieceIconInput","isDefaultIcons","undefined","pieceIconInput","getPieceIcon","isWhite","whiteKingUrl","blackKingUrl","whiteQueenUrl","blackQueenUrl","whiteRookUrl","blackRookUrl","whiteBishopUrl","blackBishopUrl","whiteKnightUrl","blackKnightUrl","whitePawnUrl","blackPawnUrl","loadDefaultData","CoordsProvider","defaultXCoords","defaultYCoords","currentXCoords","currentYCoords","init","DefaultDragEndProcessor","dragEnded","source","element","nativeElement","style","zIndex","pointerEvents","touchAction","DragEndStrategy","dragEndProcessor","setDragEndProcessor","processor","DefaultDragStartProcessor","dragStarted","position","DragStartStrategy","dragStartProcessor","setDragStartProcessor","DefaultColorProcessor","ColorStrategy","colorProcessor","setColorProcessor","DrawProvider","arrowsSubject$","circlesSubject$","arrows$","asObservable","circles$","circles","arrows","addCircle","circle","reomveCircle","removeCircle","addArrow","arrow","removeArrow","containsCircle","checkCircle","some","containsArrow","checkArrow","DefaultPgnProcessor$1","sourcePiece","currentIndex","pgn","possibleMoves","possibleCaptures","isEqualByCol","aPiece","bPiece","AbstractPgnProcessor","getPGN","processChecks","checkmate","check","stalemate","addPromotionChoice","promotion","removeLast","regex1","RegExp","lastIndex","AbstractEngineFacade","dragStartStrategy","dragEndStrategy","pgnProcessor","heightAndWidth","freeMode","drawProvider","pieceIconManager","moveHistoryProvider","checkIfPawnFirstMove","checkIfRookMoved","checkIfKingMoved","getMoveHistory","BoardLoader","notationProcessor","addPieces","loadFEN","loadPGN","setEngineFacade","setNotationProcessor","BoardState","BoardStateProvider","statesSubject$","getStates","lastState","getLastState","isEmpty","getLastStateIndex","Arrow","start","end","Circle","drawPoint","AvailableMoveDecorator","pointClicked","PiecePromotionResolver","resolvePromotionChoice","index","PieceFactory","pieceTypeInput","colorInput","LIGHT","QUEEN","KING","KNIGHT","BISHOP","ROOK","PAWN","EngineFacade","moveChange","_selected","disabling","boardLoader","boardStateProvider","undo","lastBoard","saveMoveClone","moveStateProvider","sourceIndexes","destIndexes","getPieceByPoint","prepareActivePiece","isPointInPossibleMoves","isPointInPossibleCaptures","saveClone","lastMoveSrc","lastMoveDest","disableSelection","pieceClicked","activePiece","onPieceClicked","handleClickEvent","isMouseDown","moving","onFreeMode","onMouseDown","button","ctrlKey","isPieceDisabled","altKey","shiftKey","onMouseUp","drawDisabled","dragDisabled","addDrawPoint","toMovePiece","newPoint","HistoryMove","checkIfPawnTakesEnPassant","checkIfPawnEnpassanted","increaseFullMoveCount","checkForPawnPromote","afterMoveActions","toPromotePiece","openPromoteDialog","blackKingChecked","whiteKingChecked","checkForPossibleMoves","checkForPat","lastMove","emit","assign","modal","open","capture","lightDisabled","darkDisabled","crtl","upPoint","fullMoveCount","addPiece","existing_1","createdPiece","Board","isXYInPossibleMoves","isXYInPossibleCaptures","isXYInSourceMove","isXYInDestMove","isXYInActiveMove","forEach","reversePoint","cloneDeep","enemyColor","field","king","getKingByColor","getCastleFENString","sort","join","toUpperCase","getEnPassantFENString","emptyFields","foundPiece","substr","concatedEnPassant","isXYInPointSelection","isKingChecked","NgxChessBoardService","componentMethodCallSource","Subject","componentMethodCalled$","Injectable","args","providedIn","NgxChessBoardComponent","ngxChessBoardService","darkTileColor","lightTileColor","showCoords","EventEmitter","selected","size","calculatePieceSize","pieceIcons","onRightClick","preventDefault","ngOnChanges","changes","ngOnInit","subscribe","ngAfterViewInit","boardRef","getBoundingClientRect","updateBoard","setFEN","exception","setPGN","console","log","getFEN","dragStart","pieceSize","getCustomPieceIcons","JSON","parse","Component","selector","template","Input","Output","ViewChild","HostListener","PiecePromotionModalComponent","opened","closeCallback","onCloseCallback","display","changeSelection","static","NgxChessBoardModule","forRoot","ngModule","providers","NgModule","declarations","imports","CommonModule","DragDropModule","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export enum Color {\r\n    WHITE,\r\n    BLACK,\r\n}\r\n","import { AbstractPiece } from '../../engine/piece-decorator/abstract-piece';\r\nimport { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { Point } from './point';\r\n\r\nexport abstract class Piece implements AbstractPiece {\r\n    point: Point;\r\n    color: Color;\r\n    constant: PieceConstant;\r\n    checkPoints: Point[] = [];\r\n    relValue: number;\r\n    board: Board;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        relValue: number,\r\n        board: Board\r\n    ) {\r\n        this.color = color;\r\n        this.constant = constant;\r\n        this.point = point;\r\n        this.relValue = relValue;\r\n        this.board = board;\r\n    }\r\n\r\n    abstract getPossibleMoves(): Point[];\r\n\r\n    abstract getPossibleCaptures(): Point[];\r\n\r\n    abstract getCoveredFields(): Point[]; // zwraca liste punktow ktore sa puste lub istnieje na nich pionek tego samego koloru\r\n}\r\n","import { NotationProcessor } from './notation-processor';\r\nimport {\r\n    DefaultFenProcessor,\r\n} from './fen-loader/default-fen-processor';\r\nimport { DefaultPgnProcessor } from './pgn-loader/default-pgn-processor';\r\n\r\nexport class NotationProcessorFactory {\r\n\r\n    static getProcessor(type: NotationType): NotationProcessor {\r\n        switch (type) {\r\n            case NotationType.FEN:\r\n                return new DefaultFenProcessor();\r\n\r\n            case NotationType.PGN:\r\n                return new DefaultPgnProcessor();\r\n\r\n        }\r\n    }\r\n\r\n    static getDefaultProcessor(): NotationProcessor {\r\n        return new DefaultFenProcessor();\r\n    }\r\n\r\n}\r\n\r\nexport enum NotationType {\r\n    FEN = 1,\r\n    PGN = 2\r\n}\r\n","export class Point {\r\n    row: number;\r\n    col: number;\r\n\r\n    constructor(row: number, col: number) {\r\n        this.row = row;\r\n        this.col = col;\r\n    }\r\n\r\n    isEqual(that: Point) {\r\n        return that && this.row === that.row && this.col === that.col;\r\n    }\r\n\r\n    hasCoordsEqual(row: number, col: number) {\r\n        return row && col && this.row === row && this.col === col;\r\n    }\r\n\r\n    clone() {\r\n        return new Point(this.row, this.col);\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { King } from './king';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Rook extends Piece {\r\n    isMovedAlready = false;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 5, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    col,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    col,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\nimport { Rook } from './rook';\r\n\r\nexport class King extends Piece {\r\n    castledAlready = false;\r\n    shortCastled = false;\r\n    longCastled = false;\r\n    isMovedAlready;\r\n    isCastling = false;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 0, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        // lewo\r\n        if (\r\n            this.board.isFieldEmpty(row, col - 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row, col - 1));\r\n        }\r\n\r\n        // prawo\r\n        if (\r\n            this.board.isFieldEmpty(row, col + 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row, col + 1));\r\n        }\r\n\r\n        // dol\r\n        if (\r\n            this.board.isFieldEmpty(row + 1, col) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col));\r\n        }\r\n\r\n        // gora\r\n        if (\r\n            this.board.isFieldEmpty(row - 1, col) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col));\r\n        }\r\n\r\n        // lewo gora\r\n        if (\r\n            this.board.isFieldEmpty(row - 1, col - 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col - 1));\r\n        }\r\n        // prawo gora\r\n        if (\r\n            this.board.isFieldEmpty(row - 1, col + 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col + 1));\r\n        }\r\n\r\n        // lewo dol\r\n        if (\r\n            this.board.isFieldEmpty(row + 1, col - 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col - 1));\r\n        }\r\n        // prawo dol\r\n        if (\r\n            this.board.isFieldEmpty(row + 1, col + 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col + 1));\r\n        }\r\n\r\n        if (!this.isMovedAlready) {\r\n            let longCastlePossible = true;\r\n            for (let i = col - 1; i > 0; --i) {\r\n                if (\r\n                    !this.board.isFieldEmpty(row, i) ||\r\n                    this.board.isFieldUnderAttack(\r\n                        row,\r\n                        i,\r\n                        this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                    )\r\n                ) {\r\n                    longCastlePossible = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (longCastlePossible && !this.board.isKingInCheck(\r\n                this.color,\r\n                this.board.pieces\r\n            ) && this.board.getPieceByField(row, 0)) {\r\n                const leftRook = this.board.getPieceByField(row, 0);\r\n                if (leftRook instanceof Rook) {\r\n                    if (!leftRook.isMovedAlready) {\r\n                        possiblePoints.push(new Point(row, col - 2));\r\n                    }\r\n                }\r\n            }\r\n\r\n            let shortCastlePossible = true;\r\n            for (let i = col + 1; i < 7; ++i) {\r\n                if (\r\n                    !this.board.isFieldEmpty(row, i) ||\r\n                    this.board.isFieldUnderAttack(\r\n                        row,\r\n                        i,\r\n                        this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                    )\r\n                ) {\r\n                    shortCastlePossible = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (shortCastlePossible && !this.board.isKingInCheck(\r\n                this.color,\r\n                this.board.pieces\r\n            ) && this.board.getPieceByField(row, 7)) {\r\n                const rightRook = this.board.getPieceByField(row, 7);\r\n                if (rightRook instanceof Rook) {\r\n                    if (!rightRook.isMovedAlready) {\r\n                        possiblePoints.push(new Point(row, col + 2));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // lewo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row, col - 1));\r\n        }\r\n\r\n        // prawo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row, col + 1));\r\n        }\r\n\r\n        // dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col));\r\n        }\r\n\r\n        // gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col));\r\n        }\r\n\r\n        // lewo gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col - 1));\r\n        }\r\n        // prawo gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col + 1));\r\n        }\r\n\r\n        // lewo dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col - 1));\r\n        }\r\n        // prawo dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col + 1));\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // lewo\r\n        possiblePoints.push(new Point(row, col - 1));\r\n\r\n        // prawo\r\n        possiblePoints.push(new Point(row, col + 1));\r\n\r\n        // dol\r\n        possiblePoints.push(new Point(row + 1, col));\r\n\r\n        // gora\r\n        possiblePoints.push(new Point(row - 1, col));\r\n\r\n        // lewo gora\r\n        possiblePoints.push(new Point(row - 1, col - 1));\r\n\r\n        // prawo gora\r\n        possiblePoints.push(new Point(row - 1, col + 1));\r\n\r\n        // lewo dol\r\n        possiblePoints.push(new Point(row + 1, col - 1));\r\n\r\n        // prawo dol\r\n        possiblePoints.push(new Point(row + 1, col + 1));\r\n\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { King } from './king';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Bishop extends Piece {\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 3, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures() {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Knight extends Piece {\r\n    isMovedAlready = false;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 3, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // gora -> lewo\r\n        if (this.board.isFieldEmpty(row - 2, col - 1)) {\r\n            possiblePoints.push(new Point(row - 2, col - 1));\r\n        }\r\n\r\n        // gora -> prawo\r\n        if (this.board.isFieldEmpty(row - 2, col + 1)) {\r\n            possiblePoints.push(new Point(row - 2, col + 1));\r\n        }\r\n\r\n        // lewo -> gora\r\n        if (this.board.isFieldEmpty(row - 1, col - 2)) {\r\n            possiblePoints.push(new Point(row - 1, col - 2));\r\n        }\r\n\r\n        // prawo -> gora\r\n        if (this.board.isFieldEmpty(row - 1, col + 2)) {\r\n            possiblePoints.push(new Point(row - 1, col + 2));\r\n        }\r\n\r\n        // lewo -> dol\r\n        if (this.board.isFieldEmpty(row + 1, col - 2)) {\r\n            possiblePoints.push(new Point(row + 1, col - 2));\r\n        }\r\n\r\n        // prawo -> dol\r\n        if (this.board.isFieldEmpty(row + 1, col + 2)) {\r\n            possiblePoints.push(new Point(row + 1, col + 2));\r\n        }\r\n\r\n        // dol -> lewo\r\n        if (this.board.isFieldEmpty(row + 2, col - 1)) {\r\n            possiblePoints.push(new Point(row + 2, col - 1));\r\n        }\r\n\r\n        // dol -> prawo\r\n        if (this.board.isFieldEmpty(row + 2, col + 1)) {\r\n            possiblePoints.push(new Point(row + 2, col + 1));\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // gora -> lewo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 2,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 2, col - 1));\r\n        }\r\n\r\n        // gora -> prawo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 2,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 2, col + 1));\r\n        }\r\n\r\n        // lewo -> gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col - 2,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col - 2));\r\n        }\r\n\r\n        // prawo -> gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col + 2,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col + 2));\r\n        }\r\n\r\n        // lewo -> dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col - 2,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col - 2));\r\n        }\r\n\r\n        // prawo -> dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col + 2,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col + 2));\r\n        }\r\n\r\n        // dol -> lewo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 2,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 2, col - 1));\r\n        }\r\n\r\n        // dol -> prawo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 2,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 2, col + 1));\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // gora -> lewo\r\n        possiblePoints.push(new Point(row - 2, col - 1));\r\n\r\n        // gora -> prawo\r\n        possiblePoints.push(new Point(row - 2, col + 1));\r\n\r\n        // lewo -> gora\r\n        possiblePoints.push(new Point(row - 1, col - 2));\r\n\r\n        // prawo -> gora\r\n        possiblePoints.push(new Point(row - 1, col + 2));\r\n\r\n        // lewo -> dol\r\n        possiblePoints.push(new Point(row + 1, col - 2));\r\n\r\n        // prawo -> dol\r\n        possiblePoints.push(new Point(row + 1, col + 2));\r\n\r\n        // dol -> lewo\r\n        possiblePoints.push(new Point(row + 2, col - 1));\r\n\r\n        // dol -> prawo\r\n        possiblePoints.push(new Point(row + 2, col + 1));\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Pawn extends Piece {\r\n    isMovedAlready = false;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 1, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        if (\r\n            (!this.board.reverted && this.color === Color.WHITE) ||\r\n            (this.board.reverted && this.color === Color.BLACK)\r\n        ) {\r\n            if (this.board.isFieldEmpty(row - 1, col)) {\r\n                possiblePoints.push(new Point(row - 1, col));\r\n\r\n                if (\r\n                    !this.isMovedAlready &&\r\n                    this.board.isFieldEmpty(row - 2, col)\r\n                ) {\r\n                    possiblePoints.push(new Point(row - 2, col));\r\n                }\r\n            }\r\n        } else {\r\n            if (\r\n                /*!board.isFieldTakenByEnemy(row + 1, col, Color.WHITE) &&*/ this.board.isFieldEmpty(\r\n                    row + 1,\r\n                    col\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row + 1, col));\r\n\r\n                if (\r\n                    !this.isMovedAlready &&\r\n                    this.board.isFieldEmpty(row + 2, col)\r\n                ) {\r\n                    possiblePoints.push(new Point(row + 2, col));\r\n                }\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        if (\r\n            (!this.board.reverted && this.color === Color.WHITE) ||\r\n            (this.board.reverted && this.color === Color.BLACK)\r\n        ) {\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row - 1,\r\n                    col - 1,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row - 1, col - 1));\r\n            }\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row - 1,\r\n                    col + 1,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row - 1, col + 1));\r\n            }\r\n        } else {\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row + 1,\r\n                    col - 1,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row + 1, col - 1));\r\n            }\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row + 1,\r\n                    col + 1,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row + 1, col + 1));\r\n            }\r\n        }\r\n\r\n        if (\r\n            this.board.enPassantPoint &&\r\n            this.board.enPassantPiece.color ===\r\n                (this.color === Color.WHITE ? Color.BLACK : Color.WHITE)\r\n        ) {\r\n            if (\r\n                row === this.board.enPassantPiece.point.row &&\r\n                Math.abs(this.board.enPassantPiece.point.col - col) === 1\r\n            ) {\r\n                possiblePoints.push(this.board.enPassantPoint);\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        if (\r\n            (!this.board.reverted && this.color === Color.WHITE) ||\r\n            (this.board.reverted && this.color === Color.BLACK)\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col - 1));\r\n\r\n            possiblePoints.push(new Point(row - 1, col + 1));\r\n        } else {\r\n            possiblePoints.push(new Point(row + 1, col - 1));\r\n\r\n            possiblePoints.push(new Point(row + 1, col + 1));\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { King } from './king';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Queen extends Piece {\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 9, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    col,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    col,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, col) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, col) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(row, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(row, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","export interface PieceConstant {\r\n    name: string;\r\n    icon: string;\r\n}\r\n\r\nexport const UnicodeConstants = {\r\n    WHITE_KING: { name: 'King', icon: '&#x2654;' },\r\n    WHITE_QUEEN: { name: 'Queen', icon: '&#x2655;' },\r\n    WHITE_KNIGHT: { name: 'Knight', icon: '&#x2658' },\r\n    WHITE_ROOK: { name: 'Rook', icon: '&#x2656' },\r\n    WHITE_PAWN: { name: 'Pawn', icon: '&#x2659' },\r\n    WHITE_BISHOP: { name: 'Bishop', icon: '&#x2657' },\r\n\r\n    BLACK_KING: { name: 'King', icon: '&#x265A' },\r\n    BLACK_QUEEN: { name: 'Queen', icon: '&#x265B' },\r\n    BLACK_KNIGHT: { name: 'Knight', icon: '&#x265E' },\r\n    BLACK_ROOK: { name: 'Rook', icon: '&#x265C' },\r\n    BLACK_PAWN: { name: 'Pawn', icon: '&#x265F' },\r\n    BLACK_BISHOP: { name: 'Bishop', icon: '&#x265D' },\r\n};\r\n","import { Board } from '../../../../../models/board';\r\nimport { Bishop } from '../../../../../models/pieces/bishop';\r\nimport { Color } from '../../../../../models/pieces/color';\r\nimport { King } from '../../../../../models/pieces/king';\r\nimport { Knight } from '../../../../../models/pieces/knight';\r\nimport { Pawn } from '../../../../../models/pieces/pawn';\r\nimport { Point } from '../../../../../models/pieces/point';\r\nimport { Queen } from '../../../../../models/pieces/queen';\r\nimport { Rook } from '../../../../../models/pieces/rook';\r\nimport { UnicodeConstants } from '../../../../../utils/unicode-constants';\r\nimport { AbstractEngineFacade } from '../../../../abstract-engine-facade';\r\nimport { NotationProcessor } from '../notation-processor';\r\n\r\nexport class DefaultFenProcessor implements NotationProcessor {\r\n\r\n    public process(notation: string, engineFacade: AbstractEngineFacade): void {\r\n        let fen = notation;\r\n        if (notation) {\r\n            engineFacade.board.reverted = false;\r\n            engineFacade.board.pieces = [];\r\n            const split = fen.split('/');\r\n            for (let i = 0; i < 8; ++i) {\r\n                let pointer = 0;\r\n                for (let j = 0; j < 8; ++j) {\r\n                    const chunk = split[i].charAt(j);\r\n                    if (chunk.match(/[0-9]/)) {\r\n                        pointer += Number(chunk);\r\n                    } else {\r\n                        switch (chunk) {\r\n                            case 'r':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Rook(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_ROOK,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n                            case 'n':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Knight(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_KNIGHT,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n\r\n                                break;\r\n                            case 'b':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Bishop(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_BISHOP,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n                            case 'q':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Queen(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_QUEEN,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n                            case 'k':\r\n                                engineFacade.board.pieces.push(\r\n                                    new King(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_KING,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n                            case 'p': {\r\n                                const pawn = new Pawn(\r\n                                    new Point(i, pointer),\r\n                                    Color.BLACK,\r\n                                    UnicodeConstants.BLACK_PAWN,\r\n                                    engineFacade.board\r\n                                );\r\n                                if (\r\n                                    (pawn.color === Color.BLACK && pawn.point.row !== 1) ||\r\n                                    (pawn.color === Color.WHITE && pawn.point.row !== 6)\r\n                                ) {\r\n                                    pawn.isMovedAlready = true;\r\n                                }\r\n                                engineFacade.board.pieces.push(pawn);\r\n                                break;\r\n                            }\r\n                            case 'R':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Rook(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_ROOK,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n\r\n                                break;\r\n                            case 'N':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Knight(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_KNIGHT,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n\r\n                            case 'B':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Bishop(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_BISHOP,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n\r\n                            case 'Q':\r\n                                engineFacade.board.pieces.push(\r\n                                    new Queen(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_QUEEN,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n\r\n                            case 'K':\r\n                                engineFacade.board.pieces.push(\r\n                                    new King(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_KING,\r\n                                        engineFacade.board\r\n                                    )\r\n                                );\r\n                                break;\r\n\r\n                            case 'P': {\r\n                                const pawn = new Pawn(\r\n                                    new Point(i, pointer),\r\n                                    Color.WHITE,\r\n                                    UnicodeConstants.WHITE_PAWN,\r\n                                    engineFacade.board\r\n                                );\r\n                                if (\r\n                                    (pawn.color === Color.BLACK && pawn.point.row !== 1) ||\r\n                                    (pawn.color === Color.WHITE && pawn.point.row !== 6)\r\n                                ) {\r\n                                    pawn.isMovedAlready = true;\r\n                                }\r\n                                engineFacade.board.pieces.push(pawn);\r\n                                break;\r\n                            }\r\n                        }\r\n                        ++pointer;\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setCurrentPlayer(engineFacade.board, fen);\r\n            this.setCastles(engineFacade.board, fen);\r\n            this.setEnPassant(fen);\r\n            this.setFullMoveCount(fen);\r\n            engineFacade.board.fen = fen;\r\n        } else {\r\n            throw Error('Incorrect FEN provided');\r\n        }\r\n    }\r\n\r\n\r\n    private setCurrentPlayer(board: Board, fen: string) {\r\n        if (fen) {\r\n            const split = fen.split(' ');\r\n            board.currentWhitePlayer = split[1] === 'w';\r\n        }\r\n    }\r\n\r\n    private setCastles(board: Board, fen: string) {\r\n        if (fen) {\r\n            const split = fen.split(' ');\r\n            const castleChunk = split[2];\r\n\r\n            if (!castleChunk.includes('K')) {\r\n                this.setRookAlreadyMoved(board, Color.WHITE, 7);\r\n            }\r\n\r\n            if (!castleChunk.includes('Q')) {\r\n                this.setRookAlreadyMoved(board, Color.WHITE, 0);\r\n            }\r\n\r\n            if (!castleChunk.includes('k')) {\r\n                this.setRookAlreadyMoved(board, Color.BLACK, 7);\r\n            }\r\n\r\n            if (!castleChunk.includes('q')) {\r\n                this.setRookAlreadyMoved(board, Color.BLACK, 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setFullMoveCount(fen: string) {}\r\n\r\n    private setEnPassant(fen: string) {\r\n        if (fen) {\r\n            const split = fen.split(' ');\r\n            const enPassantPoint = split[3];\r\n\r\n            if (enPassantPoint === '-') {\r\n                return;\r\n            }\r\n\r\n            // if()\r\n        }\r\n    }\r\n\r\n    private setRookAlreadyMoved(board: Board, color: Color, col: number) {\r\n        const rook = board.pieces.find(\r\n            (piece) => piece.color === color && piece instanceof Rook && piece.point.col === col\r\n        ) as Rook;\r\n\r\n        if (rook) {\r\n            rook.isMovedAlready = true;\r\n        }\r\n    }\r\n\r\n}\r\n","export class MoveTranslation {\r\n    private _xAxis: number;\r\n    private _yAxis: number;\r\n    private _reverted: boolean;\r\n\r\n    constructor(xAxis: number, yAxis: number, reverted: boolean) {\r\n        this._xAxis = xAxis;\r\n        this._yAxis = yAxis;\r\n        this._reverted = reverted;\r\n    }\r\n\r\n    get xAxis(): number {\r\n        return this._xAxis;\r\n    }\r\n\r\n    set xAxis(value: number) {\r\n        this._xAxis = value;\r\n    }\r\n\r\n    get yAxis(): number {\r\n        return this._yAxis;\r\n    }\r\n\r\n    set yAxis(value: number) {\r\n        this._yAxis = value;\r\n    }\r\n\r\n    get reverted(): boolean {\r\n        return this._reverted;\r\n    }\r\n\r\n    set reverted(value: boolean) {\r\n        this._reverted = value;\r\n    }\r\n}\r\n","import { Board } from '../models/board';\nimport { Bishop } from '../models/pieces/bishop';\nimport { Color } from '../models/pieces/color';\nimport { King } from '../models/pieces/king';\nimport { Knight } from '../models/pieces/knight';\nimport { Pawn } from '../models/pieces/pawn';\nimport { Piece } from '../models/pieces/piece';\nimport { Point } from '../models/pieces/point';\nimport { MoveTranslation } from '../models/move-translation';\nimport { Queen } from '../models/pieces/queen';\nimport { Rook } from '../models/pieces/rook';\n\nexport class MoveUtils {\n    public static willMoveCauseCheck(\n        currentColor: Color,\n        row: number,\n        col: number,\n        destRow: number,\n        destCol: number,\n        board: Board\n    ) {\n        const srcPiece = board.getPieceByField(row, col);\n        const destPiece = board.getPieceByField(destRow, destCol);\n\n        if (srcPiece) {\n            srcPiece.point.row = destRow;\n            srcPiece.point.col = destCol;\n        }\n\n        if (destPiece) {\n            board.pieces = board.pieces.filter((piece) => piece !== destPiece);\n        }\n        const isBound = board.isKingInCheck(currentColor, board.pieces);\n\n        if (srcPiece) {\n            srcPiece.point.col = col;\n            srcPiece.point.row = row;\n        }\n\n        if (destPiece) {\n            board.pieces.push(destPiece);\n        }\n\n        return isBound;\n    }\n\n    public static format(\n        sourcePoint: Point,\n        destPoint: Point,\n        reverted: boolean\n    ) {\n        if (reverted) {\n            const sourceX = 104 - sourcePoint.col;\n            const destX = 104 - destPoint.col;\n            return (\n                String.fromCharCode(sourceX) +\n                (sourcePoint.row + 1) +\n                String.fromCharCode(destX) +\n                (destPoint.row + 1)\n            );\n        } else {\n            const incrementX = 97;\n            return (\n                String.fromCharCode(sourcePoint.col + incrementX) +\n                (Math.abs(sourcePoint.row - 7) + 1) +\n                String.fromCharCode(destPoint.col + incrementX) +\n                (Math.abs(destPoint.row - 7) + 1)\n            );\n        }\n    }\n\n    public static translateCoordsToIndex(coords: string, reverted: boolean) {\n        let xAxis: number;\n        let yAxis: number;\n        if (reverted) {\n            xAxis = 104 - coords.charCodeAt(0);\n            yAxis = +coords.charAt(1) - 1;\n        } else {\n            xAxis = coords.charCodeAt(0) - 97;\n            yAxis = Math.abs(+coords.charAt(1) - 8);\n        }\n\n        return new MoveTranslation(xAxis, yAxis, reverted);\n    }\n\n    public static findPieceByPossibleMovesContaining(\n        coords: string,\n        board: Board,\n        color: Color\n    ): Piece[] {\n        let indexes = this.translateCoordsToIndex(coords, board.reverted);\n        let destPoint = new Point(indexes.yAxis, indexes.xAxis);\n        let foundPieces = [];\n\n        for (let piece of board.pieces.filter(piece => piece.color === color)) {\n            for (let point of piece.getPossibleMoves()) {\n                if (!MoveUtils.willMoveCauseCheck(\n                    piece.color,\n                    piece.point.row,\n                    piece.point.col,\n                    indexes.yAxis,\n                    indexes.xAxis,\n                    board\n                ) && point.isEqual(destPoint)) {\n                    foundPieces.push(piece);\n                }\n            }\n        }\n        return foundPieces;\n    }\n\n    public static findPieceByPossibleCapturesContaining(\n        coords: string,\n        board: Board,\n        color: Color\n    ): Piece[] {\n        let indexes = this.translateCoordsToIndex(coords, board.reverted);\n        let destPoint = new Point(indexes.yAxis, indexes.xAxis);\n        let foundPieces = [];\n        for (let piece of board.pieces.filter(piece => piece.color === color)) {\n            for (let point of piece.getPossibleCaptures()) {\n                if (!MoveUtils.willMoveCauseCheck(\n                    piece.color,\n                    piece.point.row,\n                    piece.point.col,\n                    indexes.yAxis,\n                    indexes.xAxis,\n                    board\n                ) && point.isEqual(destPoint)) {\n                    foundPieces.push(piece);\n                }\n            }\n        }\n\n        return foundPieces;\n    }\n\n    public static formatSingle(point: Point, reverted: boolean): string {\n        if (reverted) {\n            const sourceX = 104 - point.col;\n            return (\n                String.fromCharCode(sourceX) +\n                (point.row + 1)\n            );\n        } else {\n            const incrementX = 97;\n            return (\n                String.fromCharCode(point.col + incrementX) +\n                (Math.abs(point.row - 7) + 1)\n            );\n        }\n    }\n\n    public static getFirstLetterPiece(piece: Piece): string {\n        if (piece instanceof Pawn) {\n            return 'P';\n        } else {\n            if (piece instanceof Knight) {\n                return 'N';\n            } else {\n                if (piece instanceof Bishop) {\n                    return 'B';\n                } else {\n                    if (piece instanceof Rook) {\n                        return 'R';\n                    } else {\n                        if (piece instanceof King) {\n                            return 'K';\n                        } else {\n                            if (piece instanceof Queen) {\n                                return 'Q';\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        return '';\n    }\n\n    static reverse(board: Board, row: number) {\n        return board.reverted\n            ? row + 1\n            : Math.abs(row - 7) + 1;\n    }\n\n    static formatCol(board: Board, col: number): string {\n        return board.reverted\n            ? String.fromCharCode(104 - col)\n            : String.fromCharCode(97 + col);\n    }\n}\n","import { Board } from '../../../models/board';\r\nimport { Bishop } from '../../../models/pieces/bishop';\r\nimport { Color } from '../../../models/pieces/color';\r\nimport { King } from '../../../models/pieces/king';\r\nimport { Knight } from '../../../models/pieces/knight';\r\nimport { Pawn } from '../../../models/pieces/pawn';\r\nimport { Point } from '../../../models/pieces/point';\r\nimport { Queen } from '../../../models/pieces/queen';\r\nimport { Rook } from '../../../models/pieces/rook';\r\nimport { UnicodeConstants } from '../../../utils/unicode-constants';\r\n\r\nexport class DefaultPiecesLoader {\r\n\r\n    static loadDefaultPieces(board: Board) {\r\n        board.pieces = [];\r\n        // piony czarne\r\n        for (let i = 0; i < 8; ++i) {\r\n            board.pieces.push(new Pawn(\r\n                new Point(1, i),\r\n                Color.BLACK,\r\n                UnicodeConstants.BLACK_PAWN,\r\n                board\r\n            ));\r\n        }\r\n        board.pieces.push(new Rook(\r\n            new Point(0, 0),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_ROOK,\r\n            board\r\n        ));\r\n        board.pieces.push(new Knight(\r\n            new Point(0, 1),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_KNIGHT,\r\n            board\r\n        ));\r\n        board.pieces.push(new Bishop(\r\n            new Point(0, 2),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_BISHOP,\r\n            board\r\n        ));\r\n        board.pieces.push(new Queen(\r\n            new Point(0, 3),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_QUEEN,\r\n            board\r\n        ));\r\n        board.pieces.push(new King(\r\n            new Point(0, 4),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_KING,\r\n            board\r\n        ));\r\n        board.pieces.push(new Bishop(\r\n            new Point(0, 5),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_BISHOP,\r\n            board\r\n        ));\r\n        board.pieces.push(new Knight(\r\n            new Point(0, 6),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_KNIGHT,\r\n            board\r\n        ));\r\n        board.pieces.push(new Rook(\r\n            new Point(0, 7),\r\n            Color.BLACK,\r\n            UnicodeConstants.BLACK_ROOK,\r\n            board\r\n        ));\r\n\r\n        // piony biale\r\n        for (let i = 0; i < 8; ++i) {\r\n            board.pieces.push(new Pawn(\r\n                new Point(6, i),\r\n                Color.WHITE,\r\n                UnicodeConstants.WHITE_PAWN,\r\n                board\r\n            ));\r\n        }\r\n        board.pieces.push(new Rook(\r\n            new Point(7, 0),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_ROOK,\r\n            board\r\n        ));\r\n        board.pieces.push(new Knight(\r\n            new Point(7, 1),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_KNIGHT,\r\n            board\r\n        ));\r\n        board.pieces.push(new Bishop(\r\n            new Point(7, 2),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_BISHOP,\r\n            board\r\n        ));\r\n        board.pieces.push(new Queen(\r\n            new Point(7, 3),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_QUEEN,\r\n            board\r\n        ));\r\n        board.pieces.push(new King(\r\n            new Point(7, 4),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_KING,\r\n            board\r\n        ));\r\n        board.pieces.push(new Bishop(\r\n            new Point(7, 5),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_BISHOP,\r\n            board\r\n        ));\r\n        board.pieces.push(new Knight(\r\n            new Point(7, 6),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_KNIGHT,\r\n            board\r\n        ));\r\n        board.pieces.push(new Rook(\r\n            new Point(7, 7),\r\n            Color.WHITE,\r\n            UnicodeConstants.WHITE_ROOK,\r\n            board\r\n        ));\r\n\r\n        board.calculateFEN();\r\n\r\n    }\r\n\r\n}\r\n","import { Board } from '../../../../../models/board';\r\nimport { Bishop } from '../../../../../models/pieces/bishop';\r\nimport { Color } from '../../../../../models/pieces/color';\r\nimport { King } from '../../../../../models/pieces/king';\r\nimport { Knight } from '../../../../../models/pieces/knight';\r\nimport { Pawn } from '../../../../../models/pieces/pawn';\r\nimport { Piece } from '../../../../../models/pieces/piece';\r\nimport { Point } from '../../../../../models/pieces/point';\r\nimport { Queen } from '../../../../../models/pieces/queen';\r\nimport { Rook } from '../../../../../models/pieces/rook';\r\nimport { MoveUtils } from '../../../../../utils/move-utils';\r\nimport { AbstractEngineFacade } from '../../../../abstract-engine-facade';\r\nimport { DefaultPiecesLoader } from '../../default-pieces-loader';\r\nimport { NotationProcessor } from '../notation-processor';\r\n\r\nexport class DefaultPgnProcessor implements NotationProcessor {\r\n\r\n    public process(notation: string, engineFacade: AbstractEngineFacade): void {\r\n        if (notation) {\r\n            engineFacade.board.reverted = false;\r\n            engineFacade.board.pieces = [];\r\n            engineFacade.reset();\r\n            DefaultPiecesLoader.loadDefaultPieces(engineFacade.board);\r\n            let moves = this.extractMoves(notation);\r\n            let counter = -1;\r\n            for (let move of moves) {\r\n                ++counter;\r\n                move = move.replace(/[+#]/g, '');\r\n                let promotionIndex = '';\r\n\r\n                if (move.includes('=')) {\r\n                    promotionIndex = this.resolvePromotion(move.substring(move.length - 1));\r\n                    move = move.substring(0, move.length - 2);\r\n                }\r\n\r\n                let color = (counter === 0 || counter % 2 === 0)\r\n                    ? Color.WHITE\r\n                    : Color.BLACK;\r\n\r\n                if (/^[a-z]\\d$/g.test(move)) { // zwykly ruch na wolne pole e4\r\n                    let piece = MoveUtils.findPieceByPossibleMovesContaining(\r\n                        move,\r\n                        engineFacade.board,\r\n                        color\r\n                    ).find(piece => piece instanceof Pawn);\r\n                    if (piece) {\r\n                        engineFacade.move(MoveUtils.formatSingle(\r\n                            piece.point,\r\n                            false\r\n                        ) + move + promotionIndex);\r\n                    } else {\r\n                    }\r\n                } else {\r\n                    if (/^[A-Z][a-h]\\d$/g.test(move)) {// jezeli ma wielka litere, czyli trzeba odszukac ktora figura Nf3\r\n                        let pieces = MoveUtils.findPieceByPossibleMovesContaining(\r\n                            move.substring(1),\r\n                            engineFacade.board,\r\n                            color\r\n                        );\r\n                        let piece = pieces.find(piece => this.resolvePieceByFirstChar(\r\n                            move.charAt(0),\r\n                            piece\r\n                        ));\r\n                        if (piece) {\r\n                            engineFacade.move(MoveUtils.formatSingle(\r\n                                piece.point,\r\n                                false\r\n                            ) + move.substring(1) + promotionIndex);\r\n                        } else {\r\n                        }\r\n                    } else {\r\n                        if ('O-O' === move) {\r\n                            engineFacade.move(color === Color.WHITE ? 'e1g1' : 'e8g8');\r\n                        } else {\r\n                            if (/^[a-z]x[a-z]\\d$/g.test(move)) { //exd5\r\n                                let pieces = MoveUtils.findPieceByPossibleCapturesContaining(\r\n                                    move.substring(move.indexOf('x') + 1),\r\n                                    engineFacade.board,\r\n                                    color\r\n                                ).filter(piece => piece instanceof Pawn);\r\n\r\n                                let piece;\r\n                                if (pieces.length > 1) {\r\n                                    piece = this.resolveByCol(\r\n                                        pieces,\r\n                                        move.substring(0, 1)\r\n                                    );\r\n                                } else {\r\n                                    piece = pieces[0];\r\n                                }\r\n\r\n                                if (piece) {\r\n                                    engineFacade.move(MoveUtils.formatSingle(\r\n                                        piece.point,\r\n                                        false\r\n                                    ) + move.substring(move.indexOf('x') + 1) + promotionIndex);\r\n                                } else {\r\n                                }\r\n                            } else {\r\n                                if (/^[A-Z]x[a-z]\\d$/g.test(move)) {\r\n                                    let piece = MoveUtils.findPieceByPossibleCapturesContaining(\r\n                                        move.substring(move.indexOf('x') + 1),\r\n                                        engineFacade.board,\r\n                                        color\r\n                                    ).find(piece => this.resolvePieceByFirstChar(\r\n                                        move.substring(0, 1),\r\n                                        piece\r\n                                    ));\r\n                                    if (piece) {\r\n                                        engineFacade.move(MoveUtils.formatSingle(\r\n                                            piece.point,\r\n                                            false\r\n                                        ) + move.substring(move.indexOf('x') + 1) + promotionIndex);\r\n                                    } else {\r\n                                    }\r\n                                } else {\r\n                                    if (move === 'O-O-O') {\r\n                                        engineFacade.move(color === Color.WHITE ? 'e1c1' : 'e8c8');\r\n                                    } else {\r\n                                        if (/^[A-Z]\\dx[a-z]\\d$/g.test(move)) {  //Ngxe4 sytuacja 2 skoczkow pion bicie\r\n                                            let pieces = MoveUtils.findPieceByPossibleCapturesContaining(\r\n                                                move.substring(move.indexOf('x') + 1),\r\n                                                engineFacade.board,\r\n                                                color\r\n                                            ).filter(piece => this.resolvePieceByFirstChar(\r\n                                                move.charAt(0),\r\n                                                piece\r\n                                            ));\r\n\r\n                                            let piece = this.resolveByRow(\r\n                                                pieces,\r\n                                                move.substring(1, 2)\r\n                                            );\r\n\r\n                                            if (piece) {\r\n                                                engineFacade.move(MoveUtils.formatSingle(\r\n                                                    piece.point,\r\n                                                    false\r\n                                                ) + move.substring(move.indexOf(\r\n                                                    'x') + 1) + promotionIndex);\r\n                                            }\r\n                                        } else {\r\n                                            if (/^[A-Z][a-z][a-z]\\d$/g.test(move)) { // dwie wieze bez bicia Rac1 pion\r\n                                                let pieces = MoveUtils.findPieceByPossibleMovesContaining(\r\n                                                    move.substring(2, 4),\r\n                                                    engineFacade.board,\r\n                                                    color\r\n                                                ).filter(piece => this.resolvePieceByFirstChar(\r\n                                                    move.charAt(0),\r\n                                                    piece\r\n                                                ));\r\n\r\n                                                let piece = this.resolveByCol(\r\n                                                    pieces,\r\n                                                    move.substring(1, 2)\r\n                                                );\r\n\r\n                                                if (piece) {\r\n                                                    engineFacade.move(MoveUtils.formatSingle(\r\n                                                        piece.point,\r\n                                                        false\r\n                                                    ) + move.substring(\r\n                                                        2,\r\n                                                        4\r\n                                                    ) + promotionIndex);\r\n                                                }\r\n                                            } else {\r\n                                                if (/^[A-Z][a-z]x[a-z]\\d$/g.test(\r\n                                                    move)) {\r\n                                                    let pieces = MoveUtils.findPieceByPossibleCapturesContaining(\r\n                                                        move.substring(move.indexOf(\r\n                                                            'x') + 1),\r\n                                                        engineFacade.board,\r\n                                                        color\r\n                                                    ).filter(piece => this.resolvePieceByFirstChar(\r\n                                                        move.charAt(0),\r\n                                                        piece\r\n                                                    ));\r\n\r\n                                                    let piece = this.resolveByCol(\r\n                                                        pieces,\r\n                                                        move.substring(1, 2)\r\n                                                    );\r\n\r\n                                                    if (piece) {\r\n                                                        engineFacade.move(\r\n                                                            MoveUtils.formatSingle(\r\n                                                                piece.point,\r\n                                                                false\r\n                                                            ) + move.substring(\r\n                                                            move.indexOf(\r\n                                                                'x') + 1) + promotionIndex);\r\n                                                    }\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    protected extractMoves(notation: string) {\r\n        return notation.substring(notation.lastIndexOf(']') + 1)\r\n            .replace(/[0-9]+\\./g, '')\r\n            .replace(/\\s+/g, ' ')\r\n            .replace(/{[^}]*}/g, '')\r\n            .trim()\r\n            .split(' ')\r\n            .filter(s => s);\r\n    }\r\n\r\n    protected movePiece(piece: Piece, board: Board, move: string) {\r\n        let indexes = MoveUtils.translateCoordsToIndex(move, board.reverted);\r\n        piece.point.col = indexes.xAxis;\r\n        piece.point.row = indexes.yAxis;\r\n    }\r\n\r\n    hasUpperCase(move: string) {\r\n        return /[A-Z]/.test(move);\r\n    }\r\n\r\n    private resolvePieceByFirstChar(move: string, piece: Piece) {\r\n        let piecesFirstChar = '';\r\n        if (piece instanceof King) {\r\n            piecesFirstChar = 'K';\r\n        } else {\r\n            if (piece instanceof Queen) {\r\n                piecesFirstChar = 'Q';\r\n            } else {\r\n                if (piece instanceof Rook) {\r\n                    piecesFirstChar = 'R';\r\n                } else {\r\n                    if (piece instanceof Bishop) {\r\n                        piecesFirstChar = 'B';\r\n                    } else {\r\n                        if (piece instanceof Knight) {\r\n                            piecesFirstChar = 'N';\r\n                        } else {\r\n                            if (piece instanceof Pawn) {\r\n                                piecesFirstChar = 'P';\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        return move === piecesFirstChar;\r\n    }\r\n\r\n    private isShortCastle(move: string) {\r\n        return move === 'O-O';\r\n    }\r\n\r\n    private removePiece(coords: string, board: Board) {\r\n        let indexes = MoveUtils.translateCoordsToIndex(coords, board.reverted);\r\n\r\n        board.pieces = board.pieces.filter(e => !e.point.isEqual(new Point(\r\n            indexes.yAxis,\r\n            indexes.xAxis\r\n        )));\r\n    }\r\n\r\n    private isLongCastle(move: string) {\r\n        return move === 'O-O-O';\r\n    }\r\n\r\n    private resolveByCol(pieces: Piece[], char: string): Piece {\r\n        let firstPieceFormat = MoveUtils.formatSingle(pieces[0].point, false);\r\n        let secondPieceFormat = MoveUtils.formatSingle(pieces[1].point, false);\r\n        return firstPieceFormat.substring(0, 1) === char\r\n            ? pieces[0]\r\n            : pieces[1];\r\n    }\r\n\r\n    private resolveByRow(pieces: Piece[], char: string) {\r\n        let firstPieceFormat = MoveUtils.formatSingle(pieces[0].point, false);\r\n        let secondPieceFormat = MoveUtils.formatSingle(pieces[1].point, false);\r\n        return firstPieceFormat.substring(1, 2) === char\r\n            ? pieces[0]\r\n            : pieces[1];\r\n    }\r\n\r\n    private replacePromotion(move: string) {\r\n        return move\r\n            .replace('=Q', '1')\r\n            .replace('=R', '2')\r\n            .replace('=B', '3')\r\n            .replace('=K', '4');\r\n    }\r\n\r\n    private resolvePromotion(promotionChar: string) {\r\n        switch (promotionChar) {\r\n            case 'Q':\r\n                return '1';\r\n            case 'R':\r\n                return '2';\r\n            case 'B':\r\n                return '3';\r\n            case 'N':\r\n                return '4';\r\n        }\r\n        return '';\r\n    }\r\n}\r\n","export class DrawPoint {\r\n    x: number;\r\n    y: number;\r\n    color: string;\r\n\r\n    constructor(x: number, y: number, color: string) {\r\n        this.x = x + 0.5;\r\n        this.y = y + 0.5;\r\n        this.color = color;\r\n    }\r\n\r\n    isEqual(that: DrawPoint) {\r\n        return that && that.x === this.x && this.y === that.y;\r\n    }\r\n}\r\n","import { Point } from '../../models/pieces/point';\r\nimport { ColorStrategy } from '../drawing-tools/colors/color-strategy';\r\nimport { DrawPoint } from '../drawing-tools/draw-point';\r\n\r\nexport class ClickUtils {\r\n\r\n    static getClickPoint(\r\n        event: any,\r\n        top: number,\r\n        height: number,\r\n        left: number,\r\n        width: number\r\n    ) {\r\n        return new Point(\r\n            Math.floor((event.y - top) / (height / 8)),\r\n            Math.floor((event.x - left) / (width / 8)\r\n            )\r\n        );\r\n    }\r\n\r\n    static getDrawingPoint(\r\n        tileSize: number,\r\n        colorStrategy: ColorStrategy,\r\n        x: number,\r\n        y: number,\r\n        ctrl: boolean,\r\n        alt: boolean,\r\n        shift: boolean,\r\n        xAxis: number,\r\n        yAxis: number\r\n    ) {\r\n        const squareSize = tileSize / 8;\r\n        const xx = Math.floor(\r\n            (x - xAxis) /\r\n            squareSize\r\n        );\r\n        const yy = Math.floor(\r\n            (y - yAxis) /\r\n            squareSize\r\n        );\r\n\r\n        let color = colorStrategy.resolve(ctrl, shift, alt);\r\n\r\n        return new DrawPoint(\r\n            Math.floor(xx * squareSize + squareSize / 2),\r\n            Math.floor(yy * squareSize + squareSize / 2),\r\n            color\r\n        );\r\n    }\r\n\r\n}\r\n","export class HistoryMove {\r\n    move: string;\r\n    piece: string;\r\n    color: string;\r\n    x: boolean;\r\n\r\n    constructor(move: string, piece: string, color: string, captured: boolean) {\r\n        this.move = move;\r\n        this.piece = piece;\r\n        this.color = color;\r\n        this.x = captured;\r\n    }\r\n}\r\n","import { BehaviorSubject } from 'rxjs';\r\nimport { HistoryMove } from './history-move';\r\n\r\nexport class HistoryMoveProvider {\r\n    historyMovesSubject$ = new BehaviorSubject<HistoryMove[]>([]);\r\n\r\n    get historyMoves(): HistoryMove[] {\r\n        return this.historyMovesSubject$.value;\r\n    }\r\n\r\n    set historyMoves(states: HistoryMove[]) {\r\n        this.historyMovesSubject$.next(states);\r\n    }\r\n\r\n    addMove(historyMove: HistoryMove) {\r\n        this.historyMoves = [...this.historyMoves, historyMove];\r\n    }\r\n\r\n    pop(): HistoryMove {\r\n        const lastHistoryMove = this.getLastMove();\r\n        this.historyMoves = this.historyMoves.filter(\r\n            (state) => state !== lastHistoryMove\r\n        );\r\n        return lastHistoryMove;\r\n    }\r\n\r\n    getAll() {\r\n        return this.historyMoves;\r\n    }\r\n\r\n    clear() {\r\n        this.historyMoves = [];\r\n    }\r\n\r\n    getLastMove() {\r\n        return this.historyMoves[this.getLastMoveIndex()];\r\n    }\r\n\r\n    getLastMoveIndex() {\r\n        return this.historyMoves.length - 1;\r\n    }\r\n}\r\n","export class Constants {\n    static readonly DEFAULT_DARK_TILE_COLOR = 'rgb(97, 84, 61)';\n    static readonly DEFAULT_LIGHT_TILE_COLOR = '#BAA378';\n\n    static readonly DEFAULT_SIZE = 500;\n    static readonly MIN_BOARD_SIZE = 100;\n    static readonly MAX_BOARD_SIZE = 4000;\n\n}\n","import { Bishop } from '../../models/pieces/bishop';\r\nimport { Color } from '../../models/pieces/color';\r\nimport { King } from '../../models/pieces/king';\r\nimport { Knight } from '../../models/pieces/knight';\r\nimport { Pawn } from '../../models/pieces/pawn';\r\nimport { Piece } from '../../models/pieces/piece';\r\nimport { Queen } from '../../models/pieces/queen';\r\nimport { Rook } from '../../models/pieces/rook';\r\nimport { PieceIconInput } from './piece-icon-input';\r\n\r\nexport class PieceIconInputManager {\r\n\r\n    private _defaultIcons: boolean = false;\r\n    private _pieceIconInput: PieceIconInput;\r\n\r\n    get pieceIconInput(): PieceIconInput {\r\n        return this._pieceIconInput;\r\n    }\r\n\r\n    set pieceIconInput(value: PieceIconInput) {\r\n        this._pieceIconInput = value;\r\n    }\r\n\r\n\r\n    get defaultIcons(): boolean {\r\n        return this._defaultIcons;\r\n    }\r\n\r\n    set defaultIcons(value: boolean) {\r\n        this._defaultIcons = value;\r\n    }\r\n\r\n    isDefaultIcons(): boolean {\r\n        return this.pieceIconInput === undefined || this.pieceIconInput === null;\r\n    }\r\n\r\n    getPieceIcon(piece: Piece): string {\r\n        let isWhite = (piece.color === Color.WHITE);\r\n        switch (piece.constructor) {\r\n            case King:\r\n                return isWhite ? this.pieceIconInput.whiteKingUrl : this.pieceIconInput.blackKingUrl;\r\n            case Queen:\r\n                return isWhite ? this.pieceIconInput.whiteQueenUrl : this.pieceIconInput.blackQueenUrl;\r\n            case Rook:\r\n                return isWhite ? this.pieceIconInput.whiteRookUrl : this.pieceIconInput.blackRookUrl;\r\n            case Bishop:\r\n                return isWhite ? this.pieceIconInput.whiteBishopUrl : this.pieceIconInput.blackBishopUrl;\r\n            case Knight:\r\n                return isWhite ? this.pieceIconInput.whiteKnightUrl : this.pieceIconInput.blackKnightUrl;\r\n            case Pawn:\r\n                return isWhite ? this.pieceIconInput.whitePawnUrl : this.pieceIconInput.blackPawnUrl;\r\n        }\r\n    }\r\n\r\n    loadDefaultData(){\r\n        this.pieceIconInput = {\r\n            blackBishopUrl: '',\r\n            blackKingUrl: '',\r\n            blackKnightUrl: '',\r\n            blackQueenUrl: '',\r\n            blackRookUrl: '',\r\n            whiteBishopUrl: '',\r\n            whiteKingUrl: '',\r\n            whiteKnightUrl: '',\r\n            whitePawnUrl: '',\r\n            whiteQueenUrl: '',\r\n            whiteRookUrl: '',\r\n            blackPawnUrl: 'a'\r\n        }\r\n    }\r\n\r\n}\r\n","export enum PieceTypeInput {\r\n\r\n    KING = 1,\r\n    QUEEN = 2,\r\n    BISHOP = 3,\r\n    KNIGHT = 4,\r\n    ROOK = 5,\r\n    PAWN = 6\r\n\r\n}\r\n\r\nexport enum ColorInput {\r\n\r\n    LIGHT = 1,\r\n    DARK = 2\r\n\r\n}\r\n","export class CoordsProvider {\r\n    private readonly defaultXCoords: string[] = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\r\n\r\n    private readonly defaultYCoords: number[] = [8, 7, 6, 5, 4, 3, 2, 1];\r\n\r\n    private currentXCoords: string[] = [...this.defaultXCoords];\r\n    private currentYCoords: number[] = [...this.defaultYCoords];\r\n\r\n    get xCoords(): string[] {\r\n        return this.currentXCoords;\r\n    }\r\n\r\n    get yCoords(): number[] {\r\n        return this.currentYCoords;\r\n    }\r\n\r\n    reverse() {\r\n        this.currentXCoords = this.currentXCoords.reverse();\r\n        this.currentYCoords = this.currentYCoords.reverse();\r\n    }\r\n\r\n    reset() {\r\n        this.init();\r\n    }\r\n\r\n    private init() {\r\n        this.currentXCoords = [...this.defaultXCoords];\r\n        this.currentYCoords = [...this.defaultYCoords];\r\n    }\r\n}\r\n","import { CdkDragEnd, CdkDragStart } from '@angular/cdk/drag-drop';\r\nimport { DragEndProcessor } from './drag-end-processor';\r\n\r\nexport class DefaultDragEndProcessor implements DragEndProcessor {\r\n\r\n    dragEnded(event: CdkDragEnd) {\r\n        event.source.reset();\r\n        event.source.element.nativeElement.style.zIndex = '0';\r\n        event.source.element.nativeElement.style.pointerEvents = 'auto';\r\n        event.source.element.nativeElement.style.touchAction = 'auto';\r\n    }\r\n\r\n}\r\n","import { CdkDragEnd } from '@angular/cdk/drag-drop';\r\nimport { DefaultDragEndProcessor } from './default-drag-end-processor';\r\nimport { DragEndProcessor } from './drag-end-processor';\r\n\r\nexport class DragEndStrategy {\r\n\r\n    private dragEndProcessor: DragEndProcessor;\r\n\r\n    constructor() {\r\n        this.dragEndProcessor = new DefaultDragEndProcessor();\r\n    }\r\n\r\n    public process(event: CdkDragEnd): void {\r\n        this.dragEndProcessor.dragEnded(event);\r\n    }\r\n\r\n    setDragEndProcessor(processor: DragEndProcessor) {\r\n        this.dragEndProcessor = processor;\r\n    }\r\n\r\n}\r\n","import { CdkDragStart } from '@angular/cdk/drag-drop';\nimport { DragStartProcessor } from './drag-start-processor';\n\nexport class DefaultDragStartProcessor implements DragStartProcessor {\n\n    dragStarted(event: CdkDragStart) {\n        const style = event.source.element.nativeElement.style;\n        style.position = 'relative';\n        style.zIndex = '1000';\n        style.touchAction = 'none';\n        style.pointerEvents = 'none';\n    }\n\n}\n","import { CdkDragStart } from '@angular/cdk/drag-drop';\r\nimport { DefaultDragStartProcessor } from './default-drag-start-processor';\r\nimport { DragStartProcessor } from './drag-start-processor';\r\n\r\nexport class DragStartStrategy {\r\n\r\n    private dragStartProcessor: DragStartProcessor;\r\n\r\n    constructor() {\r\n        this.dragStartProcessor = new DefaultDragStartProcessor();\r\n    }\r\n\r\n    public process(event: CdkDragStart): void {\r\n        this.dragStartProcessor.dragStarted(event);\r\n    }\r\n\r\n    setDragStartProcessor(processor: DragStartProcessor) {\r\n        this.dragStartProcessor = processor;\r\n    }\r\n\r\n}\r\n","import { ColorProcessor } from './color-processor';\r\n\r\nexport class DefaultColorProcessor implements ColorProcessor{\r\n\r\n    resolve(ctrl: any, shift: any, alt: any): string{\r\n        let color = 'green';\r\n\r\n        if (ctrl || shift) {\r\n            color = 'red';\r\n        }\r\n        if (alt) {\r\n            color = 'blue';\r\n        }\r\n        if ((shift || ctrl) && alt) {\r\n            color = 'orange';\r\n        }\r\n\r\n        return color;\r\n    }\r\n\r\n}\r\n","import { ColorProcessor } from './color-processor';\r\nimport { DefaultColorProcessor } from './default-color-processor';\r\n\r\nexport class ColorStrategy {\r\n\r\n    colorProcessor: ColorProcessor;\r\n\r\n    constructor() {\r\n        this.colorProcessor = new DefaultColorProcessor();\r\n    }\r\n\r\n    resolve(ctrl: any, shift: any, alt: any) {\r\n        return this.colorProcessor.resolve(ctrl, shift, alt);\r\n    }\r\n\r\n    setColorProcessor(colorProcessor: ColorProcessor) {\r\n        this.colorProcessor = colorProcessor;\r\n    }\r\n\r\n}\r\n","import { BehaviorSubject } from 'rxjs';\r\nimport { Arrow } from './shapes/arrow';\r\nimport { Circle } from './shapes/circle';\r\n\r\nexport class DrawProvider {\r\n    private arrowsSubject$ = new BehaviorSubject<Arrow[]>([]);\r\n    private circlesSubject$ = new BehaviorSubject<Circle[]>([]);\r\n\r\n    public arrows$ = this.arrowsSubject$.asObservable();\r\n    public circles$ = this.circlesSubject$.asObservable();\r\n\r\n    private get circles(): Circle[] {\r\n        return this.circlesSubject$.value;\r\n    }\r\n\r\n    private set circles(circles: Circle[]) {\r\n        this.circlesSubject$.next(circles);\r\n    }\r\n\r\n    private get arrows(): Arrow[] {\r\n        return this.arrowsSubject$.value;\r\n    }\r\n\r\n    private set arrows(arrows: Arrow[]) {\r\n        this.arrowsSubject$.next(arrows);\r\n    }\r\n\r\n    addCircle(circle: Circle) {\r\n        this.circles = [...this.circles, circle];\r\n    }\r\n\r\n    reomveCircle(removeCircle: Circle) {\r\n        this.circles = this.circles.filter((circle) => !circle.isEqual(removeCircle));\r\n    }\r\n\r\n    addArrow(arrow: Arrow) {\r\n        this.arrows = [...this.arrows, arrow];\r\n    }\r\n\r\n    removeArrow(removeArrow: Arrow) {\r\n        this.arrows = this.arrows.filter((arrow) => !arrow.isEqual(removeArrow));\r\n    }\r\n\r\n    containsCircle(checkCircle: Circle) {\r\n        return this.circles.some((circle) => circle.isEqual(checkCircle));\r\n    }\r\n\r\n    containsArrow(checkArrow: Arrow) {\r\n        return this.arrows.some((arrow: Arrow) => arrow.isEqual(checkArrow));\r\n    }\r\n\r\n    clear() {\r\n        this.arrows = [];\r\n        this.circles = [];\r\n    }\r\n}\r\n","import { Board } from '../../models/board';\nimport { King } from '../../models/pieces/king';\nimport { Pawn } from '../../models/pieces/pawn';\nimport { Piece } from '../../models/pieces/piece';\nimport { Point } from '../../models/pieces/point';\nimport { MoveUtils } from '../../utils/move-utils';\nimport { AbstractPgnProcessor } from './abstract-pgn-processor';\n\nexport class DefaultPgnProcessor extends AbstractPgnProcessor {\n\n    public process(\n        board: Board,\n        sourcePiece: Piece,\n        destPoint: Point,\n        destPiece?: Piece\n    ): void {\n        this.currentIndex += 0.5;\n        this.pgn += (this.currentIndex % Math.floor(this.currentIndex) === 0) ? (' ' + this.currentIndex + '. ') : ' ';\n\n        let possibleCaptures = [];\n        let possibleMoves = [];\n\n        if (destPiece) {\n            possibleCaptures = MoveUtils.findPieceByPossibleCapturesContaining(\n                MoveUtils.formatSingle(destPoint, board.reverted),\n                board,\n                sourcePiece.color\n            ).filter(piece => piece.constructor.name === sourcePiece.constructor.name);\n        }\n        possibleMoves = MoveUtils.findPieceByPossibleMovesContaining(\n            MoveUtils.formatSingle(destPoint, board.reverted),\n            board,\n            sourcePiece.color\n        ).filter(piece => piece.constructor.name === sourcePiece.constructor.name);\n\n        if (sourcePiece instanceof Pawn && !destPiece && possibleCaptures.length === 0) {\n            this.pgn += MoveUtils.formatSingle(destPoint, board.reverted);\n        } else {\n            if (sourcePiece instanceof Pawn && destPiece) {\n                this.pgn += MoveUtils.formatSingle(\n                    sourcePiece.point,\n                    board.reverted\n                ).substring(0, 1) + 'x' + MoveUtils.formatSingle(\n                    destPoint,\n                    board.reverted\n                );\n            } else {\n                if (sourcePiece instanceof King && (Math.abs(sourcePiece.point.col - destPoint.col) === 2)) {\n                    if (board.reverted) {\n                        this.pgn += destPoint.col < 2\n                            ? 'O-O'\n                            : 'O-O-O';\n                    } else {\n                        this.pgn += destPoint.col < 3\n                            ? 'O-O-O'\n                            : 'O-O';\n                    }\n                } else {\n                    if (!(sourcePiece instanceof Pawn) && possibleCaptures.length === 0 && possibleMoves.length < 2) {     // Nf3\n                        this.pgn += MoveUtils.getFirstLetterPiece(sourcePiece) + MoveUtils.formatSingle(\n                            destPoint,\n                            board.reverted\n                        );\n                    } else {\n                        if (possibleMoves && possibleMoves.length === 2 && possibleCaptures.length === 0) {    // Nbd7\n                            if (this.isEqualByCol(\n                                possibleMoves[0],\n                                possibleMoves[1]\n                            )) {\n                                this.pgn += MoveUtils.getFirstLetterPiece(\n                                    sourcePiece) + MoveUtils.reverse(\n                                    board,\n                                    sourcePiece.point.row\n                                ) + MoveUtils.formatSingle(\n                                    destPoint,\n                                    board.reverted\n                                );\n                            } else {\n                                this.pgn += MoveUtils.getFirstLetterPiece(\n                                    sourcePiece) + MoveUtils.formatCol(\n                                    board,\n                                    sourcePiece.point.col\n                                ) + MoveUtils.formatSingle(\n                                    destPoint,\n                                    board.reverted\n                                );\n                            }\n                        } else {\n                            if (possibleCaptures.length > 1) {\n                                if ((this.isEqualByCol(\n                                    possibleCaptures[0],\n                                    possibleCaptures[1]\n                                ))) {\n                                    this.pgn += MoveUtils.getFirstLetterPiece(\n                                        sourcePiece) + MoveUtils.reverse(\n                                        board,\n                                        sourcePiece.point.row\n                                    ) + 'x' + MoveUtils.formatSingle(\n                                        destPoint,\n                                        board.reverted\n                                    );\n                                } else {\n                                    this.pgn += MoveUtils.getFirstLetterPiece(\n                                        sourcePiece) + MoveUtils.formatCol(\n                                        board,\n                                        sourcePiece.point.col\n                                    ) + 'x' + MoveUtils.formatSingle(\n                                        destPoint,\n                                        board.reverted\n                                    );\n                                }\n                            } else {\n                                this.pgn += MoveUtils.getFirstLetterPiece(\n                                    sourcePiece) + 'x' + MoveUtils.formatSingle(\n                                    destPoint, board.reverted\n                                );\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        this.pgn = this.pgn.trim();\n    }\n\n    private resolvePieceByFirstChar(move: string, piece: Piece) {\n        return MoveUtils.getFirstLetterPiece(piece) === move;\n    }\n\n    private isEqualByCol(aPiece: Piece, bPiece: Piece) {\n        return aPiece.point.col === bPiece.point.col;\n    }\n\n}\n","import { Board } from '../../models/board';\nimport { Piece } from '../../models/pieces/piece';\nimport { Point } from '../../models/pieces/point';\n\nexport abstract class AbstractPgnProcessor {\n\n    protected pgn = '';\n    protected currentIndex = 0.5;\n\n    public abstract process(\n        board: Board,\n        sourcePiece: Piece,\n        destPoint: Point,\n        destPiece?: Piece\n    ): void;\n\n    public getPGN() {\n        return this.pgn;\n    }\n\n    processChecks(checkmate: boolean, check: boolean, stalemate: boolean) {\n        if (checkmate) {\n            this.pgn += '#';\n        } else {\n            if (check) {\n                this.pgn += '+';\n            }\n        }\n    }\n\n    reset() {\n        this.pgn = '';\n        this.currentIndex = 0.5;\n    }\n\n    addPromotionChoice(promotion) {\n        switch (promotion) {\n            case 1:\n                this.pgn += '=Q';\n                break;\n            case 2:\n                this.pgn += '=R';\n                break;\n            case 3:\n                this.pgn += '=B';\n                break;\n            case 4:\n                this.pgn += '=N';\n                break;\n        }\n    }\n\n    removeLast() {\n        if(this.currentIndex >= 0.5) {\n            this.currentIndex -= 0.5;\n            const regex1 = new RegExp( /\\d+\\./g );\n            regex1.test(this.pgn);\n            this.pgn = this.pgn.substring(0, regex1.lastIndex).trim();\n        }\n    }\n\n}\n","import { PiecePromotionModalComponent } from '../piece-promotion/piece-promotion-modal/piece-promotion-modal.component';\nimport { HistoryMove } from '../history-move-provider/history-move';\nimport { HistoryMoveProvider } from '../history-move-provider/history-move-provider';\nimport { Board } from '../models/board';\nimport { King } from '../models/pieces/king';\nimport { Pawn } from '../models/pieces/pawn';\nimport { Piece } from '../models/pieces/piece';\nimport { Point } from '../models/pieces/point';\nimport { Rook } from '../models/pieces/rook';\nimport { Constants } from '../utils/constants';\nimport { PieceIconInputManager } from '../utils/inputs/piece-icon-input-manager';\nimport { ColorInput, PieceTypeInput } from '../utils/inputs/piece-type-input';\nimport { BoardLoader } from './board-state-provider/board-loader/board-loader';\nimport { CoordsProvider } from './coords/coords-provider';\nimport { DragEndStrategy } from './drag/end/drag-end-strategy';\nimport { DragStartStrategy } from './drag/start/drag-start-strategy';\nimport { ColorStrategy } from './drawing-tools/colors/color-strategy';\nimport { DrawProvider } from './drawing-tools/draw-provider';\nimport { DefaultPgnProcessor } from './pgn/default-pgn-processor';\nimport { AbstractPgnProcessor } from './pgn/abstract-pgn-processor';\n\nexport abstract class AbstractEngineFacade {\n\n    public dragStartStrategy: DragStartStrategy = new DragStartStrategy();\n    public dragEndStrategy: DragEndStrategy = new DragEndStrategy();\n    public pgnProcessor: AbstractPgnProcessor = new DefaultPgnProcessor();\n    protected colorStrategy: ColorStrategy = new ColorStrategy();\n\n    public coords: CoordsProvider = new CoordsProvider();\n    public heightAndWidth: number = Constants.DEFAULT_SIZE;\n\n    public freeMode = false;\n    public dragDisabled: boolean;\n    public drawDisabled: boolean;\n    public lightDisabled: boolean;\n    public darkDisabled: boolean;\n    public board: Board;\n    public modal: PiecePromotionModalComponent;\n    public boardLoader: BoardLoader;\n    public drawProvider: DrawProvider = new DrawProvider();\n    public pieceIconManager: PieceIconInputManager = new PieceIconInputManager();\n    public moveHistoryProvider: HistoryMoveProvider = new HistoryMoveProvider();\n\n    protected constructor(board: Board) {\n        this.board = board;\n    }\n\n    public abstract reset(): void;\n\n    public abstract undo(): void;\n\n    public abstract move(coords: string): void;\n\n    public abstract addPiece(\n        pieceTypeInput: PieceTypeInput,\n        colorInput: ColorInput,\n        coords: string\n    ): void;\n\n    public abstract onMouseUp(\n        event: MouseEvent,\n        pointClicked: Point,\n        left: number,\n        top: number\n    ): void;\n\n    public abstract onMouseDown(\n        event: MouseEvent,\n        pointClicked: Point,\n        left?: number,\n        top?: number\n    ): void;\n\n    public checkIfPawnFirstMove(piece: Piece) {\n        if (piece instanceof Pawn) {\n            piece.isMovedAlready = true;\n        }\n    }\n\n    public checkIfRookMoved(piece: Piece) {\n        if (piece instanceof Rook) {\n            piece.isMovedAlready = true;\n        }\n    }\n\n    public checkIfKingMoved(piece: Piece) {\n        if (piece instanceof King) {\n            piece.isMovedAlready = true;\n        }\n    }\n\n    public getMoveHistory(): HistoryMove[] {\n        return this.moveHistoryProvider.getAll();\n    }\n\n}\n","import { Board } from '../../../models/board';\r\nimport { Bishop } from '../../../models/pieces/bishop';\r\nimport { Color } from '../../../models/pieces/color';\r\nimport { King } from '../../../models/pieces/king';\r\nimport { Knight } from '../../../models/pieces/knight';\r\nimport { Pawn } from '../../../models/pieces/pawn';\r\nimport { Point } from '../../../models/pieces/point';\r\nimport { Queen } from '../../../models/pieces/queen';\r\nimport { Rook } from '../../../models/pieces/rook';\r\nimport { UnicodeConstants } from '../../../utils/unicode-constants';\r\nimport { AbstractEngineFacade } from '../../abstract-engine-facade';\r\nimport { DefaultPiecesLoader } from './default-pieces-loader';\r\nimport { NotationProcessor } from './notation-processors/notation-processor';\r\nimport { NotationProcessorFactory } from './notation-processors/notation-processor-factory';\r\n\r\nexport class BoardLoader {\r\n\r\n    private engineFacade: AbstractEngineFacade;\r\n    private notationProcessor: NotationProcessor;\r\n\r\n    constructor(engineFacade: AbstractEngineFacade, notationProcessor?: NotationProcessor) {\r\n        this.engineFacade = engineFacade;\r\n\r\n        if (notationProcessor) {\r\n            this.notationProcessor = notationProcessor;\r\n        } else {\r\n            this.notationProcessor = NotationProcessorFactory.getDefaultProcessor();\r\n        }\r\n\r\n    }\r\n\r\n    addPieces() {\r\n        DefaultPiecesLoader.loadDefaultPieces(this.engineFacade.board);\r\n    }\r\n\r\n    loadFEN(fen: string) {\r\n        this.notationProcessor.process(fen, this.engineFacade);\r\n    }\r\n\r\n    loadPGN(pgn: string) {\r\n        this.notationProcessor.process(pgn, this.engineFacade)\r\n    }\r\n\r\n    setEngineFacade(engineFacade: AbstractEngineFacade) {\r\n        this.engineFacade = engineFacade;\r\n    }\r\n\r\n    setNotationProcessor(notationProcessor: NotationProcessor) {\r\n        this.notationProcessor = notationProcessor;\r\n    }\r\n\r\n}\r\n","import { Board } from '../../../models/board';\r\n\r\nexport class BoardState {\r\n\r\n    board: Board;\r\n\r\n    constructor(board: Board) {\r\n        this.board = board;\r\n    }\r\n\r\n}\r\n","import { BehaviorSubject } from 'rxjs';\r\nimport { BoardState } from './board-state';\r\n\r\nexport class BoardStateProvider {\r\n    statesSubject$ = new BehaviorSubject<BoardState[]>([]);\r\n\r\n    get states(): BoardState[] {\r\n        return this.statesSubject$.value;\r\n    }\r\n\r\n    set states(states: BoardState[]) {\r\n        this.statesSubject$.next(states);\r\n    }\r\n\r\n    addMove(state: BoardState) {\r\n        this.states = [...this.states, state];\r\n    }\r\n\r\n    getStates(): BoardState[] {\r\n        return this.states;\r\n    }\r\n\r\n    pop(): BoardState {\r\n        const lastState = this.getLastState();\r\n        this.states = this.states.filter((state) => state !== lastState);\r\n        return lastState;\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.states.length === 0;\r\n    }\r\n\r\n    clear() {\r\n        this.states = [];\r\n    }\r\n\r\n    getLastState() {\r\n        return this.states[this.getLastStateIndex()];\r\n    }\r\n\r\n    getLastStateIndex(): number {\r\n        return this.states.length - 1;\r\n    }\r\n}\r\n","import { DrawPoint } from '../draw-point';\r\n\r\nexport class Arrow {\r\n    start: DrawPoint;\r\n    end: DrawPoint;\r\n\r\n    isEqual(arrow: Arrow) {\r\n        return arrow && this.start.isEqual(arrow.start) && this.end.isEqual(arrow.end);\r\n    }\r\n}\r\n","import { DrawPoint } from '../draw-point';\r\n\r\nexport class Circle {\r\n    drawPoint: DrawPoint;\r\n\r\n    isEqual(circle: Circle) {\r\n        return circle && this.drawPoint.isEqual(circle.drawPoint);\r\n    }\r\n}\r\n","import { Board } from '../../models/board';\r\nimport { Color } from '../../models/pieces/color';\r\nimport { Point } from '../../models/pieces/point';\r\nimport { MoveUtils } from '../../utils/move-utils';\r\nimport { AbstractPiece } from './abstract-piece';\r\nimport { PieceAbstractDecorator } from './piece-abstract-decorator';\r\n\r\nexport class AvailableMoveDecorator extends PieceAbstractDecorator {\r\n    private pointClicked: Point;\r\n    private color: Color;\r\n    private board: Board;\r\n\r\n    constructor(piece: AbstractPiece, pointClicked: Point, color: Color, board: Board) {\r\n        super(piece);\r\n        this.pointClicked = pointClicked;\r\n        this.color = color;\r\n        this.board = board;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        return this.piece\r\n            .getPossibleCaptures()\r\n            .filter(\r\n                (point) =>\r\n                    !MoveUtils.willMoveCauseCheck(\r\n                        this.color,\r\n                        this.pointClicked.row,\r\n                        this.pointClicked.col,\r\n                        point.row,\r\n                        point.col,\r\n                        this.board\r\n                    )\r\n            );\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        return this.piece\r\n            .getPossibleMoves()\r\n            .filter(\r\n                (point) =>\r\n                    !MoveUtils.willMoveCauseCheck(\r\n                        this.color,\r\n                        this.pointClicked.row,\r\n                        this.pointClicked.col,\r\n                        point.row,\r\n                        point.col,\r\n                        this.board\r\n                    )\r\n            );\r\n    }\r\n}\r\n","import { Point } from '../../models/pieces/point';\r\nimport { AbstractPiece } from './abstract-piece';\r\n\r\nexport abstract class PieceAbstractDecorator implements AbstractPiece {\r\n\r\n    piece: AbstractPiece;\r\n\r\n    protected constructor(piece: AbstractPiece) {\r\n        this.piece = piece;\r\n    }\r\n\r\n    abstract getPossibleCaptures(): Point[];\r\n\r\n    abstract getPossibleMoves(): Point[];\r\n\r\n}\r\n","import { Board } from '../models/board';\r\nimport { Bishop } from '../models/pieces/bishop';\r\nimport { Color } from '../models/pieces/color';\r\nimport { Knight } from '../models/pieces/knight';\r\nimport { Piece } from '../models/pieces/piece';\r\nimport { Queen } from '../models/pieces/queen';\r\nimport { Rook } from '../models/pieces/rook';\r\nimport { UnicodeConstants } from '../utils/unicode-constants';\r\n\r\nexport class PiecePromotionResolver {\r\n\r\n    static resolvePromotionChoice(board: Board, piece: Piece, index: number) {\r\n        const isWhite = piece.color === Color.WHITE;\r\n        switch (index) {\r\n            case 1:\r\n                board.pieces.push(\r\n                    new Queen(\r\n                        piece.point,\r\n                        piece.color,\r\n                        isWhite\r\n                            ? UnicodeConstants.WHITE_QUEEN\r\n                            : UnicodeConstants.BLACK_QUEEN,\r\n                        board\r\n                    )\r\n                );\r\n                break;\r\n            case 2:\r\n                board.pieces.push(\r\n                    new Rook(\r\n                        piece.point,\r\n                        piece.color,\r\n                        isWhite\r\n                            ? UnicodeConstants.WHITE_ROOK\r\n                            : UnicodeConstants.BLACK_ROOK,\r\n                        board\r\n                    )\r\n                );\r\n                break;\r\n            case 3:\r\n                board.pieces.push(\r\n                    new Bishop(\r\n                        piece.point,\r\n                        piece.color,\r\n                        isWhite\r\n                            ? UnicodeConstants.WHITE_BISHOP\r\n                            : UnicodeConstants.BLACK_BISHOP,\r\n                        board\r\n                    )\r\n                );\r\n                break;\r\n            case 4:\r\n                board.pieces.push(\r\n                    new Knight(\r\n                        piece.point,\r\n                        piece.color,\r\n                        isWhite\r\n                            ? UnicodeConstants.WHITE_KNIGHT\r\n                            : UnicodeConstants.BLACK_KNIGHT,\r\n                        board\r\n                    )\r\n                );\r\n                break;\r\n        }\r\n    }\r\n\r\n}\r\n","import { Board } from '../../models/board';\r\nimport { MoveTranslation } from '../../models/move-translation';\r\nimport { Bishop } from '../../models/pieces/bishop';\r\nimport { Color } from '../../models/pieces/color';\r\nimport { King } from '../../models/pieces/king';\r\nimport { Knight } from '../../models/pieces/knight';\r\nimport { Pawn } from '../../models/pieces/pawn';\r\nimport { Piece } from '../../models/pieces/piece';\r\nimport { Point } from '../../models/pieces/point';\r\nimport { Queen } from '../../models/pieces/queen';\r\nimport { Rook } from '../../models/pieces/rook';\r\nimport {\r\n    ColorInput,\r\n    PieceTypeInput\r\n} from '../../utils/inputs/piece-type-input';\r\nimport { UnicodeConstants } from '../../utils/unicode-constants';\r\n\r\nexport class PieceFactory {\r\n\r\n    static create(\r\n        indexes: MoveTranslation,\r\n        pieceTypeInput: PieceTypeInput,\r\n        colorInput: ColorInput,\r\n        board: Board\r\n    ): Piece {\r\n        let piece;\r\n        let color = colorInput === ColorInput.LIGHT\r\n            ? Color.WHITE\r\n            : Color.BLACK;\r\n\r\n        switch (pieceTypeInput) {\r\n            case PieceTypeInput.QUEEN:\r\n                piece = new Queen(\r\n                    new Point(indexes.yAxis, indexes.xAxis),\r\n                    color,\r\n                    color === Color.WHITE ? UnicodeConstants.WHITE_QUEEN : UnicodeConstants.BLACK_QUEEN,\r\n                    board\r\n                );\r\n                break;\r\n            case PieceTypeInput.KING:\r\n                piece = new King(\r\n                    new Point(indexes.yAxis, indexes.xAxis),\r\n                    color,\r\n                    color === Color.WHITE ? UnicodeConstants.WHITE_KING : UnicodeConstants.BLACK_KING,\r\n                    board\r\n                );\r\n\r\n                break;\r\n            case PieceTypeInput.KNIGHT:\r\n                piece = new Knight(\r\n                    new Point(indexes.yAxis, indexes.xAxis),\r\n                    color,\r\n                    color === Color.WHITE ? UnicodeConstants.WHITE_KNIGHT : UnicodeConstants.BLACK_KNIGHT,\r\n                    board\r\n                );\r\n                break;\r\n            case PieceTypeInput.BISHOP:\r\n                piece = new Bishop(\r\n                    new Point(indexes.yAxis, indexes.xAxis),\r\n                    color,\r\n                    color === Color.WHITE ? UnicodeConstants.WHITE_BISHOP : UnicodeConstants.BLACK_BISHOP,\r\n                    board\r\n                );\r\n                break;\r\n            case PieceTypeInput.ROOK:\r\n                piece = new Rook(\r\n                    new Point(indexes.yAxis, indexes.xAxis),\r\n                    color,\r\n                    color === Color.WHITE ? UnicodeConstants.WHITE_ROOK : UnicodeConstants.BLACK_ROOK,\r\n                    board\r\n                );\r\n                break;\r\n            case PieceTypeInput.PAWN:\r\n                piece = new Pawn(\r\n                    new Point(indexes.yAxis, indexes.xAxis),\r\n                    color,\r\n                    color === Color.WHITE ? UnicodeConstants.WHITE_PAWN : UnicodeConstants.BLACK_PAWN,\r\n                    board\r\n                );\r\n                break;\r\n        }\r\n\r\n        return piece;\r\n    }\r\n}\r\n","import { EventEmitter } from '@angular/core';\nimport { HistoryMove } from '../history-move-provider/history-move';\nimport { ColorInput, PieceTypeInput } from '../utils/inputs/piece-type-input';\nimport { AbstractEngineFacade } from './abstract-engine-facade';\n\nimport { BoardLoader } from './board-state-provider/board-loader/board-loader';\nimport { BoardState } from './board-state-provider/board-state/board-state';\nimport { BoardStateProvider } from './board-state-provider/board-state/board-state-provider';\nimport { MoveStateProvider } from './board-state-provider/board-state/move-state-provider';\nimport { ClickUtils } from './click/click-utils';\nimport { Arrow } from './drawing-tools/shapes/arrow';\nimport { Circle } from './drawing-tools/shapes/circle';\nimport { DrawPoint } from './drawing-tools/draw-point';\nimport { DrawProvider } from './drawing-tools/draw-provider';\nimport { Board } from '../models/board';\nimport { Color } from '../models/pieces/color';\nimport { King } from '../models/pieces/king';\nimport { Pawn } from '../models/pieces/pawn';\nimport { Piece } from '../models/pieces/piece';\nimport { Point } from '../models/pieces/point';\nimport { DefaultPgnProcessor } from './pgn/default-pgn-processor';\nimport { AvailableMoveDecorator } from './piece-decorator/available-move-decorator';\nimport { PiecePromotionResolver } from '../piece-promotion/piece-promotion-resolver';\nimport { MoveUtils } from '../utils/move-utils';\nimport { MoveChange } from './outputs/move-change/move-change';\nimport { PieceFactory } from './utils/piece-factory';\n\nexport class EngineFacade extends AbstractEngineFacade {\n\n    _selected = false;\n    drawPoint: DrawPoint;\n    drawProvider: DrawProvider;\n    disabling = false;\n    boardStateProvider: BoardStateProvider;\n    moveStateProvider: MoveStateProvider;\n    moveChange: EventEmitter<MoveChange>;\n\n    constructor(\n        board: Board,\n        moveChange: EventEmitter<MoveChange>\n    ) {\n        super(board);\n        this.moveChange = moveChange;\n        this.boardLoader = new BoardLoader(this);\n        this.boardLoader.addPieces();\n        this.boardStateProvider = new BoardStateProvider();\n    }\n\n    public reset(): void {\n        this.boardStateProvider.clear();\n        this.moveHistoryProvider.clear();\n        this.boardLoader.addPieces();\n        this.board.reset();\n        this.coords.reset();\n        this.drawProvider.clear();\n        this.pgnProcessor.reset();\n        this.freeMode = false;\n    }\n\n    public undo(): void {\n        if (!this.boardStateProvider.isEmpty()) {\n            const lastBoard = this.boardStateProvider.pop().board;\n            if (this.board.reverted) {\n                lastBoard.reverse();\n            }\n            this.board = lastBoard;\n            this.board.possibleCaptures = [];\n            this.board.possibleMoves = [];\n            this.moveHistoryProvider.pop();\n            this.board.calculateFEN();\n            this.pgnProcessor.removeLast();\n        }\n    }\n\n    saveMoveClone() {\n        const clone = this.board.clone();\n\n        if (this.board.reverted) {\n            clone.reverse();\n        }\n        this.moveStateProvider.addMove(new BoardState(clone));\n    }\n\n    public move(coords: string) {\n        if (coords) {\n            const sourceIndexes = MoveUtils.translateCoordsToIndex(\n                coords.substring(0, 2),\n                this.board.reverted\n            );\n\n            const destIndexes = MoveUtils.translateCoordsToIndex(\n                coords.substring(2, 4),\n                this.board.reverted\n            );\n\n            const srcPiece = this.board.getPieceByPoint(\n                sourceIndexes.yAxis,\n                sourceIndexes.xAxis\n            );\n\n            if (srcPiece) {\n                if (\n                    (this.board.currentWhitePlayer &&\n                        srcPiece.color === Color.BLACK) ||\n                    (!this.board.currentWhitePlayer &&\n                        srcPiece.color === Color.WHITE)\n                ) {\n                    return;\n                }\n\n                this.prepareActivePiece(srcPiece, srcPiece.point);\n\n                if (\n                    this.board.isPointInPossibleMoves(\n                        new Point(destIndexes.yAxis, destIndexes.xAxis)\n                    ) ||\n                    this.board.isPointInPossibleCaptures(\n                        new Point(destIndexes.yAxis, destIndexes.xAxis)\n                    )\n                ) {\n                    this.saveClone();\n                    this.movePiece(\n                        srcPiece,\n                        new Point(destIndexes.yAxis, destIndexes.xAxis),\n                        coords.length === 5 ? +coords.substring(4, 5) : 0\n                    );\n\n                    this.board.lastMoveSrc = new Point(\n                        sourceIndexes.yAxis,\n                        sourceIndexes.xAxis\n                    );\n                    this.board.lastMoveDest = new Point(\n                        destIndexes.yAxis,\n                        destIndexes.xAxis\n                    );\n\n                    this.disableSelection();\n                } else {\n                    this.disableSelection();\n                }\n            }\n        }\n\n    }\n\n    prepareActivePiece(pieceClicked: Piece, pointClicked: Point) {\n        this.board.activePiece = pieceClicked;\n        this._selected = true;\n        this.board.possibleCaptures = new AvailableMoveDecorator(\n            pieceClicked,\n            pointClicked,\n            this.board.currentWhitePlayer ? Color.WHITE : Color.BLACK,\n            this.board\n        ).getPossibleCaptures();\n        this.board.possibleMoves = new AvailableMoveDecorator(\n            pieceClicked,\n            pointClicked,\n            this.board.currentWhitePlayer ? Color.WHITE : Color.BLACK,\n            this.board\n        ).getPossibleMoves();\n    }\n\n    onPieceClicked(pieceClicked, pointClicked) {\n        if (\n            (this.board.currentWhitePlayer && pieceClicked.color === Color.BLACK) ||\n            (!this.board.currentWhitePlayer && pieceClicked.color === Color.WHITE)\n        ) {\n            return;\n        }\n\n        this.prepareActivePiece(pieceClicked, pointClicked);\n    }\n\n    public handleClickEvent(pointClicked: Point, isMouseDown: boolean) {\n        let moving = false;\n\n        if ((\n            this.board.isPointInPossibleMoves(pointClicked) ||\n            this.board.isPointInPossibleCaptures(pointClicked)\n        ) || this.freeMode) {\n            this.saveClone();\n            this.board.lastMoveSrc = new Point(\n                this.board.activePiece.point.row,\n                this.board.activePiece.point.col\n            );\n            this.board.lastMoveDest = pointClicked.clone();\n            this.movePiece(this.board.activePiece, pointClicked);\n\n            if (!this.board.activePiece.point.isEqual(this.board.lastMoveSrc)) {\n                moving = true;\n            }\n        }\n\n        if (isMouseDown || moving) {\n            this.disableSelection();\n        }\n        this.disableSelection();\n        const pieceClicked = this.board.getPieceByPoint(\n            pointClicked.row,\n            pointClicked.col\n        );\n        if (pieceClicked && !moving) {\n            this.onFreeMode(pieceClicked);\n            this.onPieceClicked(pieceClicked, pointClicked);\n        }\n    }\n\n    onMouseDown(\n        event: MouseEvent,\n        pointClicked: Point,\n        left?: number,\n        top?: number\n    ) {\n        if (event.button !== 0) {\n            this.drawPoint = ClickUtils.getDrawingPoint(\n                this.heightAndWidth,\n                this.colorStrategy,\n                event.x,\n                event.y,\n                event.ctrlKey,\n                event.altKey,\n                event.shiftKey,\n                left,\n                top\n            );\n            return;\n        }\n\n        this.drawProvider.clear();\n\n        if (\n            this.board.activePiece &&\n            pointClicked.isEqual(this.board.activePiece.point)\n        ) {\n            this.disabling = true;\n            return;\n        }\n\n        const pieceClicked = this.board.getPieceByPoint(\n            pointClicked.row,\n            pointClicked.col\n        );\n\n        if (this.freeMode) {\n            if (pieceClicked) {\n                if (event.ctrlKey) {\n                    this.board.pieces = this.board.pieces.filter(e => e !== pieceClicked);\n                    return;\n                }\n                this.board.currentWhitePlayer = (pieceClicked.color === Color.WHITE);\n            }\n        }\n\n        if (this.isPieceDisabled(pieceClicked)) {\n            return;\n        }\n\n        if (this._selected) {\n            this.handleClickEvent(pointClicked, true);\n        } else {\n            if (pieceClicked) {\n                this.onFreeMode(pieceClicked);\n                this.onPieceClicked(pieceClicked, pointClicked);\n            }\n        }\n    }\n\n    onMouseUp(\n        event: MouseEvent,\n        pointClicked: Point,\n        left: number,\n        top: number\n    ) {\n        if (event.button !== 0 && !this.drawDisabled) {\n            this.addDrawPoint(\n                event.x,\n                event.y,\n                event.ctrlKey,\n                event.altKey,\n                event.shiftKey,\n                left, top\n            );\n            return;\n        }\n\n        this.drawProvider.clear();\n\n        if (this.dragDisabled) {\n            return;\n        }\n\n        if (\n            this.board.activePiece &&\n            pointClicked.isEqual(this.board.activePiece.point) &&\n            this.disabling\n        ) {\n            this.disableSelection();\n            this.disabling = false;\n            return;\n        }\n        const pieceClicked = this.board.getPieceByPoint(\n            pointClicked.row,\n            pointClicked.col\n        );\n\n        if (this.isPieceDisabled(pieceClicked)) {\n            return;\n        }\n\n        if (this._selected) {\n            this.handleClickEvent(pointClicked, false);\n            //   this.possibleMoves = activePiece.getPossibleMoves();\n        }\n    }\n\n    saveClone() {\n        const clone = this.board.clone();\n\n        if (this.board.reverted) {\n            clone.reverse();\n        }\n        this.boardStateProvider.addMove(new BoardState(clone));\n    }\n\n    movePiece(toMovePiece: Piece, newPoint: Point, promotionIndex?: number) {\n        const destPiece = this.board.pieces.find(\n            (piece) =>\n                piece.point.col === newPoint.col &&\n                piece.point.row === newPoint.row\n        );\n\n        this.pgnProcessor.process(\n            this.board,\n            toMovePiece,\n            newPoint,\n            destPiece\n        );\n\n        if (destPiece && toMovePiece.color !== destPiece.color) {\n            this.board.pieces = this.board.pieces.filter(\n                (piece) => piece !== destPiece\n            );\n        } else {\n            if (destPiece && toMovePiece.color === destPiece.color) {\n                return;\n            }\n        }\n\n        const move = new HistoryMove(\n            MoveUtils.format(toMovePiece.point, newPoint, this.board.reverted),\n            toMovePiece.constant.name,\n            toMovePiece.color === Color.WHITE ? 'white' : 'black',\n            !!destPiece\n        );\n        this.moveHistoryProvider.addMove(move);\n\n        if (toMovePiece instanceof King) {\n            const squaresMoved = Math.abs(newPoint.col - toMovePiece.point.col);\n            if (squaresMoved > 1) {\n                if (newPoint.col < 3) {\n                    const leftRook = this.board.getPieceByField(\n                        toMovePiece.point.row,\n                        0\n                    );\n                    if (!this.freeMode) {\n                        leftRook.point.col = this.board.reverted ? 2 : 3;\n                    }\n                } else {\n                    const rightRook = this.board.getPieceByField(\n                        toMovePiece.point.row,\n                        7\n                    );\n                    if (!this.freeMode) {\n                        rightRook.point.col = this.board.reverted ? 4 : 5;\n                    }\n                }\n            }\n        }\n\n        if (toMovePiece instanceof Pawn) {\n            this.board.checkIfPawnTakesEnPassant(newPoint);\n            this.board.checkIfPawnEnpassanted(toMovePiece, newPoint);\n        } else {\n            this.board.enPassantPoint = null;\n            this.board.enPassantPiece = null;\n        }\n\n        toMovePiece.point = newPoint;\n        this.increaseFullMoveCount();\n        this.board.currentWhitePlayer = !this.board.currentWhitePlayer;\n\n        if (!this.checkForPawnPromote(toMovePiece, promotionIndex)) {\n            this.afterMoveActions();\n        }\n    }\n\n    checkForPawnPromote(toPromotePiece: Piece, promotionIndex?: number) {\n        if (!(toPromotePiece instanceof Pawn)) {\n            return;\n        }\n\n        if (toPromotePiece.point.row === 0 || toPromotePiece.point.row === 7) {\n            this.board.pieces = this.board.pieces.filter(\n                (piece) => piece !== toPromotePiece\n            );\n\n            // When we make move manually, we pass promotion index already, so we don't need\n            // to acquire it from promote dialog\n            if (!promotionIndex) {\n                this.openPromoteDialog(toPromotePiece);\n            } else {\n                PiecePromotionResolver.resolvePromotionChoice(\n                    this.board,\n                    toPromotePiece,\n                    promotionIndex\n                );\n                this.afterMoveActions(promotionIndex);\n            }\n\n            return true;\n        }\n    }\n\n    afterMoveActions(promotionIndex?: number) {\n        this.checkIfPawnFirstMove(this.board.activePiece);\n        this.checkIfRookMoved(this.board.activePiece);\n        this.checkIfKingMoved(this.board.activePiece);\n\n        this.board.blackKingChecked = this.board.isKingInCheck(\n            Color.BLACK,\n            this.board.pieces\n        );\n        this.board.whiteKingChecked = this.board.isKingInCheck(\n            Color.WHITE,\n            this.board.pieces\n        );\n        const check =\n            this.board.blackKingChecked || this.board.whiteKingChecked;\n        const checkmate =\n            this.checkForPossibleMoves(Color.BLACK) ||\n            this.checkForPossibleMoves(Color.WHITE);\n        const stalemate =\n            this.checkForPat(Color.BLACK) || this.checkForPat(Color.WHITE);\n\n        this.pgnProcessor.processChecks(checkmate, check, stalemate);\n        this.pgnProcessor.addPromotionChoice(promotionIndex);\n\n        this.disabling = false;\n        this.board.calculateFEN();\n\n        const lastMove = this.moveHistoryProvider.getLastMove();\n        if (lastMove && promotionIndex) {\n            lastMove.move += promotionIndex;\n        }\n\n        this.moveChange.emit({\n            ...lastMove,\n            check,\n            checkmate,\n            stalemate,\n            fen: this.board.fen,\n            pgn: {\n              pgn: this.pgnProcessor.getPGN()\n            },\n            freeMode: this.freeMode\n        });\n    }\n\n    checkForPat(color: Color) {\n        if (color === Color.WHITE && !this.board.whiteKingChecked) {\n            return this.checkForPossibleMoves(color);\n        } else {\n            if (color === Color.BLACK && !this.board.blackKingChecked) {\n                return this.checkForPossibleMoves(color);\n            }\n        }\n    }\n\n    openPromoteDialog(piece: Piece) {\n        this.modal.open((index) => {\n            PiecePromotionResolver.resolvePromotionChoice(\n                this.board,\n                piece,\n                index\n            );\n            this.afterMoveActions(index);\n        });\n    }\n\n    checkForPossibleMoves(color: Color): boolean {\n        return !this.board.pieces\n            .filter((piece) => piece.color === color)\n            .some(\n                (piece) =>\n                    piece\n                        .getPossibleMoves()\n                        .some(\n                            (move) =>\n                                !MoveUtils.willMoveCauseCheck(\n                                    color,\n                                    piece.point.row,\n                                    piece.point.col,\n                                    move.row,\n                                    move.col,\n                                    this.board\n                                )\n                        ) ||\n                    piece\n                        .getPossibleCaptures()\n                        .some(\n                            (capture) =>\n                                !MoveUtils.willMoveCauseCheck(\n                                    color,\n                                    piece.point.row,\n                                    piece.point.col,\n                                    capture.row,\n                                    capture.col,\n                                    this.board\n                                )\n                        )\n            );\n    }\n\n    disableSelection() {\n        this._selected = false;\n        this.board.possibleCaptures = [];\n        this.board.activePiece = null;\n        this.board.possibleMoves = [];\n    }\n\n    /**\n     * Processes logic to allow freeMode based logic processing\n     */\n    onFreeMode(pieceClicked) {\n        if (\n            !this.freeMode ||\n            pieceClicked === undefined ||\n            pieceClicked === null\n        ) {\n            return;\n        }\n        // sets player as white in-case white pieces are selected, and vice-versa when black is selected\n        this.board.currentWhitePlayer = pieceClicked.color === Color.WHITE;\n    }\n\n    isPieceDisabled(pieceClicked: Piece) {\n        if (pieceClicked && pieceClicked.point) {\n            const foundCapture = this.board.possibleCaptures.find(\n                (capture) =>\n                    capture.col === pieceClicked.point.col &&\n                    capture.row === pieceClicked.point.row\n            );\n\n            if (foundCapture) {\n                return false;\n            }\n        }\n        return (\n            pieceClicked &&\n            ((this.lightDisabled && pieceClicked.color === Color.WHITE) ||\n                (this.darkDisabled && pieceClicked.color === Color.BLACK))\n        );\n    }\n\n    addDrawPoint(\n        x: number,\n        y: number,\n        crtl: boolean,\n        alt: boolean,\n        shift: boolean,\n        left: number,\n        top: number\n    ) {\n        const upPoint = ClickUtils.getDrawingPoint(\n            this.heightAndWidth,\n            this.colorStrategy,\n            x,\n            y,\n            crtl,\n            alt,\n            shift,\n            left,\n            top\n        );\n\n        if (this.drawPoint.isEqual(upPoint)) {\n            const circle = new Circle();\n            circle.drawPoint = upPoint;\n            if (!this.drawProvider.containsCircle(circle)) {\n                this.drawProvider.addCircle(circle);\n            } else {\n                this.drawProvider.reomveCircle(circle);\n            }\n        } else {\n            const arrow = new Arrow();\n            arrow.start = this.drawPoint;\n            arrow.end = upPoint;\n\n            if (!this.drawProvider.containsArrow(arrow)) {\n                this.drawProvider.addArrow(arrow);\n            } else {\n                this.drawProvider.removeArrow(arrow);\n            }\n        }\n    }\n\n    increaseFullMoveCount() {\n        if (!this.board.currentWhitePlayer) {\n            ++this.board.fullMoveCount;\n        }\n    }\n\n    addPiece(\n        pieceTypeInput: PieceTypeInput,\n        colorInput: ColorInput,\n        coords: string\n    ) {\n        if (this.freeMode && coords && pieceTypeInput > 0 && colorInput > 0) {\n            let indexes = MoveUtils.translateCoordsToIndex(\n                coords,\n                this.board.reverted\n            );\n            let existing = this.board.getPieceByPoint(\n                indexes.yAxis,\n                indexes.xAxis\n            );\n            if (existing) {\n                this.board.pieces = this.board.pieces.filter(e => e !== existing);\n            }\n            let createdPiece = PieceFactory.create(\n                indexes,\n                pieceTypeInput,\n                colorInput,\n                this.board\n            );\n            this.saveClone();\n            this.board.pieces.push(createdPiece);\n            this.afterMoveActions();\n        }\n    }\n}\n","import { cloneDeep } from 'lodash';\nimport { Bishop } from './pieces/bishop';\nimport { Color } from './pieces/color';\nimport { King } from './pieces/king';\nimport { Knight } from './pieces/knight';\nimport { Pawn } from './pieces/pawn';\nimport { Piece } from './pieces/piece';\nimport { Point } from './pieces/point';\nimport { Queen } from './pieces/queen';\nimport { Rook } from './pieces/rook';\n\nexport class Board {\n    board: number[][] = [];\n    pieces: Piece[] = [];\n\n    enPassantPoint: Point = null;\n    enPassantPiece: Piece = null;\n    lastMoveSrc: Point = null;\n    lastMoveDest: Point = null;\n    activePiece: Piece;\n\n    blackKingChecked: boolean;\n    possibleCaptures: any[] = [];\n    possibleMoves: Point[] = [];\n    whiteKingChecked: boolean;\n\n    currentWhitePlayer = true;\n    reverted = false;\n    fullMoveCount = 1;\n    fen: string;\n\n    constructor() {\n        for (let i = 0; i < 8; ++i) {\n            this.board[i] = [];\n            for (let j = 0; j < 8; ++j) {\n                this.board[i][j] = 0;\n            }\n        }\n    }\n\n    isXYInPossibleMoves(row: number, col: number): boolean {\n        return this.possibleMoves.some((move) => move.row === row && move.col === col);\n    }\n\n    isXYInPossibleCaptures(row: number, col: number): boolean {\n        return this.possibleCaptures.some((capture) => capture.row === row && capture.col === col);\n    }\n\n    isXYInSourceMove(i: number, j: number) {\n        return this.lastMoveSrc && this.lastMoveSrc.row === i && this.lastMoveSrc.col === j;\n    }\n\n    isXYInDestMove(i: number, j: number) {\n        return this.lastMoveDest && this.lastMoveDest.row === i && this.lastMoveDest.col === j;\n    }\n\n    isXYInActiveMove(i: number, j: number) {\n        return this.activePiece && this.activePiece.point.row === i && this.activePiece.point.col === j;\n    }\n\n    isPointInPossibleMoves(point: Point): boolean {\n        return this.possibleMoves.some((move) => move.row === point.row && move.col === point.col);\n    }\n\n    isPointInPossibleCaptures(point: Point): boolean {\n        return this.possibleCaptures.some((capture) => capture.row === point.row && capture.col === point.col);\n    }\n\n    reset() {\n        this.lastMoveDest = null;\n        this.lastMoveSrc = null;\n        this.whiteKingChecked = false;\n        this.blackKingChecked = false;\n        this.possibleCaptures = [];\n        this.possibleMoves = [];\n        this.activePiece = null;\n        this.reverted = false;\n        this.currentWhitePlayer = true;\n        this.enPassantPoint = null;\n        this.enPassantPiece = null;\n        this.fullMoveCount = 1;\n        this.calculateFEN();\n    }\n\n        reverse() {\n        this.reverted = !this.reverted;\n        this.activePiece = null;\n        this.possibleMoves = [];\n        this.possibleCaptures = [];\n\n        this.pieces.forEach((piece: Piece) => this.reversePoint(piece.point));\n\n        this.reversePoint(this.lastMoveSrc);\n        this.reversePoint(this.lastMoveDest);\n\n        if (this.enPassantPoint && this.enPassantPiece) {\n            this.reversePoint(this.enPassantPoint);\n        }\n    }\n\n    clone(): Board {\n        return cloneDeep(this);\n    }\n\n    isFieldTakenByEnemy(row: number, col: number, enemyColor: Color): boolean {\n        if (row > 7 || row < 0 || col > 7 || col < 0) {\n            return false;\n        }\n        return this.pieces.some(\n            (piece) => piece.point.col === col && piece.point.row === row && piece.color === enemyColor\n        );\n    }\n\n    isFieldEmpty(row: number, col: number): boolean {\n        if (row > 7 || row < 0 || col > 7 || col < 0) {\n            return false;\n        }\n        return !this.pieces.some((piece) => piece.point.col === col && piece.point.row === row);\n    }\n\n    isFieldUnderAttack(row: number, col: number, color: Color) {\n        return this.pieces\n            .filter((piece) => piece.color === color)\n            .some((piece) => piece.getCoveredFields().some((field) => field.col === col && field.row === row));\n    }\n\n    getPieceByField(row: number, col: number): Piece {\n        if (this.isFieldEmpty(row, col)) {\n            //   throw new Error('Piece not found');\n            return undefined;\n        }\n\n        return this.pieces.find((piece) => piece.point.col === col && piece.point.row === row);\n    }\n\n    isKingInCheck(color: Color, pieces: Piece[]): boolean {\n        const king = pieces.find((piece) => piece.color === color && piece instanceof King);\n\n        if (king) {\n            return pieces.some(\n                (piece) =>\n                    piece\n                        .getPossibleCaptures()\n                        .some((point) => point.col === king.point.col && point.row === king.point.row) &&\n                    piece.color !== color\n            );\n        }\n        return false;\n    }\n\n    getKingByColor(color: Color): King {\n        return this.pieces.find((piece) => piece instanceof King && piece.color === color) as King;\n    }\n\n    getCastleFENString(color: Color) {\n        const king = this.getKingByColor(color);\n\n        if (!king || king.isMovedAlready) {\n            return '';\n        }\n\n        let fen = '';\n        const leftRook = this.getPieceByField(king.point.row, 0);\n        const rightRook = this.getPieceByField(king.point.row, 7);\n\n        if (rightRook instanceof Rook && rightRook.color === color) {\n            if (!rightRook.isMovedAlready) {\n                fen += this.reverted ? 'q' : 'k';\n            }\n        }\n\n        if (leftRook instanceof Rook && leftRook.color === color) {\n            if (!leftRook.isMovedAlready) {\n                fen += this.reverted ? 'k' : 'q';\n            }\n        }\n\n        fen = fen.split('').sort().join('');\n        return color === Color.BLACK ? fen : fen.toUpperCase();\n    }\n\n    getEnPassantFENString() {\n        if (this.enPassantPoint) {\n            if (this.reverted) {\n                return String.fromCharCode(104 - this.enPassantPoint.col) + (this.enPassantPoint.row + 1);\n            } else {\n                return String.fromCharCode(97 + this.enPassantPoint.col) + (Math.abs(this.enPassantPoint.row - 7) + 1);\n            }\n        } else {\n            return '-';\n        }\n    }\n\n    calculateFEN() {\n        let fen = '';\n        for (let i = 0; i < 8; ++i) {\n            let emptyFields = 0;\n            for (let j = 0; j < 8; ++j) {\n                const foundPiece = this.pieces.find((piece) => piece.point.col === j && piece.point.row === i);\n                if (foundPiece) {\n                    if (emptyFields > 0) {\n                        fen += emptyFields;\n                        emptyFields = 0;\n                    }\n\n                    if (foundPiece instanceof Rook) {\n                        fen += foundPiece.color === Color.BLACK ? 'r' : 'R';\n                    } else {\n                        if (foundPiece instanceof Knight) {\n                            fen += foundPiece.color === Color.BLACK ? 'n' : 'N';\n                        } else {\n                            if (foundPiece instanceof Bishop) {\n                                fen += foundPiece.color === Color.BLACK ? 'b' : 'B';\n                            } else {\n                                if (foundPiece instanceof Queen) {\n                                    fen += foundPiece.color === Color.BLACK ? 'q' : 'Q';\n                                } else {\n                                    if (foundPiece instanceof King) {\n                                        fen += foundPiece.color === Color.BLACK ? 'k' : 'K';\n                                    } else {\n                                        if (foundPiece instanceof Pawn) {\n                                            fen += foundPiece.color === Color.BLACK ? 'p' : 'P';\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    ++emptyFields;\n                }\n            }\n\n            if (emptyFields > 0) {\n                fen += emptyFields;\n            }\n\n            fen += '/';\n        }\n\n        fen = fen.substr(0, fen.length - 1);\n\n        if (this.reverted) {\n            fen = fen.split('').reverse().join('');\n        }\n\n        fen += ' ' + (this.currentWhitePlayer ? 'w' : 'b');\n        const whiteEnPassant = this.getCastleFENString(Color.WHITE);\n        const blackEnPassant = this.getCastleFENString(Color.BLACK);\n        let concatedEnPassant = whiteEnPassant + blackEnPassant;\n        if (!concatedEnPassant) {\n            concatedEnPassant = '-';\n        }\n\n        fen += ' ' + concatedEnPassant;\n        fen += ' ' + this.getEnPassantFENString();\n        fen += ' ' + 0;\n        fen += ' ' + this.fullMoveCount;\n        this.fen = fen;\n    }\n\n    isXYInPointSelection(i: number, j: number) {\n        return false;\n    }\n\n    private reversePoint(point: Point) {\n        if (point) {\n            point.row = Math.abs(point.row - 7);\n            point.col = Math.abs(point.col - 7);\n        }\n    }\n\n    public getPieceByPoint(row: number, col: number): Piece {\n        row = Math.floor(row);\n        col = Math.floor(col);\n        return this.pieces.find(\n            (piece) => piece.point.col === col && piece.point.row === row\n        );\n    }\n\n    public checkIfPawnTakesEnPassant(newPoint: Point) {\n        if (newPoint.isEqual(this.enPassantPoint)) {\n            this.pieces = this.pieces.filter(\n                (piece) => piece !== this.enPassantPiece\n            );\n            this.enPassantPoint = null;\n            this.enPassantPiece = null;\n        }\n    }\n\n    public checkIfPawnEnpassanted(piece: Pawn, newPoint: Point) {\n        if (Math.abs(piece.point.row - newPoint.row) > 1) {\n            this.enPassantPiece = piece;\n            this.enPassantPoint = new Point(\n                (piece.point.row + newPoint.row) / 2,\n                piece.point.col\n            );\n        } else {\n            this.enPassantPoint = null;\n            this.enPassantPiece = null;\n        }\n    }\n\n    isKingChecked(piece: Piece) {\n        if (piece instanceof King) {\n            return piece.color === Color.WHITE\n                ? this.whiteKingChecked\n                : this.blackKingChecked;\n        }\n    }\n\n}\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class NgxChessBoardService {\r\n    private componentMethodCallSource = new Subject<any>();\r\n\r\n    componentMethodCalled$ = this.componentMethodCallSource.asObservable();\r\n\r\n    reset() {\r\n        this.componentMethodCallSource.next();\r\n    }\r\n}\r\n","import { CdkDragEnd, CdkDragStart } from '@angular/cdk/drag-drop';\nimport {\n    AfterViewInit,\n    Component,\n    ElementRef,\n    EventEmitter,\n    HostListener,\n    Input,\n    OnChanges,\n    OnInit,\n    Output,\n    SimpleChanges,\n    ViewChild,\n} from '@angular/core';\nimport { AbstractEngineFacade } from './engine/abstract-engine-facade';\nimport { BoardLoader } from './engine/board-state-provider/board-loader/board-loader';\nimport {\n    NotationProcessorFactory, NotationType,\n} from './engine/board-state-provider/board-loader/notation-processors/notation-processor-factory';\nimport { ClickUtils } from './engine/click/click-utils';\nimport { EngineFacade } from './engine/engine-facade';\nimport { MoveChange } from './engine/outputs/move-change/move-change';\nimport { HistoryMove } from './history-move-provider/history-move';\nimport { Board } from './models/board';\nimport { Piece } from './models/pieces/piece';\nimport { NgxChessBoardView } from './ngx-chess-board-view';\nimport { PiecePromotionModalComponent } from './piece-promotion/piece-promotion-modal/piece-promotion-modal.component';\nimport { NgxChessBoardService } from './service/ngx-chess-board.service';\nimport { Constants } from './utils/constants';\nimport { PieceIconInput } from './utils/inputs/piece-icon-input';\nimport { PieceIconInputManager } from './utils/inputs/piece-icon-input-manager';\nimport { ColorInput, PieceTypeInput } from './utils/inputs/piece-type-input';\n\n\n@Component({\n    selector: 'ngx-chess-board',\n    templateUrl: './ngx-chess-board.component.html',\n    styleUrls: ['./ngx-chess-board.component.scss'],\n})\nexport class NgxChessBoardComponent\n    implements OnInit, OnChanges, NgxChessBoardView, AfterViewInit {\n\n    @Input() darkTileColor = Constants.DEFAULT_DARK_TILE_COLOR;\n    @Input() lightTileColor: string = Constants.DEFAULT_LIGHT_TILE_COLOR;\n    @Input() showCoords = true;\n    /**\n     * Enabling free mode removes turn-based restriction and allows to move any piece freely!\n     */\n    @Output() moveChange = new EventEmitter<MoveChange>();\n    @Output() checkmate = new EventEmitter<void>();\n    @Output() stalemate = new EventEmitter<void>();\n\n    @ViewChild('boardRef')\n    boardRef: ElementRef;\n    @ViewChild('modal')\n    modal: PiecePromotionModalComponent;\n\n    pieceSize: number;\n    selected = false;\n    boardLoader: BoardLoader;\n    pieceIconManager: PieceIconInputManager;\n\n    engineFacade: AbstractEngineFacade;\n\n    constructor(private ngxChessBoardService: NgxChessBoardService) {\n        this.engineFacade = new EngineFacade(\n            new Board(),\n            this.moveChange\n        );\n    }\n\n    @Input('size')\n    public set size(size: number) {\n        if (\n            size &&\n            size >= Constants.MIN_BOARD_SIZE &&\n            size <= Constants.MAX_BOARD_SIZE\n        ) {\n            this.engineFacade.heightAndWidth = size;\n        } else {\n            this.engineFacade.heightAndWidth = Constants.DEFAULT_SIZE;\n        }\n        this.engineFacade.drawProvider.clear();\n        this.calculatePieceSize();\n    }\n\n    @Input('freeMode')\n    public set freeMode(freeMode: boolean) {\n        this.engineFacade.freeMode = freeMode;\n    }\n\n    @Input('dragDisabled')\n    public set dragDisabled(dragDisabled: boolean) {\n        this.engineFacade.dragDisabled = dragDisabled;\n    }\n\n    @Input('drawDisabled')\n    public set drawDisabled(drawDisabled: boolean) {\n        this.engineFacade.drawDisabled = drawDisabled;\n    }\n\n    @Input('pieceIcons')\n    public set pieceIcons(pieceIcons: PieceIconInput) {\n        this.engineFacade.pieceIconManager.pieceIconInput = pieceIcons;\n    }\n\n    @Input('lightDisabled')\n    public set lightDisabled(lightDisabled: boolean) {\n        this.engineFacade.lightDisabled = lightDisabled;\n    }\n\n    @Input('darkDisabled')\n    public set darkDisabled(darkDisabled: boolean) {\n        this.engineFacade.darkDisabled = darkDisabled;\n    }\n\n    @HostListener('contextmenu', ['$event'])\n    onRightClick(event: MouseEvent) {\n        event.preventDefault();\n    }\n\n    ngOnChanges(changes: SimpleChanges) {\n        if (\n            (changes.lightDisabled &&\n                this.lightDisabled &&\n                this.engineFacade.board.currentWhitePlayer) ||\n            (changes.darkDisabled &&\n                this.darkDisabled &&\n                !this.engineFacade.board.currentWhitePlayer)\n        ) {\n            this.engineFacade.board.possibleCaptures = [];\n            this.engineFacade.board.possibleMoves = [];\n        }\n    }\n\n    ngOnInit() {\n        this.ngxChessBoardService.componentMethodCalled$.subscribe(() => {\n            this.engineFacade.reset();\n        });\n\n    }\n\n    ngAfterViewInit(): void {\n        this.engineFacade.modal = this.modal;\n        this.calculatePieceSize();\n    }\n\n    onMouseUp(event: MouseEvent) {\n        this.engineFacade.onMouseUp(\n            event,\n            this.getClickPoint(event),\n            this.boardRef.nativeElement.getBoundingClientRect().left,\n            this.boardRef.nativeElement.getBoundingClientRect().top\n        );\n    }\n\n    reverse(): void {\n        this.selected = false;\n        this.engineFacade.board.reverse();\n        this.engineFacade.coords.reverse();\n    }\n\n    updateBoard(board: Board) {\n        this.engineFacade.board = board;\n        this.boardLoader.setEngineFacade(this.engineFacade);\n        this.engineFacade.board.possibleCaptures = [];\n        this.engineFacade.board.possibleMoves = [];\n    }\n\n    setFEN(fen: string): void {\n        try {\n            this.engineFacade.boardLoader.setNotationProcessor(\n                NotationProcessorFactory.getProcessor(NotationType.FEN)\n            );\n            this.engineFacade.boardLoader.loadFEN(fen);\n            this.engineFacade.board.possibleCaptures = [];\n            this.engineFacade.board.possibleMoves = [];\n            this.engineFacade.coords.reset();\n        } catch (exception) {\n            this.engineFacade.boardLoader.addPieces();\n        }\n    }\n\n    setPGN(pgn: string): void {\n        try {\n            this.engineFacade.pgnProcessor.reset();\n            this.engineFacade.boardLoader.setNotationProcessor(\n                NotationProcessorFactory.getProcessor(NotationType.PGN)\n            );\n            this.engineFacade.boardLoader.loadPGN(pgn);\n            this.engineFacade.board.possibleCaptures = [];\n            this.engineFacade.board.possibleMoves = [];\n            this.engineFacade.coords.reset();\n        } catch (exception) {\n            console.log(exception);\n            this.engineFacade.boardLoader.addPieces();\n        }\n    }\n\n    getFEN(): string {\n        return this.engineFacade.board.fen;\n    }\n\n    dragEnded(event: CdkDragEnd): void {\n        this.engineFacade.dragEndStrategy.process(event);\n    }\n\n    dragStart(event: CdkDragStart): void {\n        this.engineFacade.dragStartStrategy.process(event);\n    }\n\n    onMouseDown(event: MouseEvent) {\n        this.engineFacade.onMouseDown(event, this.getClickPoint(event),\n            this.boardRef.nativeElement.getBoundingClientRect().left,\n            this.boardRef.nativeElement.getBoundingClientRect().top\n        );\n    }\n\n    getClickPoint(event) {\n        return ClickUtils.getClickPoint(\n            event,\n            this.boardRef.nativeElement.getBoundingClientRect().top,\n            this.boardRef.nativeElement.getBoundingClientRect().height,\n            this.boardRef.nativeElement.getBoundingClientRect().left,\n            this.boardRef.nativeElement.getBoundingClientRect().width\n        );\n    }\n\n    private calculatePieceSize() {\n        this.pieceSize = this.engineFacade.heightAndWidth / 10;\n    }\n\n\n    getCustomPieceIcons(piece: Piece) {\n        return JSON.parse(\n            `{ \"background-image\": \"url('${this.engineFacade.pieceIconManager.getPieceIcon(\n                piece\n            )}')\"}`\n        );\n    }\n\n    move(coords: string): void {\n        this.engineFacade.move(coords);\n    }\n\n    getMoveHistory(): HistoryMove[] {\n        return this.engineFacade.getMoveHistory();\n    }\n\n    reset(): void {\n        this.engineFacade.reset();\n    }\n\n    undo(): void {\n        this.engineFacade.undo();\n    }\n\n    addPiece(\n        pieceTypeInput: PieceTypeInput,\n        colorInput: ColorInput,\n        coords: string\n    ) {\n        this.engineFacade.addPiece(pieceTypeInput, colorInput, coords);\n    }\n\n    getPGN() {\n        return this.engineFacade.pgnProcessor.getPGN();\n    }\n}\n","import {Component, ElementRef, OnInit, ViewChild} from '@angular/core';\r\nimport {Piece} from '../../models/pieces/piece';\r\nimport {Observable} from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'app-piece-promotion-modal',\r\n    templateUrl: './piece-promotion-modal.component.html',\r\n    styleUrls: ['./piece-promotion-modal.component.scss']\r\n})\r\nexport class PiecePromotionModalComponent {\r\n\r\n    @ViewChild('myModal', {static: false}) modal: ElementRef;\r\n\r\n    opened = false;\r\n    private onCloseCallback: (index: number) => void;\r\n\r\n    open(closeCallback: (index: number) => void) {\r\n        this.opened = true;\r\n        this.onCloseCallback = closeCallback;\r\n        this.modal.nativeElement.style.display = 'block';\r\n    }\r\n\r\n    changeSelection(index: number){\r\n        this.modal.nativeElement.style.display = 'none';\r\n        this.opened = false;\r\n        this.onCloseCallback(index);\r\n    }\r\n\r\n}\r\n","import { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { NgxChessBoardComponent } from './ngx-chess-board.component';\r\nimport { PiecePromotionModalComponent } from './piece-promotion/piece-promotion-modal/piece-promotion-modal.component';\r\nimport { NgxChessBoardService } from './service/ngx-chess-board.service';\r\n\r\n@NgModule({\r\n    declarations: [NgxChessBoardComponent, PiecePromotionModalComponent],\r\n    imports: [CommonModule, DragDropModule],\r\n    exports: [NgxChessBoardComponent],\r\n})\r\nexport class NgxChessBoardModule {\r\n    static forRoot(): ModuleWithProviders<NgxChessBoardModule> {\r\n        return {\r\n            ngModule: NgxChessBoardModule,\r\n            providers: [NgxChessBoardService],\r\n        };\r\n    }\r\n}\r\n"]}