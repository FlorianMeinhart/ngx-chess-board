{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","../../../projects/ngx-chess-board/src/lib/models/pieces/color.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/piece.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/point.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/rook.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/king.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/bishop.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/knight.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/pawn.ts","../../../projects/ngx-chess-board/src/lib/models/pieces/queen.ts","../../../projects/ngx-chess-board/src/lib/utils/unicode-constants.ts","../../../projects/ngx-chess-board/src/lib/board-state-provider/board-loader.ts","../../../projects/ngx-chess-board/src/lib/board-state-provider/board-state.ts","../../../projects/ngx-chess-board/src/lib/board-state-provider/board-state-provider.ts","../../../projects/ngx-chess-board/src/lib/coords/coords-provider.ts","../../../projects/ngx-chess-board/src/lib/drawing-tools/arrow.ts","../../../projects/ngx-chess-board/src/lib/drawing-tools/circle.ts","../../../projects/ngx-chess-board/src/lib/drawing-tools/draw-point.ts","../../../projects/ngx-chess-board/src/lib/drawing-tools/draw-provider.ts","../../../projects/ngx-chess-board/src/lib/history-move-provider/history-move.ts","../../../projects/ngx-chess-board/src/lib/history-move-provider/history-move-provider.ts","../../../projects/ngx-chess-board/src/lib/models/board.ts","../../../projects/ngx-chess-board/src/lib/models/move-translation.ts","../../../projects/ngx-chess-board/src/lib/utils/move-utils.ts","../../../projects/ngx-chess-board/src/lib/piece-decorator/available-move-decorator.ts","../../../projects/ngx-chess-board/src/lib/piece-decorator/piece-abstract-decorator.ts","../../../projects/ngx-chess-board/src/lib/utils/constants.ts","../../../projects/ngx-chess-board/src/lib/utils/inputs/piece-icon-input-manager.ts","../../../projects/ngx-chess-board/src/lib/service/ngx-chess-board.service.ts","../../../projects/ngx-chess-board/src/lib/piece-promotion-modal/piece-promotion-modal.component.ts","../../../projects/ngx-chess-board/src/lib/piece-promotion-modal/piece-promotion-modal.component.html","../../../projects/ngx-chess-board/src/lib/ngx-chess-board.component.html","../../../projects/ngx-chess-board/src/lib/ngx-chess-board.component.ts","../../../projects/ngx-chess-board/src/lib/ngx-chess-board.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","__","this","constructor","create","__read","o","n","m","Symbol","iterator","r","e","i","ar","next","done","push","value","error","__spread","arguments","length","concat","Color","Piece","point","color","constant","relValue","board","checkPoints","Point","row","col","isEqual","that","hasCoordsEqual","Rook","_super","_this","isMovedAlready","getPossibleMoves","possiblePoints","isFieldEmpty","j","getPossibleCaptures","isFieldTakenByEnemy","WHITE","BLACK","getCoveredFields","getPieceByField","King","castledAlready","shortCastled","longCastled","isCastling","isFieldUnderAttack","longCastlePossible","isKingInCheck","pieces","leftRook","shortCastlePossible","rightRook","Bishop","Knight","Pawn","reverted","enPassantPoint","enPassantPiece","Math","abs","Queen","UnicodeConstants","WHITE_KING","name","icon","WHITE_QUEEN","WHITE_KNIGHT","WHITE_ROOK","WHITE_PAWN","WHITE_BISHOP","BLACK_KING","BLACK_QUEEN","BLACK_KNIGHT","BLACK_ROOK","BLACK_PAWN","BLACK_BISHOP","BoardLoader","addPieces","calculateFEN","loadFEN","fen","console","log","Error","split","pointer","chunk","charAt","match","Number","pawn","setCurrentPlayer","setCastles","setEnPassant","setFullMoveCount","setBoard","currentWhitePlayer","castleChunk","includes","setRookAlreadyMoved","rook","find","piece","BoardState","BoardStateProvider","statesSubject$","BehaviorSubject","defineProperty","states","addMove","state","getStates","pop","lastState","getLastState","filter","isEmpty","clear","getLastStateIndex","CoordsProvider","defaultXCoords","defaultYCoords","currentXCoords","currentYCoords","reverse","reset","init","Arrow","arrow","start","end","Circle","circle","drawPoint","DrawPoint","x","y","DrawProvider","arrowsSubject$","circlesSubject$","arrows$","asObservable","circles$","circles","arrows","addCircle","reomveCircle","removeCircle","addArrow","removeArrow","containsCircle","checkCircle","some","containsArrow","checkArrow","move","captured","HistoryMoveProvider","historyMovesSubject$","historyMove","historyMoves","lastHistoryMove","getLastMove","getAll","getLastMoveIndex","Board","lastMoveSrc","lastMoveDest","possibleCaptures","possibleMoves","fullMoveCount","isXYInPossibleMoves","isXYInPossibleCaptures","capture","isXYInSourceMove","isXYInDestMove","isXYInActiveMove","activePiece","isPointInPossibleMoves","isPointInPossibleCaptures","whiteKingChecked","blackKingChecked","forEach","reversePoint","clone","cloneDeep","enemyColor","field","king","getKingByColor","getCastleFENString","sort","join","toUpperCase","getEnPassantFENString","String","fromCharCode","emptyFields","foundPiece","this_1","substr","concatedEnPassant","isXYInPointSelection","MoveTranslation","xAxis","yAxis","_xAxis","_yAxis","_reverted","MoveUtils","willMoveCauseCheck","currentColor","destRow","destCol","srcPiece","destPiece","isBound","format","sourcePoint","destPoint","sourceX","destX","translateCoordsToIndex","coords","charCodeAt","AvailableMoveDecorator","pointClicked","Constants","DEFAULT_DARK_TILE_COLOR","DEFAULT_LIGHT_TILE_COLOR","DEFAULT_SIZE","MIN_BOARD_SIZE","MAX_BOARD_SIZE","PieceIconInputManager","_defaultIcons","_pieceIconInput","isDefaultIcons","undefined","pieceIconInput","getPieceIcon","isWhite","whiteKingUrl","blackKingUrl","whiteQueenUrl","blackQueenUrl","whiteRookUrl","blackRookUrl","whiteBishopUrl","blackBishopUrl","whiteKnightUrl","blackKnightUrl","whitePawnUrl","blackPawnUrl","loadDefaultData","NgxChessBoardService","componentMethodCallSource","Subject","componentMethodCalled$","factory","ɵfac","providedIn","PiecePromotionModalComponent","opened","open","closeCallback","onCloseCallback","modal","nativeElement","style","display","changeSelection","index","selectors","viewQuery","rf","ctx","i0.ɵɵelementStart","i0.ɵɵlistener","i0.ɵɵtext","i0.ɵɵelementEnd","i0.ɵɵstyleProp","ctx_r11","pieceSize","i0.ɵɵadvance","i0.ɵɵtextInterpolate1","ctx_r12","$event","i0","ɵɵrestoreView","_r18_1","ɵɵnextContext","dragStart","i0.ɵɵproperty","ctx_r13","pieceIconManager","getPieceByPoint","i_r7","j_r10","ɵɵsanitizeHtml","getCustomPieceIcons","i0.ɵɵtemplate","i0.ɵɵclassProp","ctx_r8","isKingChecked","i0.ɵɵelement","i0.ɵɵattribute","arrow_r24","circle_r25","ctx_r4","heightAndWidth","NgxChessBoardComponent","ngxChessBoardService","darkTileColor","lightTileColor","showCoords","dragDisabled","drawDisabled","lightDisabled","darkDisabled","freeMode","moveChange","EventEmitter","checkmate","stalemate","selected","disabling","boardLoader","boardStateProvider","moveHistoryProvider","drawProvider","size","calculatePieceSize","pieceIcons","onRightClick","event","preventDefault","ngOnChanges","changes","ngOnInit","subscribe","onMouseUp","button","getClickPoint","disableSelection","pieceClicked","isPieceDisabled","handleClickEvent","addDrawPoint","ctrlKey","altKey","shiftKey","onPieceClicked","prepareActivePiece","isFreeMode","onFreeMode","afterMoveActions","promotionIndex","checkIfPawnFirstMove","checkIfRookMoved","checkIfKingMoved","check","checkForPossibleMoves","checkForPat","lastMove","emit","assign","floor","boardRef","getBoundingClientRect","top","height","left","width","movePiece","toMovePiece","newPoint","HistoryMove","checkIfPawnTakesEnPassant","checkIfPawnEnpassanted","increaseFullMoveCount","checkForPawnPromote","toPromotePiece","resolvePromotionChoice","openPromoteDialog","updateBoard","undo","lastBoard","getMoveHistory","setFEN","exception","getFEN","dragEnded","source","element","zIndex","pointerEvents","touchAction","position","onMouseDown","getDrawingPoint","crtl","alt","shift","squareSize","xx","yy","saveClone","saveMoveClone","moveStateProvider","isMouseDown","moving","upPoint","sourceIndexes","substring","destIndexes","JSON","parse","ɵɵdirectiveInject","_r26_1","ɵɵreference","i0.ɵɵnamespaceSVG","i0.ɵɵnamespaceHTML","NgxChessBoardModule","forRoot","ngModule","providers","imports","CommonModule","DragDropModule","declarations","exports"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","export enum Color {\r\n    WHITE,\r\n    BLACK,\r\n}\r\n","import { AbstractPiece } from '../../piece-decorator/abstract-piece';\r\nimport { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { Point } from './point';\r\n\r\nexport abstract class Piece implements AbstractPiece {\r\n    point: Point;\r\n    color: Color;\r\n    constant: PieceConstant;\r\n    checkPoints: Point[] = [];\r\n    relValue: number;\r\n    board: Board;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        relValue: number,\r\n        board: Board\r\n    ) {\r\n        this.color = color;\r\n        this.constant = constant;\r\n        this.point = point;\r\n        this.relValue = relValue;\r\n        this.board = board;\r\n    }\r\n\r\n    abstract getPossibleMoves(): Point[];\r\n\r\n    abstract getPossibleCaptures(): Point[];\r\n\r\n    abstract getCoveredFields(): Point[]; // zwraca liste punktow ktore sa puste lub istnieje na nich pionek tego samego koloru\r\n}\r\n","export class Point {\r\n    row: number;\r\n    col: number;\r\n\r\n    constructor(row: number, col: number) {\r\n        this.row = row;\r\n        this.col = col;\r\n    }\r\n\r\n    isEqual(that: Point) {\r\n        return that && this.row === that.row && this.col === that.col;\r\n    }\r\n\r\n    hasCoordsEqual(row: number, col: number) {\r\n        return row && col && this.row === row && this.col === col;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { King } from './king';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Rook extends Piece {\r\n    isMovedAlready = false;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 5, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    col,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    col,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\nimport { Rook } from './rook';\r\n\r\nexport class King extends Piece {\r\n    castledAlready = false;\r\n    shortCastled = false;\r\n    longCastled = false;\r\n    isMovedAlready;\r\n    isCastling = false;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 0, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        // lewo\r\n        if (\r\n            this.board.isFieldEmpty(row, col - 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row, col - 1));\r\n        }\r\n\r\n        // prawo\r\n        if (\r\n            this.board.isFieldEmpty(row, col + 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row, col + 1));\r\n        }\r\n\r\n        // dol\r\n        if (\r\n            this.board.isFieldEmpty(row + 1, col) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col));\r\n        }\r\n\r\n        // gora\r\n        if (\r\n            this.board.isFieldEmpty(row - 1, col) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col));\r\n        }\r\n\r\n        // lewo gora\r\n        if (\r\n            this.board.isFieldEmpty(row - 1, col - 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col - 1));\r\n        }\r\n        // prawo gora\r\n        if (\r\n            this.board.isFieldEmpty(row - 1, col + 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col + 1));\r\n        }\r\n\r\n        // lewo dol\r\n        if (\r\n            this.board.isFieldEmpty(row + 1, col - 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col - 1));\r\n        }\r\n        // prawo dol\r\n        if (\r\n            this.board.isFieldEmpty(row + 1, col + 1) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col + 1));\r\n        }\r\n\r\n        if (!this.isMovedAlready) {\r\n            let longCastlePossible = true;\r\n            for (let i = col - 1; i > 0; --i) {\r\n                if (\r\n                    !this.board.isFieldEmpty(row, i) ||\r\n                    this.board.isFieldUnderAttack(\r\n                        row,\r\n                        i,\r\n                        this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                    )\r\n                ) {\r\n                    longCastlePossible = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (longCastlePossible && !this.board.isKingInCheck(\r\n                this.color,\r\n                this.board.pieces\r\n            ) && this.board.getPieceByField(row, 0)) {\r\n                const leftRook = this.board.getPieceByField(row, 0);\r\n                if (leftRook instanceof Rook) {\r\n                    if (!leftRook.isMovedAlready) {\r\n                        possiblePoints.push(new Point(row, col - 2));\r\n                    }\r\n                }\r\n            }\r\n\r\n            let shortCastlePossible = true;\r\n            for (let i = col + 1; i < 7; ++i) {\r\n                if (\r\n                    !this.board.isFieldEmpty(row, i) ||\r\n                    this.board.isFieldUnderAttack(\r\n                        row,\r\n                        i,\r\n                        this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                    )\r\n                ) {\r\n                    shortCastlePossible = false;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            if (shortCastlePossible && !this.board.isKingInCheck(\r\n                this.color,\r\n                this.board.pieces\r\n            ) && this.board.getPieceByField(row, 7)) {\r\n                const rightRook = this.board.getPieceByField(row, 7);\r\n                if (rightRook instanceof Rook) {\r\n                    if (!rightRook.isMovedAlready) {\r\n                        possiblePoints.push(new Point(row, col + 2));\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // lewo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row, col - 1));\r\n        }\r\n\r\n        // prawo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row, col + 1));\r\n        }\r\n\r\n        // dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col));\r\n        }\r\n\r\n        // gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col));\r\n        }\r\n\r\n        // lewo gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col - 1));\r\n        }\r\n        // prawo gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row - 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col + 1));\r\n        }\r\n\r\n        // lewo dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col - 1));\r\n        }\r\n        // prawo dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            ) &&\r\n            !this.board.isFieldUnderAttack(\r\n                row + 1,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col + 1));\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // lewo\r\n        possiblePoints.push(new Point(row, col - 1));\r\n\r\n        // prawo\r\n        possiblePoints.push(new Point(row, col + 1));\r\n\r\n        // dol\r\n        possiblePoints.push(new Point(row + 1, col));\r\n\r\n        // gora\r\n        possiblePoints.push(new Point(row - 1, col));\r\n\r\n        // lewo gora\r\n        possiblePoints.push(new Point(row - 1, col - 1));\r\n\r\n        // prawo gora\r\n        possiblePoints.push(new Point(row - 1, col + 1));\r\n\r\n        // lewo dol\r\n        possiblePoints.push(new Point(row + 1, col - 1));\r\n\r\n        // prawo dol\r\n        possiblePoints.push(new Point(row + 1, col + 1));\r\n\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { King } from './king';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Bishop extends Piece {\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 3, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures() {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Knight extends Piece {\r\n    isMovedAlready = false;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 3, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // gora -> lewo\r\n        if (this.board.isFieldEmpty(row - 2, col - 1)) {\r\n            possiblePoints.push(new Point(row - 2, col - 1));\r\n        }\r\n\r\n        // gora -> prawo\r\n        if (this.board.isFieldEmpty(row - 2, col + 1)) {\r\n            possiblePoints.push(new Point(row - 2, col + 1));\r\n        }\r\n\r\n        // lewo -> gora\r\n        if (this.board.isFieldEmpty(row - 1, col - 2)) {\r\n            possiblePoints.push(new Point(row - 1, col - 2));\r\n        }\r\n\r\n        // prawo -> gora\r\n        if (this.board.isFieldEmpty(row - 1, col + 2)) {\r\n            possiblePoints.push(new Point(row - 1, col + 2));\r\n        }\r\n\r\n        // lewo -> dol\r\n        if (this.board.isFieldEmpty(row + 1, col - 2)) {\r\n            possiblePoints.push(new Point(row + 1, col - 2));\r\n        }\r\n\r\n        // prawo -> dol\r\n        if (this.board.isFieldEmpty(row + 1, col + 2)) {\r\n            possiblePoints.push(new Point(row + 1, col + 2));\r\n        }\r\n\r\n        // dol -> lewo\r\n        if (this.board.isFieldEmpty(row + 2, col - 1)) {\r\n            possiblePoints.push(new Point(row + 2, col - 1));\r\n        }\r\n\r\n        // dol -> prawo\r\n        if (this.board.isFieldEmpty(row + 2, col + 1)) {\r\n            possiblePoints.push(new Point(row + 2, col + 1));\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // gora -> lewo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 2,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 2, col - 1));\r\n        }\r\n\r\n        // gora -> prawo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 2,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 2, col + 1));\r\n        }\r\n\r\n        // lewo -> gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col - 2,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col - 2));\r\n        }\r\n\r\n        // prawo -> gora\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row - 1,\r\n                col + 2,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col + 2));\r\n        }\r\n\r\n        // lewo -> dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col - 2,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col - 2));\r\n        }\r\n\r\n        // prawo -> dol\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 1,\r\n                col + 2,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 1, col + 2));\r\n        }\r\n\r\n        // dol -> lewo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 2,\r\n                col - 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 2, col - 1));\r\n        }\r\n\r\n        // dol -> prawo\r\n        if (\r\n            this.board.isFieldTakenByEnemy(\r\n                row + 2,\r\n                col + 1,\r\n                this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n            )\r\n        ) {\r\n            possiblePoints.push(new Point(row + 2, col + 1));\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        // gora -> lewo\r\n        possiblePoints.push(new Point(row - 2, col - 1));\r\n\r\n        // gora -> prawo\r\n        possiblePoints.push(new Point(row - 2, col + 1));\r\n\r\n        // lewo -> gora\r\n        possiblePoints.push(new Point(row - 1, col - 2));\r\n\r\n        // prawo -> gora\r\n        possiblePoints.push(new Point(row - 1, col + 2));\r\n\r\n        // lewo -> dol\r\n        possiblePoints.push(new Point(row + 1, col - 2));\r\n\r\n        // prawo -> dol\r\n        possiblePoints.push(new Point(row + 1, col + 2));\r\n\r\n        // dol -> lewo\r\n        possiblePoints.push(new Point(row + 2, col - 1));\r\n\r\n        // dol -> prawo\r\n        possiblePoints.push(new Point(row + 2, col + 1));\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Pawn extends Piece {\r\n    isMovedAlready = false;\r\n\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 1, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n        if (\r\n            (!this.board.reverted && this.color === Color.WHITE) ||\r\n            (this.board.reverted && this.color === Color.BLACK)\r\n        ) {\r\n            if (this.board.isFieldEmpty(row - 1, col)) {\r\n                possiblePoints.push(new Point(row - 1, col));\r\n\r\n                if (\r\n                    !this.isMovedAlready &&\r\n                    this.board.isFieldEmpty(row - 2, col)\r\n                ) {\r\n                    possiblePoints.push(new Point(row - 2, col));\r\n                }\r\n            }\r\n        } else {\r\n            if (\r\n                /*!board.isFieldTakenByEnemy(row + 1, col, Color.WHITE) &&*/ this.board.isFieldEmpty(\r\n                    row + 1,\r\n                    col\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row + 1, col));\r\n\r\n                if (\r\n                    !this.isMovedAlready &&\r\n                    this.board.isFieldEmpty(row + 2, col)\r\n                ) {\r\n                    possiblePoints.push(new Point(row + 2, col));\r\n                }\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        if (\r\n            (!this.board.reverted && this.color === Color.WHITE) ||\r\n            (this.board.reverted && this.color === Color.BLACK)\r\n        ) {\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row - 1,\r\n                    col - 1,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row - 1, col - 1));\r\n            }\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row - 1,\r\n                    col + 1,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row - 1, col + 1));\r\n            }\r\n        } else {\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row + 1,\r\n                    col - 1,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row + 1, col - 1));\r\n            }\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row + 1,\r\n                    col + 1,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row + 1, col + 1));\r\n            }\r\n        }\r\n\r\n        if (\r\n            this.board.enPassantPoint &&\r\n            this.board.enPassantPiece.color ===\r\n                (this.color === Color.WHITE ? Color.BLACK : Color.WHITE)\r\n        ) {\r\n            if (\r\n                row === this.board.enPassantPiece.point.row &&\r\n                Math.abs(this.board.enPassantPiece.point.col - col) === 1\r\n            ) {\r\n                possiblePoints.push(this.board.enPassantPoint);\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        if (\r\n            (!this.board.reverted && this.color === Color.WHITE) ||\r\n            (this.board.reverted && this.color === Color.BLACK)\r\n        ) {\r\n            possiblePoints.push(new Point(row - 1, col - 1));\r\n\r\n            possiblePoints.push(new Point(row - 1, col + 1));\r\n        } else {\r\n            possiblePoints.push(new Point(row + 1, col - 1));\r\n\r\n            possiblePoints.push(new Point(row + 1, col + 1));\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","import { PieceConstant } from '../../utils/unicode-constants';\r\nimport { Board } from '../board';\r\nimport { Color } from './color';\r\nimport { King } from './king';\r\nimport { Piece } from './piece';\r\nimport { Point } from './point';\r\n\r\nexport class Queen extends Piece {\r\n    constructor(\r\n        point: Point,\r\n        color: Color,\r\n        constant: PieceConstant,\r\n        board: Board\r\n    ) {\r\n        super(point, color, constant, 9, board);\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    col,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    i,\r\n                    col,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(i, col));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(i, col)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (\r\n                this.board.isFieldTakenByEnemy(\r\n                    row,\r\n                    j,\r\n                    this.color === Color.WHITE ? Color.BLACK : Color.WHITE\r\n                )\r\n            ) {\r\n                possiblePoints.push(new Point(row, j));\r\n                break;\r\n            } else {\r\n                if (!this.board.isFieldEmpty(row, j)) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return possiblePoints;\r\n    }\r\n\r\n    getCoveredFields(): Point[] {\r\n        const possiblePoints = [];\r\n\r\n        const row = this.point.row;\r\n        const col = this.point.col;\r\n\r\n        for (let i = row + 1; i < 8; ++i) {\r\n            // dol\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, col) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1; i >= 0; --i) {\r\n            // gora\r\n            if (this.board.isFieldEmpty(i, col)) {\r\n                possiblePoints.push(new Point(i, col));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, col) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, col));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col - 1; j >= 0; --j) {\r\n            // lewo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(row, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let j = col + 1; j < 8; ++j) {\r\n            // prawo\r\n            if (this.board.isFieldEmpty(row, j)) {\r\n                possiblePoints.push(new Point(row, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(row, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(row, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col - 1; i >= 0 && j >= 0; --i, --j) {\r\n            // lewa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row - 1, j = col + 1; i >= 0 && j < 8; --i, ++j) {\r\n            // prawa gorna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col - 1; i < 8 && j >= 0; ++i, --j) {\r\n            // lewa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        for (let i = row + 1, j = col + 1; i < 8 && j < 8; ++i, ++j) {\r\n            // prawa dolna przekatna\r\n            if (this.board.isFieldEmpty(i, j)) {\r\n                possiblePoints.push(new Point(i, j));\r\n            } else {\r\n                if (!(this.board.getPieceByField(i, j) instanceof King)) {\r\n                    possiblePoints.push(new Point(i, j));\r\n                }\r\n                break;\r\n            }\r\n        }\r\n\r\n        return possiblePoints;\r\n    }\r\n}\r\n","export interface PieceConstant {\r\n    name: string;\r\n    icon: string;\r\n}\r\n\r\nexport const UnicodeConstants = {\r\n    WHITE_KING: { name: 'King', icon: '&#x2654;' },\r\n    WHITE_QUEEN: { name: 'Queen', icon: '&#x2655;' },\r\n    WHITE_KNIGHT: { name: 'Knight', icon: '&#x2658' },\r\n    WHITE_ROOK: { name: 'Rook', icon: '&#x2656' },\r\n    WHITE_PAWN: { name: 'Pawn', icon: '&#x2659' },\r\n    WHITE_BISHOP: { name: 'Bishop', icon: '&#x2657' },\r\n\r\n    BLACK_KING: { name: 'King', icon: '&#x265A' },\r\n    BLACK_QUEEN: { name: 'Queen', icon: '&#x265B' },\r\n    BLACK_KNIGHT: { name: 'Knight', icon: '&#x265E' },\r\n    BLACK_ROOK: { name: 'Rook', icon: '&#x265C' },\r\n    BLACK_PAWN: { name: 'Pawn', icon: '&#x265F' },\r\n    BLACK_BISHOP: { name: 'Bishop', icon: '&#x265D' },\r\n};\r\n","import { Board } from '../models/board';\r\nimport { Bishop } from '../models/pieces/bishop';\r\nimport { Color } from '../models/pieces/color';\r\nimport { King } from '../models/pieces/king';\r\nimport { Knight } from '../models/pieces/knight';\r\nimport { Pawn } from '../models/pieces/pawn';\r\nimport { Point } from '../models/pieces/point';\r\nimport { Queen } from '../models/pieces/queen';\r\nimport { Rook } from '../models/pieces/rook';\r\nimport { UnicodeConstants } from '../utils/unicode-constants';\r\n\r\nexport class BoardLoader {\r\n    private board: Board;\r\n\r\n    constructor(board: Board) {\r\n        this.board = board;\r\n    }\r\n\r\n    addPieces() {\r\n        this.board.pieces = [];\r\n        // piony czarne\r\n        for (let i = 0; i < 8; ++i) {\r\n            this.board.pieces.push(new Pawn(new Point(1, i), Color.BLACK, UnicodeConstants.BLACK_PAWN, this.board));\r\n        }\r\n        this.board.pieces.push(new Rook(new Point(0, 0), Color.BLACK, UnicodeConstants.BLACK_ROOK, this.board));\r\n        this.board.pieces.push(new Knight(new Point(0, 1), Color.BLACK, UnicodeConstants.BLACK_KNIGHT, this.board));\r\n        this.board.pieces.push(new Bishop(new Point(0, 2), Color.BLACK, UnicodeConstants.BLACK_BISHOP, this.board));\r\n        this.board.pieces.push(new Queen(new Point(0, 3), Color.BLACK, UnicodeConstants.BLACK_QUEEN, this.board));\r\n        this.board.pieces.push(new King(new Point(0, 4), Color.BLACK, UnicodeConstants.BLACK_KING, this.board));\r\n        this.board.pieces.push(new Bishop(new Point(0, 5), Color.BLACK, UnicodeConstants.BLACK_BISHOP, this.board));\r\n        this.board.pieces.push(new Knight(new Point(0, 6), Color.BLACK, UnicodeConstants.BLACK_KNIGHT, this.board));\r\n        this.board.pieces.push(new Rook(new Point(0, 7), Color.BLACK, UnicodeConstants.BLACK_ROOK, this.board));\r\n\r\n        // piony biale\r\n        for (let i = 0; i < 8; ++i) {\r\n            this.board.pieces.push(new Pawn(new Point(6, i), Color.WHITE, UnicodeConstants.WHITE_PAWN, this.board));\r\n        }\r\n        this.board.pieces.push(new Rook(new Point(7, 0), Color.WHITE, UnicodeConstants.WHITE_ROOK, this.board));\r\n        this.board.pieces.push(new Knight(new Point(7, 1), Color.WHITE, UnicodeConstants.WHITE_KNIGHT, this.board));\r\n        this.board.pieces.push(new Bishop(new Point(7, 2), Color.WHITE, UnicodeConstants.WHITE_BISHOP, this.board));\r\n        this.board.pieces.push(new Queen(new Point(7, 3), Color.WHITE, UnicodeConstants.WHITE_QUEEN, this.board));\r\n        this.board.pieces.push(new King(new Point(7, 4), Color.WHITE, UnicodeConstants.WHITE_KING, this.board));\r\n        this.board.pieces.push(new Bishop(new Point(7, 5), Color.WHITE, UnicodeConstants.WHITE_BISHOP, this.board));\r\n        this.board.pieces.push(new Knight(new Point(7, 6), Color.WHITE, UnicodeConstants.WHITE_KNIGHT, this.board));\r\n        this.board.pieces.push(new Rook(new Point(7, 7), Color.WHITE, UnicodeConstants.WHITE_ROOK, this.board));\r\n\r\n        this.board.calculateFEN();\r\n    }\r\n\r\n    loadFEN(fen: string) {\r\n        console.log(fen);\r\n        if (fen) {\r\n            this.board.reverted = false;\r\n            this.board.pieces = [];\r\n            const split = fen.split('/');\r\n            for (let i = 0; i < 8; ++i) {\r\n                let pointer = 0;\r\n                for (let j = 0; j < 8; ++j) {\r\n                    const chunk = split[i].charAt(j);\r\n                    if (chunk.match(/[0-9]/)) {\r\n                        pointer += Number(chunk);\r\n                    } else {\r\n                        switch (chunk) {\r\n                            case 'r':\r\n                                this.board.pieces.push(\r\n                                    new Rook(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_ROOK,\r\n                                        this.board\r\n                                    )\r\n                                );\r\n                                break;\r\n                            case 'n':\r\n                                this.board.pieces.push(\r\n                                    new Knight(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_KNIGHT,\r\n                                        this.board\r\n                                    )\r\n                                );\r\n\r\n                                break;\r\n                            case 'b':\r\n                                this.board.pieces.push(\r\n                                    new Bishop(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_BISHOP,\r\n                                        this.board\r\n                                    )\r\n                                );\r\n                                break;\r\n                            case 'q':\r\n                                this.board.pieces.push(\r\n                                    new Queen(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_QUEEN,\r\n                                        this.board\r\n                                    )\r\n                                );\r\n                                break;\r\n                            case 'k':\r\n                                this.board.pieces.push(\r\n                                    new King(\r\n                                        new Point(i, pointer),\r\n                                        Color.BLACK,\r\n                                        UnicodeConstants.BLACK_KING,\r\n                                        this.board\r\n                                    )\r\n                                );\r\n                                break;\r\n                            case 'p': {\r\n                                const pawn = new Pawn(\r\n                                    new Point(i, pointer),\r\n                                    Color.BLACK,\r\n                                    UnicodeConstants.BLACK_PAWN,\r\n                                    this.board\r\n                                );\r\n                                if (\r\n                                    (pawn.color === Color.BLACK && pawn.point.row !== 1) ||\r\n                                    (pawn.color === Color.WHITE && pawn.point.row !== 6)\r\n                                ) {\r\n                                    pawn.isMovedAlready = true;\r\n                                }\r\n                                this.board.pieces.push(pawn);\r\n                                break;\r\n                            }\r\n                            case 'R':\r\n                                this.board.pieces.push(\r\n                                    new Rook(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_ROOK,\r\n                                        this.board\r\n                                    )\r\n                                );\r\n\r\n                                break;\r\n                            case 'N':\r\n                                this.board.pieces.push(\r\n                                    new Knight(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_KNIGHT,\r\n                                        this.board\r\n                                    )\r\n                                );\r\n                                break;\r\n\r\n                            case 'B':\r\n                                this.board.pieces.push(\r\n                                    new Bishop(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_BISHOP,\r\n                                        this.board\r\n                                    )\r\n                                );\r\n                                break;\r\n\r\n                            case 'Q':\r\n                                this.board.pieces.push(\r\n                                    new Queen(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_QUEEN,\r\n                                        this.board\r\n                                    )\r\n                                );\r\n                                break;\r\n\r\n                            case 'K':\r\n                                this.board.pieces.push(\r\n                                    new King(\r\n                                        new Point(i, pointer),\r\n                                        Color.WHITE,\r\n                                        UnicodeConstants.WHITE_KING,\r\n                                        this.board\r\n                                    )\r\n                                );\r\n                                break;\r\n\r\n                            case 'P': {\r\n                                const pawn = new Pawn(\r\n                                    new Point(i, pointer),\r\n                                    Color.WHITE,\r\n                                    UnicodeConstants.WHITE_PAWN,\r\n                                    this.board\r\n                                );\r\n                                if (\r\n                                    (pawn.color === Color.BLACK && pawn.point.row !== 1) ||\r\n                                    (pawn.color === Color.WHITE && pawn.point.row !== 6)\r\n                                ) {\r\n                                    pawn.isMovedAlready = true;\r\n                                }\r\n                                this.board.pieces.push(pawn);\r\n                                break;\r\n                            }\r\n                        }\r\n                        ++pointer;\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.setCurrentPlayer(fen);\r\n            this.setCastles(fen);\r\n            this.setEnPassant(fen);\r\n            this.setFullMoveCount(fen);\r\n        } else {\r\n            throw Error('Incorrect FEN provided');\r\n        }\r\n    }\r\n\r\n    setBoard(board: Board) {\r\n        this.board = board;\r\n    }\r\n\r\n    private setCurrentPlayer(fen: string) {\r\n        if (fen) {\r\n            const split = fen.split(' ');\r\n            this.board.currentWhitePlayer = split[1] === 'w';\r\n        }\r\n    }\r\n\r\n    private setCastles(fen: string) {\r\n        if (fen) {\r\n            const split = fen.split(' ');\r\n            const castleChunk = split[2];\r\n\r\n            if (!castleChunk.includes('K')) {\r\n                this.setRookAlreadyMoved(Color.WHITE, 7);\r\n            }\r\n\r\n            if (!castleChunk.includes('Q')) {\r\n                this.setRookAlreadyMoved(Color.WHITE, 0);\r\n            }\r\n\r\n            if (!castleChunk.includes('k')) {\r\n                this.setRookAlreadyMoved(Color.BLACK, 7);\r\n            }\r\n\r\n            if (!castleChunk.includes('q')) {\r\n                this.setRookAlreadyMoved(Color.BLACK, 0);\r\n            }\r\n        }\r\n    }\r\n\r\n    private setFullMoveCount(fen: string) {}\r\n\r\n    private setEnPassant(fen: string) {\r\n        if (fen) {\r\n            const split = fen.split(' ');\r\n            const enPassantPoint = split[3];\r\n\r\n            if (enPassantPoint === '-') {\r\n                return;\r\n            }\r\n\r\n            // if()\r\n        }\r\n    }\r\n\r\n    private setRookAlreadyMoved(color: Color, col: number) {\r\n        const rook = this.board.pieces.find(\r\n            (piece) => piece.color === color && piece instanceof Rook && piece.point.col === col\r\n        ) as Rook;\r\n\r\n        if(rook) {\r\n            rook.isMovedAlready = true;\r\n        }\r\n    }\r\n}\r\n","import { Board } from '../models/board';\r\n\r\nexport class BoardState {\r\n\r\n    board: Board;\r\n\r\n    constructor(board: Board) {\r\n        this.board = board;\r\n    }\r\n\r\n}\r\n","import { BehaviorSubject } from 'rxjs';\r\nimport { BoardState } from './board-state';\r\n\r\nexport class BoardStateProvider {\r\n    statesSubject$ = new BehaviorSubject<BoardState[]>([]);\r\n\r\n    get states(): BoardState[] {\r\n        return this.statesSubject$.value;\r\n    }\r\n\r\n    set states(states: BoardState[]) {\r\n        this.statesSubject$.next(states);\r\n    }\r\n\r\n    addMove(state: BoardState) {\r\n        this.states = [...this.states, state];\r\n    }\r\n\r\n    getStates(): BoardState[] {\r\n        return this.states;\r\n    }\r\n\r\n    pop(): BoardState {\r\n        const lastState = this.getLastState();\r\n        this.states = this.states.filter((state) => state !== lastState);\r\n        return lastState;\r\n    }\r\n\r\n    isEmpty() {\r\n        return this.states.length === 0;\r\n    }\r\n\r\n    clear() {\r\n        this.states = [];\r\n    }\r\n\r\n    getLastState() {\r\n        return this.states[this.getLastStateIndex()];\r\n    }\r\n\r\n    getLastStateIndex(): number {\r\n        return this.states.length - 1;\r\n    }\r\n}\r\n","export class CoordsProvider {\r\n    private readonly defaultXCoords: string[] = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\r\n\r\n    private readonly defaultYCoords: number[] = [8, 7, 6, 5, 4, 3, 2, 1];\r\n\r\n    private currentXCoords: string[] = [...this.defaultXCoords];\r\n    private currentYCoords: number[] = [...this.defaultYCoords];\r\n\r\n    get xCoords(): string[] {\r\n        return this.currentXCoords;\r\n    }\r\n\r\n    get yCoords(): number[] {\r\n        return this.currentYCoords;\r\n    }\r\n\r\n    reverse() {\r\n        this.currentXCoords = this.currentXCoords.reverse();\r\n        this.currentYCoords = this.currentYCoords.reverse();\r\n    }\r\n\r\n    reset() {\r\n        this.init();\r\n    }\r\n\r\n    private init() {\r\n        this.currentXCoords = [...this.defaultXCoords];\r\n        this.currentYCoords = [...this.defaultYCoords];\r\n    }\r\n}\r\n","import { DrawPoint } from './draw-point';\r\n\r\nexport class Arrow {\r\n    start: DrawPoint;\r\n    end: DrawPoint;\r\n\r\n    isEqual(arrow: Arrow) {\r\n        return arrow && this.start.isEqual(arrow.start) && this.end.isEqual(arrow.end);\r\n    }\r\n}\r\n","import { DrawPoint } from './draw-point';\r\n\r\nexport class Circle {\r\n    drawPoint: DrawPoint;\r\n\r\n    isEqual(circle: Circle) {\r\n        return circle && this.drawPoint.isEqual(circle.drawPoint);\r\n    }\r\n}\r\n","export class DrawPoint {\r\n    x: number;\r\n    y: number;\r\n    color: string;\r\n\r\n    constructor(x: number, y: number, color: string) {\r\n        this.x = x + 0.5;\r\n        this.y = y + 0.5;\r\n        this.color = color;\r\n    }\r\n\r\n    isEqual(that: DrawPoint) {\r\n        return that && that.x === this.x && this.y === that.y;\r\n    }\r\n}\r\n","import { BehaviorSubject } from 'rxjs';\r\nimport { Arrow } from './arrow';\r\nimport { Circle } from './circle';\r\n\r\nexport class DrawProvider {\r\n    private arrowsSubject$ = new BehaviorSubject<Arrow[]>([]);\r\n    private circlesSubject$ = new BehaviorSubject<Circle[]>([]);\r\n\r\n    public arrows$ = this.arrowsSubject$.asObservable();\r\n    public circles$ = this.circlesSubject$.asObservable();\r\n\r\n    private get circles(): Circle[] {\r\n        return this.circlesSubject$.value;\r\n    }\r\n\r\n    private set circles(circles: Circle[]) {\r\n        this.circlesSubject$.next(circles);\r\n    }\r\n\r\n    private get arrows(): Arrow[] {\r\n        return this.arrowsSubject$.value;\r\n    }\r\n\r\n    private set arrows(arrows: Arrow[]) {\r\n        this.arrowsSubject$.next(arrows);\r\n    }\r\n\r\n    addCircle(circle: Circle) {\r\n        this.circles = [...this.circles, circle];\r\n    }\r\n\r\n    reomveCircle(removeCircle: Circle) {\r\n        this.circles = this.circles.filter((circle) => !circle.isEqual(removeCircle));\r\n    }\r\n\r\n    addArrow(arrow: Arrow) {\r\n        this.arrows = [...this.arrows, arrow];\r\n    }\r\n\r\n    removeArrow(removeArrow: Arrow) {\r\n        this.arrows = this.arrows.filter((arrow) => !arrow.isEqual(removeArrow));\r\n    }\r\n\r\n    containsCircle(checkCircle: Circle) {\r\n        return this.circles.some((circle) => circle.isEqual(checkCircle));\r\n    }\r\n\r\n    containsArrow(checkArrow: Arrow) {\r\n        return this.arrows.some((arrow: Arrow) => arrow.isEqual(checkArrow));\r\n    }\r\n\r\n    clear() {\r\n        this.arrows = [];\r\n        this.circles = [];\r\n    }\r\n}\r\n","import { Board } from '../models/board';\r\n\r\nexport class HistoryMove {\r\n    move: string;\r\n    piece: string;\r\n    color: string;\r\n    x: boolean;\r\n\r\n    constructor(move: string, piece: string, color: string, captured: boolean) {\r\n        this.move = move;\r\n        this.piece = piece;\r\n        this.color = color;\r\n        this.x = captured;\r\n    }\r\n}\r\n","import { BehaviorSubject } from 'rxjs';\r\nimport { HistoryMove } from './history-move';\r\n\r\nexport class HistoryMoveProvider {\r\n    historyMovesSubject$ = new BehaviorSubject<HistoryMove[]>([]);\r\n\r\n    get historyMoves(): HistoryMove[] {\r\n        return this.historyMovesSubject$.value;\r\n    }\r\n\r\n    set historyMoves(states: HistoryMove[]) {\r\n        this.historyMovesSubject$.next(states);\r\n    }\r\n\r\n    addMove(historyMove: HistoryMove) {\r\n        this.historyMoves = [...this.historyMoves, historyMove];\r\n    }\r\n\r\n    pop(): HistoryMove {\r\n        const lastHistoryMove = this.getLastMove();\r\n        this.historyMoves = this.historyMoves.filter(\r\n            (state) => state !== lastHistoryMove\r\n        );\r\n        return lastHistoryMove;\r\n    }\r\n\r\n    getAll() {\r\n        return this.historyMoves;\r\n    }\r\n\r\n    clear() {\r\n        this.historyMoves = [];\r\n    }\r\n\r\n    getLastMove() {\r\n        return this.historyMoves[this.getLastMoveIndex()];\r\n    }\r\n\r\n    getLastMoveIndex() {\r\n        return this.historyMoves.length - 1;\r\n    }\r\n}\r\n","import { cloneDeep } from 'lodash';\nimport { Bishop } from './pieces/bishop';\nimport { Color } from './pieces/color';\nimport { King } from './pieces/king';\nimport { Knight } from './pieces/knight';\nimport { Pawn } from './pieces/pawn';\nimport { Piece } from './pieces/piece';\nimport { Point } from './pieces/point';\nimport { Queen } from './pieces/queen';\nimport { Rook } from './pieces/rook';\n\nexport class Board {\n    board: number[][] = [];\n    pieces: Piece[] = [];\n\n    enPassantPoint: Point = null;\n    enPassantPiece: Piece = null;\n    lastMoveSrc: Point = null;\n    lastMoveDest: Point = null;\n    activePiece: Piece;\n\n    blackKingChecked: boolean;\n    possibleCaptures: any[] = [];\n    possibleMoves: Point[] = [];\n    whiteKingChecked: boolean;\n\n    currentWhitePlayer = true;\n    reverted = false;\n    fullMoveCount = 1;\n    fen: string;\n\n    constructor() {\n        for (let i = 0; i < 8; ++i) {\n            this.board[i] = [];\n            for (let j = 0; j < 8; ++j) {\n                this.board[i][j] = 0;\n            }\n        }\n    }\n\n    isXYInPossibleMoves(row: number, col: number): boolean {\n        return this.possibleMoves.some((move) => move.row === row && move.col === col);\n    }\n\n    isXYInPossibleCaptures(row: number, col: number): boolean {\n        return this.possibleCaptures.some((capture) => capture.row === row && capture.col === col);\n    }\n\n    isXYInSourceMove(i: number, j: number) {\n        return this.lastMoveSrc && this.lastMoveSrc.row === i && this.lastMoveSrc.col === j;\n    }\n\n    isXYInDestMove(i: number, j: number) {\n        return this.lastMoveDest && this.lastMoveDest.row === i && this.lastMoveDest.col === j;\n    }\n\n    isXYInActiveMove(i: number, j: number) {\n        return this.activePiece && this.activePiece.point.row === i && this.activePiece.point.col === j;\n    }\n\n    isPointInPossibleMoves(point: Point): boolean {\n        return this.possibleMoves.some((move) => move.row === point.row && move.col === point.col);\n    }\n\n    isPointInPossibleCaptures(point: Point): boolean {\n        return this.possibleCaptures.some((capture) => capture.row === point.row && capture.col === point.col);\n    }\n\n    reset() {\n        this.lastMoveDest = null;\n        this.lastMoveSrc = null;\n        this.whiteKingChecked = false;\n        this.blackKingChecked = false;\n        this.possibleCaptures = [];\n        this.possibleMoves = [];\n        this.activePiece = null;\n        this.reverted = false;\n        this.currentWhitePlayer = true;\n        this.enPassantPoint = null;\n        this.enPassantPiece = null;\n        this.fullMoveCount = 1;\n        this.calculateFEN();\n    }\n\n    reverse() {\n        this.reverted = !this.reverted;\n        this.activePiece = null;\n        this.possibleMoves = [];\n        this.possibleCaptures = [];\n\n        this.pieces.forEach((piece: Piece) => this.reversePoint(piece.point));\n\n        this.reversePoint(this.lastMoveSrc);\n\n        if (this.enPassantPoint && this.enPassantPiece) {\n            this.reversePoint(this.enPassantPoint);\n        }\n    }\n\n    clone(): Board {\n        return cloneDeep(this);\n    }\n\n    isFieldTakenByEnemy(row: number, col: number, enemyColor: Color): boolean {\n        if (row > 7 || row < 0 || col > 7 || col < 0) {\n            return false;\n        }\n        return this.pieces.some(\n            (piece) => piece.point.col === col && piece.point.row === row && piece.color === enemyColor\n        );\n    }\n\n    isFieldEmpty(row: number, col: number): boolean {\n        if (row > 7 || row < 0 || col > 7 || col < 0) {\n            return false;\n        }\n        return !this.pieces.some((piece) => piece.point.col === col && piece.point.row === row);\n    }\n\n    isFieldUnderAttack(row: number, col: number, color: Color) {\n        return this.pieces\n            .filter((piece) => piece.color === color)\n            .some((piece) => piece.getCoveredFields().some((field) => field.col === col && field.row === row));\n    }\n\n    getPieceByField(row: number, col: number): Piece {\n        if (this.isFieldEmpty(row, col)) {\n            //   throw new Error('Piece not found');\n            return undefined;\n        }\n\n        return this.pieces.find((piece) => piece.point.col === col && piece.point.row === row);\n    }\n\n    isKingInCheck(color: Color, pieces: Piece[]): boolean {\n        const king = pieces.find((piece) => piece.color === color && piece instanceof King);\n\n        if (king) {\n            return pieces.some(\n                (piece) =>\n                    piece\n                        .getPossibleCaptures()\n                        .some((point) => point.col === king.point.col && point.row === king.point.row) &&\n                    piece.color !== color\n            );\n        }\n        return false;\n    }\n\n    getKingByColor(color: Color): King {\n        return this.pieces.find((piece) => piece instanceof King && piece.color === color) as King;\n    }\n\n    getCastleFENString(color: Color) {\n        const king = this.getKingByColor(color);\n\n        if (king.isMovedAlready) {\n            return '';\n        }\n\n        let fen = '';\n        const leftRook = this.getPieceByField(king.point.row, 0);\n        const rightRook = this.getPieceByField(king.point.row, 7);\n\n        if (rightRook instanceof Rook && rightRook.color === color) {\n            if (!rightRook.isMovedAlready) {\n                fen += this.reverted ? 'q' : 'k';\n            }\n        }\n\n        if (leftRook instanceof Rook && leftRook.color === color) {\n            if (!leftRook.isMovedAlready) {\n                fen += this.reverted ? 'k' : 'q';\n            }\n        }\n\n        fen = fen.split('').sort().join('');\n        return color === Color.BLACK ? fen : fen.toUpperCase();\n    }\n\n    getEnPassantFENString() {\n        if (this.enPassantPoint) {\n            if (this.reverted) {\n                return String.fromCharCode(104 - this.enPassantPoint.col) + (this.enPassantPoint.row + 1);\n            } else {\n                return String.fromCharCode(97 + this.enPassantPoint.col) + (Math.abs(this.enPassantPoint.row - 7) + 1);\n            }\n        } else {\n            return '-';\n        }\n    }\n\n    calculateFEN() {\n        let fen = '';\n        for (let i = 0; i < 8; ++i) {\n            let emptyFields = 0;\n            for (let j = 0; j < 8; ++j) {\n                const foundPiece = this.pieces.find((piece) => piece.point.col === j && piece.point.row === i);\n                if (foundPiece) {\n                    if (emptyFields > 0) {\n                        fen += emptyFields;\n                        emptyFields = 0;\n                    }\n\n                    if (foundPiece instanceof Rook) {\n                        fen += foundPiece.color === Color.BLACK ? 'r' : 'R';\n                    } else {\n                        if (foundPiece instanceof Knight) {\n                            fen += foundPiece.color === Color.BLACK ? 'n' : 'N';\n                        } else {\n                            if (foundPiece instanceof Bishop) {\n                                fen += foundPiece.color === Color.BLACK ? 'b' : 'B';\n                            } else {\n                                if (foundPiece instanceof Queen) {\n                                    fen += foundPiece.color === Color.BLACK ? 'q' : 'Q';\n                                } else {\n                                    if (foundPiece instanceof King) {\n                                        fen += foundPiece.color === Color.BLACK ? 'k' : 'K';\n                                    } else {\n                                        if (foundPiece instanceof Pawn) {\n                                            fen += foundPiece.color === Color.BLACK ? 'p' : 'P';\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    ++emptyFields;\n                }\n            }\n\n            if (emptyFields > 0) {\n                fen += emptyFields;\n            }\n\n            fen += '/';\n        }\n\n        fen = fen.substr(0, fen.length - 1);\n\n        if (this.reverted) {\n            fen = fen.split('').reverse().join('');\n        }\n\n        fen += ' ' + (this.currentWhitePlayer ? 'w' : 'b');\n        const whiteEnPassant = this.getCastleFENString(Color.WHITE);\n        const blackEnPassant = this.getCastleFENString(Color.BLACK);\n        let concatedEnPassant = whiteEnPassant + blackEnPassant;\n        if (!concatedEnPassant) {\n            concatedEnPassant = '-';\n        }\n\n        fen += ' ' + concatedEnPassant;\n        fen += ' ' + this.getEnPassantFENString();\n        fen += ' ' + 0;\n        fen += ' ' + this.fullMoveCount;\n        this.fen = fen;\n    }\n\n    isXYInPointSelection(i: number, j: number) {\n        return false;\n    }\n\n    private reversePoint(point: Point) {\n        if (point) {\n            point.row = Math.abs(point.row - 7);\n            point.col = Math.abs(point.col - 7);\n        }\n    }\n}\n","export class MoveTranslation {\r\n    private _xAxis: number;\r\n    private _yAxis: number;\r\n    private _reverted: boolean;\r\n\r\n    constructor(xAxis: number, yAxis: number, reverted: boolean) {\r\n        this._xAxis = xAxis;\r\n        this._yAxis = yAxis;\r\n        this._reverted = reverted;\r\n    }\r\n\r\n    get xAxis(): number {\r\n        return this._xAxis;\r\n    }\r\n\r\n    set xAxis(value: number) {\r\n        this._xAxis = value;\r\n    }\r\n\r\n    get yAxis(): number {\r\n        return this._yAxis;\r\n    }\r\n\r\n    set yAxis(value: number) {\r\n        this._yAxis = value;\r\n    }\r\n\r\n    get reverted(): boolean {\r\n        return this._reverted;\r\n    }\r\n\r\n    set reverted(value: boolean) {\r\n        this._reverted = value;\r\n    }\r\n}\r\n","import { Board } from '../models/board';\r\nimport { Color } from '../models/pieces/color';\r\nimport { Point } from '../models/pieces/point';\r\nimport { MoveTranslation } from '../models/move-translation';\r\n\r\nexport class MoveUtils {\r\n    public static willMoveCauseCheck(\r\n        currentColor: Color,\r\n        row: number,\r\n        col: number,\r\n        destRow: number,\r\n        destCol: number,\r\n        board: Board\r\n    ) {\r\n        const srcPiece = board.getPieceByField(row, col);\r\n        const destPiece = board.getPieceByField(destRow, destCol);\r\n\r\n        if (srcPiece) {\r\n            srcPiece.point.row = destRow;\r\n            srcPiece.point.col = destCol;\r\n        }\r\n\r\n        if (destPiece) {\r\n            board.pieces = board.pieces.filter((piece) => piece !== destPiece);\r\n        }\r\n        const isBound = board.isKingInCheck(currentColor, board.pieces);\r\n\r\n        if (srcPiece) {\r\n            srcPiece.point.col = col;\r\n            srcPiece.point.row = row;\r\n        }\r\n\r\n        if (destPiece) {\r\n            board.pieces.push(destPiece);\r\n        }\r\n\r\n        return isBound;\r\n    }\r\n\r\n    public static format(\r\n        sourcePoint: Point,\r\n        destPoint: Point,\r\n        reverted: boolean\r\n    ) {\r\n        if (reverted) {\r\n            const sourceX = 104 - sourcePoint.col;\r\n            const destX = 104 - destPoint.col;\r\n            return (\r\n                String.fromCharCode(sourceX) +\r\n                (sourcePoint.row + 1) +\r\n                String.fromCharCode(destX) +\r\n                (destPoint.row + 1)\r\n            );\r\n        } else {\r\n            const incrementX = 97;\r\n            return (\r\n                String.fromCharCode(sourcePoint.col + incrementX) +\r\n                (Math.abs(sourcePoint.row - 7) + 1) +\r\n                String.fromCharCode(destPoint.col + incrementX) +\r\n                (Math.abs(destPoint.row - 7) + 1)\r\n            );\r\n        }\r\n    }\r\n\r\n    public static translateCoordsToIndex(coords: string, reverted: boolean) {\r\n        let xAxis: number;\r\n        let yAxis: number;\r\n        if (reverted) {\r\n            xAxis = 104 - coords.charCodeAt(0);\r\n            yAxis = +coords.charAt(1) - 1;\r\n        } else {\r\n            xAxis = coords.charCodeAt(0) - 97;\r\n            yAxis = Math.abs(+coords.charAt(1) - 8);\r\n        }\r\n\r\n        return new MoveTranslation(xAxis, yAxis, reverted);\r\n    }\r\n}\r\n","import { Board } from '../models/board';\r\nimport { Color } from '../models/pieces/color';\r\nimport { Point } from '../models/pieces/point';\r\nimport { MoveUtils } from '../utils/move-utils';\r\nimport { AbstractPiece } from './abstract-piece';\r\nimport { PieceAbstractDecorator } from './piece-abstract-decorator';\r\n\r\nexport class AvailableMoveDecorator extends PieceAbstractDecorator {\r\n    private pointClicked: Point;\r\n    private color: Color;\r\n    private board: Board;\r\n\r\n    constructor(piece: AbstractPiece, pointClicked: Point, color: Color, board: Board) {\r\n        super(piece);\r\n        this.pointClicked = pointClicked;\r\n        this.color = color;\r\n        this.board = board;\r\n    }\r\n\r\n    getPossibleCaptures(): Point[] {\r\n        return this.piece\r\n            .getPossibleCaptures()\r\n            .filter(\r\n                (point) =>\r\n                    !MoveUtils.willMoveCauseCheck(\r\n                        this.color,\r\n                        this.pointClicked.row,\r\n                        this.pointClicked.col,\r\n                        point.row,\r\n                        point.col,\r\n                        this.board\r\n                    )\r\n            );\r\n    }\r\n\r\n    getPossibleMoves(): Point[] {\r\n        return this.piece\r\n            .getPossibleMoves()\r\n            .filter(\r\n                (point) =>\r\n                    !MoveUtils.willMoveCauseCheck(\r\n                        this.color,\r\n                        this.pointClicked.row,\r\n                        this.pointClicked.col,\r\n                        point.row,\r\n                        point.col,\r\n                        this.board\r\n                    )\r\n            );\r\n    }\r\n}\r\n","import { Point } from '../models/pieces/point';\r\nimport { AbstractPiece } from './abstract-piece';\r\n\r\nexport abstract class PieceAbstractDecorator implements AbstractPiece {\r\n\r\n    piece: AbstractPiece;\r\n\r\n    protected constructor(piece: AbstractPiece) {\r\n        this.piece = piece;\r\n    }\r\n\r\n    abstract getPossibleCaptures(): Point[];\r\n\r\n    abstract getPossibleMoves(): Point[];\r\n\r\n}\r\n","export class Constants {\r\n    static readonly DEFAULT_DARK_TILE_COLOR = 'rgb(97, 84, 61)';\r\n    static readonly DEFAULT_LIGHT_TILE_COLOR = '#BAA378';\r\n\r\n    static readonly DEFAULT_SIZE = 500;\r\n    static readonly MIN_BOARD_SIZE = 100;\r\n    static readonly MAX_BOARD_SIZE = 4000;\r\n\r\n}\r\n","import { Bishop } from '../../models/pieces/bishop';\r\nimport { Color } from '../../models/pieces/color';\r\nimport { King } from '../../models/pieces/king';\r\nimport { Knight } from '../../models/pieces/knight';\r\nimport { Pawn } from '../../models/pieces/pawn';\r\nimport { Piece } from '../../models/pieces/piece';\r\nimport { Queen } from '../../models/pieces/queen';\r\nimport { Rook } from '../../models/pieces/rook';\r\nimport { PieceIconInput } from './piece-icon-input';\r\n\r\nexport class PieceIconInputManager {\r\n\r\n    private _defaultIcons: boolean = false;\r\n    private _pieceIconInput: PieceIconInput;\r\n\r\n    get pieceIconInput(): PieceIconInput {\r\n        return this._pieceIconInput;\r\n    }\r\n\r\n    set pieceIconInput(value: PieceIconInput) {\r\n        this._pieceIconInput = value;\r\n    }\r\n\r\n\r\n    get defaultIcons(): boolean {\r\n        return this._defaultIcons;\r\n    }\r\n\r\n    set defaultIcons(value: boolean) {\r\n        this._defaultIcons = value;\r\n    }\r\n\r\n    isDefaultIcons(): boolean {\r\n        return this.pieceIconInput === undefined || this.pieceIconInput === null;\r\n    }\r\n\r\n    getPieceIcon(piece: Piece): string {\r\n        let isWhite = (piece.color === Color.WHITE);\r\n        switch (piece.constructor) {\r\n            case King:\r\n                return isWhite ? this.pieceIconInput.whiteKingUrl : this.pieceIconInput.blackKingUrl;\r\n            case Queen:\r\n                return isWhite ? this.pieceIconInput.whiteQueenUrl : this.pieceIconInput.blackQueenUrl;\r\n            case Rook:\r\n                return isWhite ? this.pieceIconInput.whiteRookUrl : this.pieceIconInput.blackRookUrl;\r\n            case Bishop:\r\n                return isWhite ? this.pieceIconInput.whiteBishopUrl : this.pieceIconInput.blackBishopUrl;\r\n            case Knight:\r\n                return isWhite ? this.pieceIconInput.whiteKnightUrl : this.pieceIconInput.blackKnightUrl;\r\n            case Pawn:\r\n                return isWhite ? this.pieceIconInput.whitePawnUrl : this.pieceIconInput.blackPawnUrl;\r\n        }\r\n    }\r\n\r\n    loadDefaultData(){\r\n        this.pieceIconInput = {\r\n            blackBishopUrl: '',\r\n            blackKingUrl: '',\r\n            blackKnightUrl: '',\r\n            blackQueenUrl: '',\r\n            blackRookUrl: '',\r\n            whiteBishopUrl: '',\r\n            whiteKingUrl: '',\r\n            whiteKnightUrl: '',\r\n            whitePawnUrl: '',\r\n            whiteQueenUrl: '',\r\n            whiteRookUrl: '',\r\n            blackPawnUrl: 'a'\r\n        }\r\n    }\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { Subject } from 'rxjs';\r\n\r\n@Injectable({\r\n    providedIn: 'root',\r\n})\r\nexport class NgxChessBoardService {\r\n    private componentMethodCallSource = new Subject<any>();\r\n\r\n    componentMethodCalled$ = this.componentMethodCallSource.asObservable();\r\n\r\n    reset() {\r\n        this.componentMethodCallSource.next();\r\n    }\r\n}\r\n","import {Component, ElementRef, OnInit, ViewChild} from '@angular/core';\r\nimport {Piece} from '../models/pieces/piece';\r\nimport {Observable} from 'rxjs';\r\n\r\n@Component({\r\n    selector: 'app-piece-promotion-modal',\r\n    templateUrl: './piece-promotion-modal.component.html',\r\n    styleUrls: ['./piece-promotion-modal.component.scss']\r\n})\r\nexport class PiecePromotionModalComponent {\r\n\r\n    @ViewChild('myModal', {static: false}) modal: ElementRef;\r\n\r\n    opened = false;\r\n    private onCloseCallback: (index: number) => void;\r\n\r\n    open(closeCallback: (index: number) => void) {\r\n        this.opened = true;\r\n        this.onCloseCallback = closeCallback;\r\n        this.modal.nativeElement.style.display = 'block';\r\n    }\r\n\r\n    changeSelection(index: number){\r\n        this.modal.nativeElement.style.display = 'none';\r\n        this.opened = false;\r\n        this.onCloseCallback(index);\r\n    }\r\n\r\n}\r\n","<div #myModal class=\"container\">\r\n    <div class=\"wrapper\">\r\n        <div class=\"content\">\r\n            <div class=\"piece-wrapper\">\r\n                <div class=\"piece\" (click)=\"changeSelection(1)\">&#x265B;</div>\r\n                <div class=\"piece\" (click)=\"changeSelection(2)\">&#x265C;</div>\r\n                <div class=\"piece\" (click)=\"changeSelection(3)\">&#x265D;</div>\r\n                <div class=\"piece\" (click)=\"changeSelection(4)\">&#x265E;</div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n</div>\r\n","<div\r\n    id=\"board\"\r\n    [style.height.px]=\"heightAndWidth\"\r\n    [style.width.px]=\"heightAndWidth\"\r\n    (pointerdown)=\"!modal.opened && onMouseDown($event)\"\r\n    (pointerup)=\"!modal.opened && onMouseUp($event)\"\r\n    #boardRef\r\n>\r\n    <div id=\"drag\">\r\n        <div\r\n            class=\"board-row\"\r\n            *ngFor=\"let row of board.board; let i = index\"\r\n        >\r\n            <div\r\n                class=\"board-col\"\r\n                [class.current-selection]=\"board.isXYInActiveMove(i,j)\"\r\n                [class.dest-move]=\"board.isXYInDestMove(i,j)\"\r\n                [class.king-check]=\" isKingChecked(getPieceByPoint(i,j))\"\r\n                [class.point-circle]=\"board.isXYInPointSelection(i, j)\"\r\n                [class.possible-capture]=\"board.isXYInPossibleCaptures(i, j)\"\r\n                [class.possible-point]=\"board.isXYInPossibleMoves(i, j)\"\r\n                [class.source-move]=\"board.isXYInSourceMove(i, j)\"\r\n                [style.background-color]=\"((i + j) % 2 === 0 ) ? lightTileColor : darkTileColor\"\r\n                *ngFor=\"let col of row; let j = index\"\r\n            >\r\n                <span\r\n                    class=\"yCoord\"\r\n                    [style.color]=\"(i % 2 === 0) ? lightTileColor : darkTileColor\"\r\n                    [style.font-size.px]=\"pieceSize / 4\"\r\n                    *ngIf=\"showCoords && j === 7\"\r\n                >\r\n                    {{coords.yCoords[i]}}\r\n                </span>\r\n                <span\r\n                    class=\"xCoord\"\r\n                    [style.color]=\"(j % 2 === 0) ? lightTileColor : darkTileColor\"\r\n                    [style.font-size.px]=\"pieceSize / 4\"\r\n                    *ngIf=\"showCoords && i === 7\"\r\n                >\r\n                    {{coords.xCoords[j]}}\r\n                </span>\r\n                <div\r\n                    *ngIf=\"getPieceByPoint(i, j) as piece\"\r\n                    style=\"height:100%; width:100%\"\r\n                >\r\n                    <div\r\n                        [cdkDragDisabled]=\"dragDisabled\"\r\n                        [innerHTML]=\"pieceIconManager.isDefaultIcons() ? getPieceByPoint(i,j).constant.icon : ''\"\r\n                        [ngClass]=\"'piece'\"\r\n                        [style.font-size]=\"pieceSize + 'px'\"\r\n                        [ngStyle]=\"pieceIconManager.isDefaultIcons() ? '' : getCustomPieceIcons(getPieceByPoint(i,j))\"\r\n                        (cdkDragEnded)=\"dragEnded($event)\"\r\n                        (cdkDragStarted)=\"dragStart($event)\"\r\n                        cdkDrag\r\n                    >\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </div>\r\n    <svg\r\n        [attr.height]=\"heightAndWidth\"\r\n        [attr.width]=\"heightAndWidth\"\r\n        style=\"position:absolute; top:0; pointer-events: none\"\r\n    >\r\n        <defs *ngFor=\"let color of ['red', 'green', 'blue', 'orange']\">\r\n            <marker\r\n                [id]=\"color + 'Arrow'\"\r\n                markerHeight=\"13\"\r\n                markerWidth=\"13\"\r\n                orient=\"auto\"\r\n                refX=\"9\"\r\n                refY=\"6\"\r\n            >\r\n                <path\r\n                    [style.fill]=\"color\"\r\n                    d=\"M2,2 L2,11 L10,6 L2,2\"\r\n                ></path>\r\n            </marker>\r\n        </defs>\r\n        <line\r\n            class=\"arrow\"\r\n            [attr.marker-end]=\"'url(#' + arrow.end.color + 'Arrow)'\"\r\n            [attr.stroke]=\"arrow.end.color\"\r\n            [attr.x1]=\"arrow.start.x\"\r\n            [attr.x2]=\"arrow.end.x\"\r\n            [attr.y1]=\"arrow.start.y\"\r\n            [attr.y2]=\"arrow.end.y\"\r\n            *ngFor=\"let arrow of drawProvider.arrows$ | async\"\r\n        ></line>\r\n        <circle\r\n            [attr.cx]=\"circle.drawPoint.x\"\r\n            [attr.cy]=\"circle.drawPoint.y\"\r\n            [attr.r]=\"heightAndWidth / 18\"\r\n            [attr.stroke]=\"circle.drawPoint.color\"\r\n            *ngFor=\"let circle of drawProvider.circles$ | async\"\r\n            fill-opacity=\"0.0\"\r\n            stroke-width=\"2\"\r\n        ></circle>\r\n    </svg>\r\n    <app-piece-promotion-modal #modal></app-piece-promotion-modal>\r\n</div>\r\n","import { CdkDragEnd, CdkDragStart } from '@angular/cdk/drag-drop';\r\nimport {\r\n    Component,\r\n    ElementRef,\r\n    EventEmitter,\r\n    HostListener,\r\n    Input,\r\n    OnChanges,\r\n    OnInit,\r\n    Output,\r\n    SimpleChanges,\r\n    ViewChild,\r\n} from '@angular/core';\r\nimport { BoardLoader } from './board-state-provider/board-loader';\r\nimport { BoardState } from './board-state-provider/board-state';\r\nimport { BoardStateProvider } from './board-state-provider/board-state-provider';\r\nimport { MoveStateProvider } from './board-state-provider/move-state-provider';\r\nimport { CoordsProvider } from './coords/coords-provider';\r\nimport { Arrow } from './drawing-tools/arrow';\r\nimport { Circle } from './drawing-tools/circle';\r\nimport { DrawPoint } from './drawing-tools/draw-point';\r\nimport { DrawProvider } from './drawing-tools/draw-provider';\r\nimport { HistoryMove } from './history-move-provider/history-move';\r\nimport { HistoryMoveProvider } from './history-move-provider/history-move-provider';\r\nimport { Board } from './models/board';\r\nimport { Bishop } from './models/pieces/bishop';\r\nimport { Color } from './models/pieces/color';\r\nimport { King } from './models/pieces/king';\r\nimport { Knight } from './models/pieces/knight';\r\nimport { Pawn } from './models/pieces/pawn';\r\nimport { Piece } from './models/pieces/piece';\r\nimport { Point } from './models/pieces/point';\r\nimport { Queen } from './models/pieces/queen';\r\nimport { Rook } from './models/pieces/rook';\r\nimport { NgxChessBoardView } from './ngx-chess-board-view';\r\nimport { AvailableMoveDecorator } from './piece-decorator/available-move-decorator';\r\nimport { PiecePromotionModalComponent } from './piece-promotion-modal/piece-promotion-modal.component';\r\nimport { NgxChessBoardService } from './service/ngx-chess-board.service';\r\nimport { Constants } from './utils/constants';\r\nimport { PieceIconInput } from './utils/inputs/piece-icon-input';\r\nimport { PieceIconInputManager } from './utils/inputs/piece-icon-input-manager';\r\nimport { MoveUtils } from './utils/move-utils';\r\nimport { UnicodeConstants } from './utils/unicode-constants';\r\n\r\nexport interface MoveChange extends HistoryMove {\r\n    check: boolean;\r\n    stalemate: boolean;\r\n    checkmate: boolean;\r\n    fen: string;\r\n    freeMode: boolean;\r\n}\r\n\r\n@Component({\r\n    selector: 'ngx-chess-board',\r\n    templateUrl: './ngx-chess-board.component.html',\r\n    styleUrls: ['./ngx-chess-board.component.scss'],\r\n})\r\nexport class NgxChessBoardComponent\r\n    implements OnInit, OnChanges, NgxChessBoardView {\r\n    @Input() darkTileColor = Constants.DEFAULT_DARK_TILE_COLOR;\r\n    @Input() lightTileColor: string = Constants.DEFAULT_LIGHT_TILE_COLOR;\r\n    @Input() showCoords = true;\r\n    @Input() dragDisabled = false;\r\n    @Input() drawDisabled = false;\r\n    @Input() lightDisabled = false;\r\n    @Input() darkDisabled = false;\r\n    /**\r\n     * Enabling free mode removes turn-based restriction and allows to move any piece freely!\r\n     */\r\n    @Input() freeMode = false;\r\n    @Output() moveChange = new EventEmitter<MoveChange>();\r\n    @Output() checkmate = new EventEmitter<void>();\r\n    @Output() stalemate = new EventEmitter<void>();\r\n\r\n    pieceSize: number;\r\n    selected = false;\r\n    @ViewChild('boardRef')\r\n    boardRef: ElementRef;\r\n    @ViewChild('modal') modal: PiecePromotionModalComponent;\r\n    board: Board;\r\n    boardStateProvider: BoardStateProvider;\r\n    moveStateProvider: MoveStateProvider;\r\n    moveHistoryProvider: HistoryMoveProvider;\r\n    boardLoader: BoardLoader;\r\n    coords: CoordsProvider = new CoordsProvider();\r\n    disabling = false;\r\n    drawProvider: DrawProvider;\r\n    drawPoint: DrawPoint;\r\n    pieceIconManager: PieceIconInputManager;\r\n\r\n    constructor(private ngxChessBoardService: NgxChessBoardService) {\r\n        this.board = new Board();\r\n        this.boardLoader = new BoardLoader(this.board);\r\n        this.boardLoader.addPieces();\r\n        this.boardStateProvider = new BoardStateProvider();\r\n        this.moveHistoryProvider = new HistoryMoveProvider();\r\n        this.drawProvider = new DrawProvider();\r\n        this.pieceIconManager = new PieceIconInputManager();\r\n    }\r\n\r\n    heightAndWidth: number = Constants.DEFAULT_SIZE;\r\n\r\n    @Input('size')\r\n    public set size(size: number) {\r\n        if (\r\n            size &&\r\n            size >= Constants.MIN_BOARD_SIZE &&\r\n            size <= Constants.MAX_BOARD_SIZE\r\n        ) {\r\n            this.heightAndWidth = size;\r\n        } else {\r\n            this.heightAndWidth = Constants.DEFAULT_SIZE;\r\n        }\r\n        this.drawProvider.clear();\r\n        this.calculatePieceSize();\r\n    }\r\n\r\n    @Input('pieceIcons')\r\n    public set pieceIcons(pieceIcons: PieceIconInput) {\r\n        this.pieceIconManager.pieceIconInput = pieceIcons;\r\n    }\r\n\r\n    @HostListener('contextmenu', ['$event'])\r\n    onRightClick(event: MouseEvent) {\r\n        event.preventDefault();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (\r\n            (changes.lightDisabled &&\r\n                this.lightDisabled &&\r\n                this.board.currentWhitePlayer) ||\r\n            (changes.darkDisabled &&\r\n                this.darkDisabled &&\r\n                !this.board.currentWhitePlayer)\r\n        ) {\r\n            this.board.possibleCaptures = [];\r\n            this.board.possibleMoves = [];\r\n        }\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.ngxChessBoardService.componentMethodCalled$.subscribe(() => {\r\n            this.board.reset();\r\n        });\r\n        this.calculatePieceSize();\r\n    }\r\n\r\n    onMouseUp(event: MouseEvent) {\r\n        if (event.button !== 0 && !this.drawDisabled) {\r\n            this.addDrawPoint(\r\n                event.x,\r\n                event.y,\r\n                event.ctrlKey,\r\n                event.altKey,\r\n                event.shiftKey\r\n            );\r\n            return;\r\n        }\r\n\r\n        this.drawProvider.clear();\r\n\r\n        if (this.dragDisabled) {\r\n            return;\r\n        }\r\n        const pointClicked = this.getClickPoint(event);\r\n\r\n        if (\r\n            this.board.activePiece &&\r\n            pointClicked.isEqual(this.board.activePiece.point) &&\r\n            this.disabling\r\n        ) {\r\n            this.disableSelection();\r\n            this.disabling = false;\r\n            return;\r\n        }\r\n        const pieceClicked = this.getPieceByPoint(\r\n            pointClicked.row,\r\n            pointClicked.col\r\n        );\r\n\r\n        if (this.isPieceDisabled(pieceClicked)) {\r\n            return;\r\n        }\r\n\r\n        if (this.selected) {\r\n            this.handleClickEvent(pointClicked, false);\r\n            //   this.possibleMoves = activePiece.getPossibleMoves();\r\n        }\r\n    }\r\n\r\n    onPieceClicked(pieceClicked, pointClicked) {\r\n        if (\r\n            (this.board.currentWhitePlayer && pieceClicked.color === Color.BLACK) ||\r\n            (!this.board.currentWhitePlayer && pieceClicked.color === Color.WHITE)\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        this.prepareActivePiece(pieceClicked, pointClicked);\r\n    }\r\n\r\n\r\n    /**\r\n     * Validates whether freemode is turned on!\r\n     */\r\n    isFreeMode() {\r\n        return this.freeMode;\r\n    }\r\n\r\n    /**\r\n     * Processes logic to allow freeMode based logic processing\r\n     */\r\n    onFreeMode(pieceClicked) {\r\n        if (\r\n            !this.isFreeMode() ||\r\n            pieceClicked === undefined ||\r\n            pieceClicked === null\r\n        ) {\r\n            return;\r\n        }\r\n        // sets player as white in-case white pieces are selected, and vice-versa when black is selected\r\n        this.board.currentWhitePlayer = pieceClicked.color === Color.WHITE;\r\n    }\r\n\r\n\r\n    afterMoveActions(promotionIndex?: number) {\r\n        this.checkIfPawnFirstMove(this.board.activePiece);\r\n        this.checkIfRookMoved(this.board.activePiece);\r\n        this.checkIfKingMoved(this.board.activePiece);\r\n\r\n        this.board.blackKingChecked = this.board.isKingInCheck(\r\n            Color.BLACK,\r\n            this.board.pieces\r\n        );\r\n        this.board.whiteKingChecked = this.board.isKingInCheck(\r\n            Color.WHITE,\r\n            this.board.pieces\r\n        );\r\n        const check =\r\n            this.board.blackKingChecked || this.board.whiteKingChecked;\r\n        const checkmate =\r\n            this.checkForPossibleMoves(Color.BLACK) ||\r\n            this.checkForPossibleMoves(Color.WHITE);\r\n        const stalemate =\r\n            this.checkForPat(Color.BLACK) || this.checkForPat(Color.WHITE);\r\n\r\n        this.disabling = false;\r\n        this.board.calculateFEN();\r\n\r\n        const lastMove = this.moveHistoryProvider.getLastMove();\r\n        if (lastMove && promotionIndex) {\r\n            lastMove.move += promotionIndex;\r\n        }\r\n\r\n        this.moveChange.emit({\r\n            ...lastMove,\r\n            check,\r\n            checkmate,\r\n            stalemate,\r\n            fen: this.board.fen,\r\n            freeMode: this.freeMode\r\n        });\r\n    }\r\n\r\n    disableSelection() {\r\n        this.selected = false;\r\n        this.board.possibleCaptures = [];\r\n        this.board.activePiece = null;\r\n        this.board.possibleMoves = [];\r\n    }\r\n\r\n    prepareActivePiece(pieceClicked: Piece, pointClicked: Point) {\r\n        this.board.activePiece = pieceClicked;\r\n        this.selected = true;\r\n        this.board.possibleCaptures = new AvailableMoveDecorator(\r\n            pieceClicked,\r\n            pointClicked,\r\n            this.board.currentWhitePlayer ? Color.WHITE : Color.BLACK,\r\n            this.board\r\n        ).getPossibleCaptures();\r\n        this.board.possibleMoves = new AvailableMoveDecorator(\r\n            pieceClicked,\r\n            pointClicked,\r\n            this.board.currentWhitePlayer ? Color.WHITE : Color.BLACK,\r\n            this.board\r\n        ).getPossibleMoves();\r\n    }\r\n\r\n    getPieceByPoint(row: number, col: number): Piece {\r\n        row = Math.floor(row);\r\n        col = Math.floor(col);\r\n        return this.board.pieces.find(\r\n            (piece) => piece.point.col === col && piece.point.row === row\r\n        );\r\n    }\r\n\r\n    isKingChecked(piece: Piece) {\r\n        if (piece instanceof King) {\r\n            return piece.color === Color.WHITE\r\n                ? this.board.whiteKingChecked\r\n                : this.board.blackKingChecked;\r\n        }\r\n    }\r\n\r\n    getClickPoint(event) {\r\n        return new Point(\r\n            Math.floor(\r\n                (event.y -\r\n                    this.boardRef.nativeElement.getBoundingClientRect().top) /\r\n                (this.boardRef.nativeElement.getBoundingClientRect()\r\n                        .height /\r\n                    8)\r\n            ),\r\n            Math.floor(\r\n                (event.x -\r\n                    this.boardRef.nativeElement.getBoundingClientRect().left) /\r\n                (this.boardRef.nativeElement.getBoundingClientRect().width /\r\n                    8)\r\n            )\r\n        );\r\n    }\r\n\r\n    movePiece(toMovePiece: Piece, newPoint: Point, promotionIndex?: number) {\r\n        const destPiece = this.board.pieces.find(\r\n            (piece) =>\r\n                piece.point.col === newPoint.col &&\r\n                piece.point.row === newPoint.row\r\n        );\r\n\r\n        if (destPiece && toMovePiece.color !== destPiece.color) {\r\n            this.board.pieces = this.board.pieces.filter(\r\n                (piece) => piece !== destPiece\r\n            );\r\n        } else {\r\n            if (destPiece && toMovePiece.color === destPiece.color) {\r\n                return;\r\n            }\r\n        }\r\n\r\n        const move = new HistoryMove(\r\n            MoveUtils.format(toMovePiece.point, newPoint, this.board.reverted),\r\n            toMovePiece.constant.name,\r\n            toMovePiece.color === Color.WHITE ? 'white' : 'black',\r\n            !!destPiece\r\n        );\r\n        this.moveHistoryProvider.addMove(move);\r\n\r\n        if (toMovePiece instanceof King) {\r\n            const squaresMoved = Math.abs(newPoint.col - toMovePiece.point.col);\r\n            if (squaresMoved > 1) {\r\n                if (newPoint.col < 3) {\r\n                    const leftRook = this.board.getPieceByField(\r\n                        toMovePiece.point.row,\r\n                        0\r\n                    );\r\n                    if (!this.freeMode) {\r\n                        leftRook.point.col = this.board.reverted ? 2 : 3;\r\n                    }\r\n                } else {\r\n                    const rightRook = this.board.getPieceByField(\r\n                        toMovePiece.point.row,\r\n                        7\r\n                    );\r\n                    if (!this.freeMode) {\r\n                        rightRook.point.col = this.board.reverted ? 4 : 5;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        if (toMovePiece instanceof Pawn) {\r\n            this.checkIfPawnTakesEnPassant(newPoint);\r\n            this.checkIfPawnEnpassanted(toMovePiece, newPoint);\r\n        }\r\n\r\n        toMovePiece.point = newPoint;\r\n        this.increaseFullMoveCount();\r\n        this.board.currentWhitePlayer = !this.board.currentWhitePlayer;\r\n\r\n        if (!this.checkForPawnPromote(toMovePiece, promotionIndex)) {\r\n            this.afterMoveActions();\r\n        }\r\n    }\r\n\r\n    checkIfPawnFirstMove(piece: Piece) {\r\n        if (piece instanceof Pawn) {\r\n            piece.isMovedAlready = true;\r\n        }\r\n    }\r\n\r\n    checkForPawnPromote(toPromotePiece: Piece, promotionIndex?: number) {\r\n        if (!(toPromotePiece instanceof Pawn)) {\r\n            return;\r\n        }\r\n\r\n        if (toPromotePiece.point.row === 0 || toPromotePiece.point.row === 7) {\r\n            this.board.pieces = this.board.pieces.filter(\r\n                (piece) => piece !== toPromotePiece\r\n            );\r\n\r\n            // When we make move manually, we pass promotion index already, so we don't need\r\n            // to acquire it from promote dialog\r\n            if (!promotionIndex) {\r\n                this.openPromoteDialog(toPromotePiece);\r\n            } else {\r\n                this.resolvePromotionChoice(toPromotePiece, promotionIndex);\r\n                this.afterMoveActions(promotionIndex);\r\n            }\r\n\r\n            return true;\r\n        }\r\n    }\r\n\r\n    openPromoteDialog(piece: Piece) {\r\n        this.modal.open((index) => {\r\n            this.resolvePromotionChoice(piece, index);\r\n            this.afterMoveActions(index);\r\n        });\r\n    }\r\n\r\n    resolvePromotionChoice(piece: Piece, index: number) {\r\n        const isWhite = piece.color === Color.WHITE;\r\n        switch (index) {\r\n            case 1:\r\n                this.board.pieces.push(\r\n                    new Queen(\r\n                        piece.point,\r\n                        piece.color,\r\n                        isWhite\r\n                            ? UnicodeConstants.WHITE_QUEEN\r\n                            : UnicodeConstants.BLACK_QUEEN,\r\n                        this.board\r\n                    )\r\n                );\r\n                break;\r\n            case 2:\r\n                this.board.pieces.push(\r\n                    new Rook(\r\n                        piece.point,\r\n                        piece.color,\r\n                        isWhite\r\n                            ? UnicodeConstants.WHITE_ROOK\r\n                            : UnicodeConstants.BLACK_ROOK,\r\n                        this.board\r\n                    )\r\n                );\r\n                break;\r\n            case 3:\r\n                this.board.pieces.push(\r\n                    new Bishop(\r\n                        piece.point,\r\n                        piece.color,\r\n                        isWhite\r\n                            ? UnicodeConstants.WHITE_BISHOP\r\n                            : UnicodeConstants.BLACK_BISHOP,\r\n                        this.board\r\n                    )\r\n                );\r\n                break;\r\n            case 4:\r\n                this.board.pieces.push(\r\n                    new Knight(\r\n                        piece.point,\r\n                        piece.color,\r\n                        isWhite\r\n                            ? UnicodeConstants.WHITE_KNIGHT\r\n                            : UnicodeConstants.BLACK_KNIGHT,\r\n                        this.board\r\n                    )\r\n                );\r\n                break;\r\n        }\r\n    }\r\n\r\n    reset(): void {\r\n        this.boardStateProvider.clear();\r\n        this.moveHistoryProvider.clear();\r\n        this.boardLoader.addPieces();\r\n        this.board.reset();\r\n        this.coords.reset();\r\n        this.drawProvider.clear();\r\n        this.freeMode = false;\r\n    }\r\n\r\n    reverse(): void {\r\n        this.selected = false;\r\n        this.board.reverse();\r\n        this.coords.reverse();\r\n    }\r\n\r\n    updateBoard(board: Board) {\r\n        this.board = board;\r\n        this.boardLoader.setBoard(this.board);\r\n        this.board.possibleCaptures = [];\r\n        this.board.possibleMoves = [];\r\n    }\r\n\r\n    undo(): void {\r\n        if (!this.boardStateProvider.isEmpty()) {\r\n            const lastBoard = this.boardStateProvider.pop().board;\r\n            if (this.board.reverted) {\r\n                lastBoard.reverse();\r\n            }\r\n            this.board = lastBoard;\r\n            this.boardLoader.setBoard(this.board);\r\n            this.board.possibleCaptures = [];\r\n            this.board.possibleMoves = [];\r\n            this.moveHistoryProvider.pop();\r\n        }\r\n    }\r\n\r\n    getMoveHistory(): HistoryMove[] {\r\n        return this.moveHistoryProvider.getAll();\r\n    }\r\n\r\n    setFEN(fen: string): void {\r\n        try {\r\n            this.boardLoader.loadFEN(fen);\r\n            this.board.possibleCaptures = [];\r\n            this.board.possibleMoves = [];\r\n            this.coords.reset();\r\n        } catch (exception) {\r\n            this.boardLoader.addPieces();\r\n        }\r\n    }\r\n\r\n    getFEN(): string {\r\n        return this.board.fen;\r\n    }\r\n\r\n    dragEnded(event: CdkDragEnd): void {\r\n        event.source.reset();\r\n        event.source.element.nativeElement.style.zIndex = '0';\r\n        event.source.element.nativeElement.style.pointerEvents = 'auto';\r\n        event.source.element.nativeElement.style.touchAction = 'auto';\r\n    }\r\n\r\n    dragStart(event: CdkDragStart): void {\r\n        const style = event.source.element.nativeElement.style;\r\n        style.position = 'relative';\r\n        style.zIndex = '1000';\r\n        style.touchAction = 'none';\r\n        style.pointerEvents = 'none';\r\n    }\r\n\r\n    onMouseDown(event: MouseEvent) {\r\n        if (event.button !== 0) {\r\n            this.drawPoint = this.getDrawingPoint(\r\n                event.x,\r\n                event.y,\r\n                event.ctrlKey,\r\n                event.altKey,\r\n                event.shiftKey\r\n            );\r\n            return;\r\n        }\r\n        const pointClicked = this.getClickPoint(event);\r\n\r\n        this.drawProvider.clear();\r\n\r\n        if (\r\n            this.board.activePiece &&\r\n            pointClicked.isEqual(this.board.activePiece.point)\r\n        ) {\r\n            this.disabling = true;\r\n            return;\r\n        }\r\n\r\n        const pieceClicked = this.getPieceByPoint(\r\n            pointClicked.row,\r\n            pointClicked.col\r\n        );\r\n\r\n        if (this.freeMode) {\r\n            if (pieceClicked) {\r\n                this.board.currentWhitePlayer = (pieceClicked.color === Color.WHITE);\r\n            }\r\n        }\r\n\r\n        if (this.isPieceDisabled(pieceClicked)) {\r\n            return;\r\n        }\r\n\r\n        if (this.selected) {\r\n            this.handleClickEvent(pointClicked, true);\r\n        } else {\r\n            if (pieceClicked) {\r\n                this.onFreeMode(pieceClicked);\r\n                this.onPieceClicked(pieceClicked, pointClicked);\r\n            }\r\n        }\r\n    }\r\n\r\n    getDrawingPoint(\r\n        x: number,\r\n        y: number,\r\n        crtl: boolean,\r\n        alt: boolean,\r\n        shift: boolean\r\n    ) {\r\n        const squareSize = this.heightAndWidth / 8;\r\n        const xx = Math.floor(\r\n            (x - this.boardRef.nativeElement.getBoundingClientRect().left) /\r\n            squareSize\r\n        );\r\n        const yy = Math.floor(\r\n            (y - this.boardRef.nativeElement.getBoundingClientRect().top) /\r\n            squareSize\r\n        );\r\n\r\n        let color = 'green';\r\n\r\n        if (crtl || shift) {\r\n            color = 'red';\r\n        }\r\n        if (alt) {\r\n            color = 'blue';\r\n        }\r\n        if ((shift || crtl) && alt) {\r\n            color = 'orange';\r\n        }\r\n        return new DrawPoint(\r\n            Math.floor(xx * squareSize + squareSize / 2),\r\n            Math.floor(yy * squareSize + squareSize / 2),\r\n            color\r\n        );\r\n    }\r\n\r\n    private checkIfRookMoved(piece: Piece) {\r\n        if (piece instanceof Rook) {\r\n            piece.isMovedAlready = true;\r\n        }\r\n    }\r\n\r\n    private checkIfKingMoved(piece: Piece) {\r\n        if (piece instanceof King) {\r\n            piece.isMovedAlready = true;\r\n        }\r\n    }\r\n\r\n    private checkForPossibleMoves(color: Color): boolean {\r\n        if (\r\n            !this.board.pieces\r\n                .filter((piece) => piece.color === color)\r\n                .some(\r\n                    (piece) =>\r\n                        piece\r\n                            .getPossibleMoves()\r\n                            .some(\r\n                                (move) =>\r\n                                    !MoveUtils.willMoveCauseCheck(\r\n                                        color,\r\n                                        piece.point.row,\r\n                                        piece.point.col,\r\n                                        move.row,\r\n                                        move.col,\r\n                                        this.board\r\n                                    )\r\n                            ) ||\r\n                        piece\r\n                            .getPossibleCaptures()\r\n                            .some(\r\n                                (capture) =>\r\n                                    !MoveUtils.willMoveCauseCheck(\r\n                                        color,\r\n                                        piece.point.row,\r\n                                        piece.point.col,\r\n                                        capture.row,\r\n                                        capture.col,\r\n                                        this.board\r\n                                    )\r\n                            )\r\n                )\r\n        ) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    private checkForPat(color: Color) {\r\n        if (color === Color.WHITE && !this.board.whiteKingChecked) {\r\n            return this.checkForPossibleMoves(color);\r\n        } else {\r\n            if (color === Color.BLACK && !this.board.blackKingChecked) {\r\n                return this.checkForPossibleMoves(color);\r\n            }\r\n        }\r\n    }\r\n\r\n    private checkIfPawnEnpassanted(piece: Pawn, newPoint: Point) {\r\n        if (Math.abs(piece.point.row - newPoint.row) > 1) {\r\n            this.board.enPassantPiece = piece;\r\n            this.board.enPassantPoint = new Point(\r\n                (piece.point.row + newPoint.row) / 2,\r\n                piece.point.col\r\n            );\r\n        } else {\r\n            this.board.enPassantPoint = null;\r\n            this.board.enPassantPiece = null;\r\n        }\r\n    }\r\n\r\n    private checkIfPawnTakesEnPassant(newPoint: Point) {\r\n        if (newPoint.isEqual(this.board.enPassantPoint)) {\r\n            this.board.pieces = this.board.pieces.filter(\r\n                (piece) => piece !== this.board.enPassantPiece\r\n            );\r\n            this.board.enPassantPoint = null;\r\n            this.board.enPassantPiece = null;\r\n        }\r\n    }\r\n\r\n    private saveClone() {\r\n        const clone = this.board.clone();\r\n\r\n        if (this.board.reverted) {\r\n            clone.reverse();\r\n        }\r\n        this.boardStateProvider.addMove(new BoardState(clone));\r\n    }\r\n\r\n    private saveMoveClone() {\r\n        const clone = this.board.clone();\r\n\r\n        if (this.board.reverted) {\r\n            clone.reverse();\r\n        }\r\n        this.moveStateProvider.addMove(new BoardState(clone));\r\n    }\r\n\r\n    private calculatePieceSize() {\r\n        this.pieceSize = this.heightAndWidth / 10;\r\n    }\r\n\r\n    private increaseFullMoveCount() {\r\n        if (!this.board.currentWhitePlayer) {\r\n            ++this.board.fullMoveCount;\r\n        }\r\n    }\r\n\r\n    private handleClickEvent(pointClicked: Point, isMouseDown: boolean) {\r\n        let moving = false;\r\n\r\n        if ((\r\n            this.board.isPointInPossibleMoves(pointClicked) ||\r\n            this.board.isPointInPossibleCaptures(pointClicked)\r\n        ) || this.freeMode) {\r\n            this.saveClone();\r\n            this.board.lastMoveSrc = new Point(\r\n                this.board.activePiece.point.row,\r\n                this.board.activePiece.point.col\r\n            );\r\n            this.board.lastMoveDest = pointClicked;\r\n            this.movePiece(this.board.activePiece, pointClicked);\r\n\r\n            if (!this.board.activePiece.point.isEqual(this.board.lastMoveSrc)) {\r\n                moving = true;\r\n            }\r\n        }\r\n\r\n        if (isMouseDown || moving) {\r\n            this.disableSelection();\r\n        }\r\n        this.disableSelection();\r\n        const pieceClicked = this.getPieceByPoint(\r\n            pointClicked.row,\r\n            pointClicked.col\r\n        );\r\n        if (pieceClicked && !moving) {\r\n            this.onFreeMode(pieceClicked);\r\n            this.onPieceClicked(pieceClicked, pointClicked);\r\n        }\r\n    }\r\n\r\n    private addDrawPoint(\r\n        x: number,\r\n        y: number,\r\n        crtl: boolean,\r\n        alt: boolean,\r\n        shift: boolean\r\n    ) {\r\n        const upPoint = this.getDrawingPoint(x, y, crtl, alt, shift);\r\n        if (this.drawPoint.isEqual(upPoint)) {\r\n            const circle = new Circle();\r\n            circle.drawPoint = upPoint;\r\n            if (!this.drawProvider.containsCircle(circle)) {\r\n                this.drawProvider.addCircle(circle);\r\n            } else {\r\n                this.drawProvider.reomveCircle(circle);\r\n            }\r\n        } else {\r\n            const arrow = new Arrow();\r\n            arrow.start = this.drawPoint;\r\n            arrow.end = upPoint;\r\n\r\n            if (!this.drawProvider.containsArrow(arrow)) {\r\n                this.drawProvider.addArrow(arrow);\r\n            } else {\r\n                this.drawProvider.removeArrow(arrow);\r\n            }\r\n        }\r\n    }\r\n\r\n    move(coords: string) {\r\n        if (coords) {\r\n            const sourceIndexes = MoveUtils.translateCoordsToIndex(\r\n                coords.substring(0, 2),\r\n                this.board.reverted\r\n            );\r\n\r\n            const destIndexes = MoveUtils.translateCoordsToIndex(\r\n                coords.substring(2, 4),\r\n                this.board.reverted\r\n            );\r\n\r\n            const srcPiece = this.getPieceByPoint(\r\n                sourceIndexes.yAxis,\r\n                sourceIndexes.xAxis\r\n            );\r\n\r\n            if (srcPiece) {\r\n                if (\r\n                    (this.board.currentWhitePlayer &&\r\n                        srcPiece.color === Color.BLACK) ||\r\n                    (!this.board.currentWhitePlayer &&\r\n                        srcPiece.color === Color.WHITE)\r\n                ) {\r\n                    return;\r\n                }\r\n\r\n                this.prepareActivePiece(srcPiece, srcPiece.point);\r\n\r\n                if (\r\n                    this.board.isPointInPossibleMoves(\r\n                        new Point(destIndexes.yAxis, destIndexes.xAxis)\r\n                    ) ||\r\n                    this.board.isPointInPossibleCaptures(\r\n                        new Point(destIndexes.yAxis, destIndexes.xAxis)\r\n                    )\r\n                ) {\r\n                    this.saveClone();\r\n                    this.movePiece(\r\n                        srcPiece,\r\n                        new Point(destIndexes.yAxis, destIndexes.xAxis),\r\n                        coords.length === 5 ? +coords.substring(4, 5) : 0\r\n                    );\r\n\r\n                    this.board.lastMoveSrc = new Point(\r\n                        sourceIndexes.yAxis,\r\n                        sourceIndexes.xAxis\r\n                    );\r\n                    this.board.lastMoveDest = new Point(\r\n                        destIndexes.yAxis,\r\n                        destIndexes.xAxis\r\n                    );\r\n\r\n                    this.disableSelection();\r\n                } else {\r\n                    this.disableSelection();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    getCustomPieceIcons(piece: Piece) {\r\n        return JSON.parse(\r\n            `{ \"background-image\": \"url('${this.pieceIconManager.getPieceIcon(\r\n                piece\r\n            )}')\"}`\r\n        );\r\n    }\r\n\r\n    private isPieceDisabled(pieceClicked: Piece) {\r\n        if (pieceClicked && pieceClicked.point) {\r\n            const foundCapture = this.board.possibleCaptures.find(\r\n                (capture) =>\r\n                    capture.col === pieceClicked.point.col &&\r\n                    capture.row === pieceClicked.point.row\r\n            );\r\n\r\n            if (foundCapture) {\r\n                return false;\r\n            }\r\n        }\r\n        return (\r\n            pieceClicked &&\r\n            ((this.lightDisabled && pieceClicked.color === Color.WHITE) ||\r\n                (this.darkDisabled && pieceClicked.color === Color.BLACK))\r\n        );\r\n    }\r\n}\r\n","import { DragDropModule } from '@angular/cdk/drag-drop';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ModuleWithProviders, NgModule } from '@angular/core';\r\nimport { NgxChessBoardComponent } from './ngx-chess-board.component';\r\nimport { PiecePromotionModalComponent } from './piece-promotion-modal/piece-promotion-modal.component';\r\nimport { NgxChessBoardService } from './service/ngx-chess-board.service';\r\n\r\n@NgModule({\r\n    declarations: [NgxChessBoardComponent, PiecePromotionModalComponent],\r\n    imports: [CommonModule, DragDropModule],\r\n    exports: [NgxChessBoardComponent],\r\n})\r\nexport class NgxChessBoardModule {\r\n    static forRoot(): ModuleWithProviders<NgxChessBoardModule> {\r\n        return {\r\n            ngModule: NgxChessBoardModule,\r\n            providers: [NgxChessBoardService],\r\n        };\r\n    }\r\n}\r\n"]}